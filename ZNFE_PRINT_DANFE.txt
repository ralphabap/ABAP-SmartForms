*$*$*********************************************************************************
****    PROGRAM ID    : ZVXL_NFE_FILLHEADER
****    TITLE         : NFe - Fill information about NFe Header
*$*$    CREATION DATE : 27/06/2008
*$*$    AUTHOR        : Daniela Machado Lima (BN8068)
****    DESIGNER      : Daniela Machado Lima (BN8068)
****    OWNERSHIP     : [ADD OWNERSHIP COMMENTS HERE]
*$*$---------------------------------------------------------------------------------
****    DESCRIPTION   : Print of DANFE by SmartForm
****                    Should be used together with Message Control (NAST)
****                    Basically, a copy of J_1BNFPR
*$*$*********************************************************************************
*$*$    AUTHORIZATION CHECKS
*$*$---------------------------------------------------------------------------------
*$*$  Object             Authority Fields           ABAP Fields
*$*$---------------------------------------------------------------------------------
****                  |                          |
*$*$*********************************************************************************
*$*$    CHANGE HISTORY
*$*$---------------------------------------------------------------------------------
*$*$ DATE        | T-NUM  | DESCRIPTION                   | REFERENCE
**** 20080627    | BN8068 | INITIAL DEVELOPMENT           | BN8068-080627
**** 20080908    | BN8068 | Add Exception to function     | BN8068-080908
****             |        | SD_PRINT_TERMS_OF_PAYMENT_SPLI|
**** 20080909    | BN8068 | Add Exception to function     | BN8068-080908
****             |        | SD_PRINT_TERMS_OF_PAYMENT     |
**** 20080910    | BN8068 | Imports NF type LJ            | BN8068-080910
**** 20081010    | BN8068 | Correction Total Weight       | BN8068-081010
**** 20081013    | BN8068 | Batch Input na VF31           | BN8068-081013
**** 20081013    | BN8068 | Clear Name2 from Customers    | BN8068-081013
**** 20081028    | BN8068 | Billing type L2 in export SO  | BN8068-081028
**** 20081112    | BP7435 | Tax base for note type LP     |
****             |        | and LJ                        | BP7435-121108
**** 20081119    | BN8068 | Zona Franca Taxes             | BN8068-081119
**** 20081218    | BP7435 | Transportation Plate          | BP7435-081218
**** 20090109    | BN8068 | Especie and qtde adjustament  | BN8068-090109
**** 20090127    | BN8068 | Comment Line check            | BN8068-090127
**** 20090128    | BN8068 | Comment Tax ICZF              | BN8068-090128
**** 20090413    | BN8068 | Fill Marca and Numeração from | BN8068-090413
****             |        | Import programs               |
**** 20090406    | BN8068 | Qty and Specie adjustment     | BN8068-090406
**** 20090506    | BN8068 | Duplicate adjustments (FATURA)| BN8068-090506
**** 20090630    | BP9015 | Fix the difference between the| BP9015-090630
****             |        | quantity field of DANFE and   |
****             |        | No. of packages. IS004454.    |
**** 20090804    | BN5607 | IS004478                      | BN5607-090804
**** 20090810    | BN8068 | SEFAZ Manual 3.0 adjustament  | BN8068-090810
**** 20090817    | BP9015 | IS004454 - Getting old code.  | BP9015-090817
**** 20090901    | BN8068 | GWC103074 - CFOP Decrip. fix  | BN8068-090901
****                        and IS004478 commented
*$*$*********************************************************************************

*&---------------------------------------------------------------------*
*& Report  ZNFE_PRINT_DANFE                                            *
*&---------------------------------------------------------------------*
REPORT  znfe_print_danfe MESSAGE-ID 8b.
*======================================================================*
*  TABLES, INCLUDES, STRUCTURES, DATAS, ...                            *
*======================================================================*

*----------------------------------------------------------------------*
*  TABLES                                                              *
*----------------------------------------------------------------------*
* tables ---------------------------------------------------------------
TABLES: bseg,
        bsid,
        bsis,
        bsad,
        j_1bnfdoc,
        vbrk     ,
        bkpf     ,
        vbak     ,
        vbrp     ,
        j_1bnfe_active,
        j_1b_nfe_access_key,
        zsprnfauxi,
        zvbrpterm,
        zwint_plan,
        j_1bnflin,
        knb1,
        t012,
        bnka,
        ekko,
        mkpf,
        mseg,
        lips,
        vbep,
        knva,
        knvi        , " Diogo 09/08/08 - Msg ZF
        tvwat       ,
        zvbrmsgnfh  ,
        znbm        ,
        marc        ,
        zpisconfiszf,
        ekbe        ,
        ekpv        ,
        eket        ,
        likp        ,
        znfbatch    ,
        j_1btxst1   ,
        j_1btxst3   ,
        zbrcxty     ,
        zbrmatcx    ,
        ztxxctatvs  ,
*" Begin of BN8068-081013
        zsloginvocidoc.
*" End of BN8068-081013
*----------------------------------------------------------------------*
*  INCLUDES                                                            *
*----------------------------------------------------------------------*
* INCLUDE for General Table Descriptions for Print Programs ------------
INCLUDE rvadtabl.
INCLUDE znfe_j_1bnfpr_printinc.
*----------------------------------------------------------------------*
*  TYPES                                                              *
*----------------------------------------------------------------------*
TYPES: BEGIN OF y_range            ,
        sign   TYPE rsparams-sign  ,
        option TYPE rsparams-option,
        low    TYPE rsparams-low   ,
        high   TYPE rsparams-high  ,
      END OF y_range               ,

      BEGIN OF y_mcha              ,
        hsdat  TYPE hsdat          ,
        vfdat  TYPE vfdat          ,
      END OF y_mcha                ,

      BEGIN OF y_cfop             ,
        key(6)           TYPE c    ,
        char6(6)         TYPE c    ,
        dupl_text_indic  TYPE c    ,
        text(50)         TYPE c    ,
      END OF y_cfop               ,

BEGIN OF y_bvbrp  ,
  vbeln   TYPE vbrp-vbeln,
  posnr   TYPE vbrp-posnr,
  vgbel   TYPE vbrp-vgbel,
  vgpos   TYPE vbrp-vgpos,
END OF y_bvbrp,

  BEGIN OF y_blips  ,
    vbeln TYPE lips-vbeln,
    posnr TYPE lips-posnr,
    charg TYPE lips-charg,
    uecha TYPE lips-uecha,
    lfimg TYPE lips-lfimg,
    vrkme TYPE lips-vrkme,
END OF y_blips ,

       BEGIN OF y_refdoc,
         nfe    TYPE j_1bnfdoc-nfe,
         nfenum TYPE j_1bnfdoc-nfenum,
         nfnum  TYPE j_1bnfdoc-nfnum,
       END OF y_refdoc.
*{ Begin of BN5607-090804
TYPES: BEGIN OF y_po_imp,
  po_imp TYPE zvxxnfe_itemnew-po_imp,
END OF y_po_imp.
*} End of BN5607-090804

*----------------------------------------------------------------------*
*  STRUCTURES                                                          *
*----------------------------------------------------------------------*
* Nota Fiscal header structure -----------------------------------------
DATA: BEGIN OF wk_header.
        INCLUDE STRUCTURE j_1bnfdoc.
DATA: END OF wk_header.

* Nota Fiscal header structure - add. segment --------------------------
DATA: BEGIN OF wk_header_add.
        INCLUDE STRUCTURE j_1bindoc.
DATA: END OF wk_header_add.

* Nota Fiscal partner structure ----------------------------------------
DATA: BEGIN OF wk_partner OCCURS 0.
        INCLUDE STRUCTURE j_1bnfnad.
DATA: END OF wk_partner.

* Nota Fiscal item structure -------------------------------------------
DATA: BEGIN OF wk_item OCCURS 0.
        INCLUDE STRUCTURE j_1bnflin.
DATA: END OF wk_item.

* Nota Fiscal item structure - add. segment ----------------------------
DATA: BEGIN OF wk_item_add OCCURS 0.
        INCLUDE STRUCTURE j_1binlin.
DATA: END OF wk_item_add.

* Nota Fiscal item tax structure ---------------------------------------
DATA: BEGIN OF wk_item_tax OCCURS 0.
        INCLUDE STRUCTURE j_1bnfstx.
DATA: END OF wk_item_tax.

* Nota Fiscal header message structure ---------------------------------
DATA: BEGIN OF wk_header_msg OCCURS 0.
        INCLUDE STRUCTURE j_1bnfftx.
DATA: END OF wk_header_msg.

* Nota Fiscal reference to header message structure -------------------
DATA: BEGIN OF wk_refer_msg OCCURS 0.
        INCLUDE STRUCTURE j_1bnfref.
DATA: END OF wk_refer_msg.

* auxiliar structure for vbrk key (used to update FI) ------------------
DATA: BEGIN OF key_vbrk,
        vbeln LIKE vbrk-vbeln,
      END OF key_vbrk.

* Message Table
DATA: BEGIN OF t_line OCCURS 0.
        INCLUDE STRUCTURE tline.
DATA: END OF t_line.

DATA: my_destination LIKE j_1binnad,
      my_issuer      LIKE j_1binnad,
      my_carrier     LIKE j_1binnad,
      my_items       LIKE j_1bprnfli OCCURS 0 WITH HEADER LINE.

DATA: fm_name        TYPE rs38l_fnam.

DATA: BEGIN OF inter_total_table OCCURS 0,
        matorg    LIKE j_1bprnfli-matorg,
        taxsit    LIKE j_1bprnfli-taxsit,
        icmsrate  LIKE j_1bprnfli-icmsrate,
        condensed TYPE c,
        nfnett    LIKE j_1bprnfli-nfnett,
      END OF inter_total_table.

DATA: BEGIN OF wk_cfop OCCURS 0,
  key(6)           TYPE c,
  char6(6)         TYPE c,
  dupl_text_indic  TYPE c,
  text(50)         TYPE c.
DATA: END OF wk_cfop.

*---data for SmartForms---*
DATA: output_options     TYPE ssfcompop. " transfer printer to SM
DATA: control_parameters TYPE ssfctrlop.

* Structures for batch routine
DATA: e_vbrk   TYPE vbrk             ,
      e_vkorg  TYPE y_range          ,
      e_mcha   TYPE y_mcha           ,
      e_batch  TYPE zvxlnfebatch     ,
      e_ittax  TYPE j_1bnfstx        ,
      e_cfop   TYPE y_cfop           ,
      e_codmsg TYPE y_range          ,
      e_bvbrp  TYPE y_bvbrp          ,
      e_blips  TYPE y_blips          ,
      e_pmc    TYPE zvxlnfepmc       ,
      e_docref TYPE y_refdoc.

* Tabela para dados da fatura (SMARTFORMS).
DATA: w_danfe   TYPE znfedanfe_header.

* Estrutura para dados da fatura (SMARTFORMS).
DATA: e_job_output_info TYPE ssfcrescl.

* Field Symbols dados da fatura (SMARTFORMS).
FIELD-SYMBOLS: <fs_itcoo> TYPE itcoo.

* Variaveisl para emissão de email
DATA: w_adrnr      TYPE kna1-adrnr,
      w_consnumber TYPE adrt-consnumber,
      w_smtp_addr  TYPE adr6-smtp_addr,
      w_teste      TYPE c,
      w_numf(9)    TYPE c.

* Tables for Batch
DATA: t_vkorg TYPE TABLE OF y_range     , "Sales Organization
      t_batch TYPE TABLE OF j1b_nf_xml_j,
      t_cfop  TYPE TABLE OF y_cfop      ,
      t_bvbrp TYPE TABLE OF y_bvbrp,
      t_blips TYPE TABLE OF y_blips.

*--------------------------------------------
*... Temporal NR component fields
DATA: BEGIN OF tmpzsprnfauxi.
        INCLUDE STRUCTURE zsprnfauxi.
DATA: END OF tmpzsprnfauxi.

*... Temporal J_1BPRNFLI.
DATA: BEGIN OF tmpj_1bprnfli.
        INCLUDE STRUCTURE j_1bprnfli.
DATA: END OF tmpj_1bprnfli.

*... NF total volume.
DATA: BEGIN OF t_zvimatdata OCCURS 0.
        INCLUDE STRUCTURE zvimatdata.
DATA: END OF t_zvimatdata.

*{ ICSTO developments.
DATA: f_ekko    LIKE  ekko    OCCURS 10 WITH HEADER LINE,
      f_ekpo    LIKE  ekpo    OCCURS 10 WITH HEADER LINE,
      f_ekpv    LIKE  ekpv    OCCURS 10 WITH HEADER LINE,
      f_eket    LIKE  eket    OCCURS 10 WITH HEADER LINE,
      f_tkomv   LIKE  komv    OCCURS 10 WITH HEADER LINE,
      f_ekbe    LIKE  ekbe    OCCURS 10 WITH HEADER LINE,
      f_ekbes   LIKE  ekbes   OCCURS 10 WITH HEADER LINE,
      f_likp    LIKE  likp    OCCURS 10 WITH HEADER LINE,
      f_lips    LIKE  lips    OCCURS 10 WITH HEADER LINE,
      f_ekbez   LIKE  ekbez   OCCURS 10 WITH HEADER LINE,
      f_ekbnk   LIKE  ekbnk   OCCURS 10 WITH HEADER LINE,
      f_ekbz    LIKE  ekbz    OCCURS 10 WITH HEADER LINE.

* Deliveries
DATA:BEGIN OF  delivery OCCURS 10.
DATA: ebeln LIKE ekpo-ebeln,
      ebelp LIKE ekpo-ebelp,
      vbeln LIKE lips-vbeln,
      posnr LIKE lips-posnr.
DATA: END OF delivery.

* Query Express
DATA: BEGIN OF query OCCURS 10,
     vbeln LIKE lips-vbeln.
DATA: END   OF query.

DATA: BEGIN OF w_pmc_table OCCURS 0,
      matnr LIKE mara-matnr,
      maktx LIKE makt-maktx.
DATA: END OF w_pmc_table.

DATA: BEGIN OF xznfbatch OCCURS 0.
        INCLUDE STRUCTURE znfbatch.
DATA: END OF xznfbatch.

DATA: BEGIN OF t_meins OCCURS 0,
       meins LIKE j_1bnflin-meins,
       menge LIKE j_1bnflin-menge,
      END OF t_meins.

DATA: BEGIN OF t_meins2 OCCURS 0,
            vbeln LIKE vbrk-vbeln,
            matnr LIKE lips-matnr,
            meins LIKE zbrcxty-meins,
            menge LIKE lips-lgmng,
      END OF t_meins2.

DATA: BEGIN OF t_meins3 OCCURS 0,
            meins LIKE zbrcxty-meins,
            menge LIKE lips-lgmng,
      END OF t_meins3.

DATA: BEGIN OF wl_t_meins_all OCCURS 0.
DATA: vbeln LIKE vbrk-vbeln.
        INCLUDE STRUCTURE t_meins.
DATA: END OF wl_t_meins_all.

DATA: BEGIN OF t_konv OCCURS 0,
        kposn LIKE konv-kposn,
        kbetr LIKE konv-kbetr,
      END OF t_konv.

*  DATA: BEGIN OF inter_total_table OCCURS 0,
*          matorg    LIKE j_1bprnfli-matorg,
*          taxsit    LIKE j_1bprnfli-taxsit,
*          icmsrate  LIKE j_1bprnfli-icmsrate,
*          condensed TYPE c,
*          nfnett     LIKE j_1bprnfli-nfnett,
*        END OF inter_total_table.

DATA: BEGIN OF t_desc_cfop OCCURS 0,
        text LIKE j_1bagnt-cfotxt,
      END OF t_desc_cfop.

DATA: t_codmsg TYPE TABLE OF y_range.

*" Begin of BN8068-081013
* TABELAS PARA ELABORAÇÃO DO BATCH INPUT
DATA: i_bdcdata TYPE STANDARD TABLE OF bdcdata,
      i_message TYPE STANDARD TABLE OF bdcmsgcoll,
      i_zsloginvocidoc TYPE STANDARD TABLE OF zsloginvocidoc.

DATA: w_bdcdata TYPE bdcdata.

*{  BEGIN OF BN5607-090804
DATA: t_po_imp TYPE STANDARD TABLE OF y_po_imp.

FIELD-SYMBOLS <fs_po_imp> type y_po_imp.
*}  END OF BN5607-090804

FIELD-SYMBOLS <fs_message> TYPE bdcmsgcoll.
*{ Begin of BN8068-090406
FIELD-SYMBOLS: <fs_item>   TYPE j_1bnflin.
*} End of BN8068-090406
*" End of BN8068-081013

*----------------------------------------------------------------------*
*  DATA AND CONSTANTS                                                  *
*----------------------------------------------------------------------*
DATA: wk_docnum     TYPE j_1bnfdoc-docnum,
      retcode       TYPE sy-subrc,
      xscreen,
      wk_xblnr      TYPE bkpf-xblnr,
      subrc_upd_bi  TYPE sy-subrc.
DATA: bi_subrc      TYPE sy-subrc,
      fi_subrc      TYPE sy-subrc,
      w_mvgr2       TYPE mvke-mvgr2,
      w_text1       TYPE tline-tdline,
      w_text2       TYPE tline-tdline,
      w_text3       TYPE tline-tdline,
      w_text4       TYPE tline-tdline,
      proctype(02)  TYPE c           ,
      w_regio       TYPE kna1-regio  ,
      zfac_export(1) TYPE c    VALUE space,
*-------------------------------------------
      w_womatnr          TYPE i                ,
      ship_from_partner  LIKE j_1binnad        ,
      ship_to_partner    LIKE j_1binnad        ,
      inverted_datum     LIKE sy-datum         ,
*        w_regio            type kna1-regio       ,
      icsto_palnum       LIKE lips-lgmng       ,
      w_auart            LIKE vbak-auart       ,
      w_pallets_brgew    LIKE lips-brgew       ,
      index              TYPE n                ,
      par1type(1)        TYPE c                ,
      par2type(1)        TYPE c                ,
      seqxxx(21)         TYPE c                ,
      msgxxx(21)         TYPE c                ,
      msgp1(72)          TYPE c                ,
      w_factor1          LIKE marm-umren       ,
      w_factor2          LIKE marm-umrez       ,
      subipival          LIKE j_1bprnfhd-ipival,
      subnfnet           LIKE j_1bprnfhd-nfnet ,
      subt_icmsrate(1)   TYPE c                ,
      wk_div(5)          TYPE p DECIMALS 2     ,
      wk_res(5)          TYPE n                ,
      wk_totcs(6)        TYPE n                ,
      w_piscofins_value  LIKE konv-kbetr       ,
      w_piscofins_msg(1) TYPE c                ,
      w_continue(1)      TYPE c                ,
      wl_vbeln           LIKE vbrk-vbeln       ,
      v_lines            TYPE i                ,
      v_zfbdt            LIKE bseg-zfbdt       ,
      value              LIKE konv-kbetr       ,
      cfop_dev(1)        TYPE c                ,
      kit_counter        TYPE i                ,
      type_of_next(1)    TYPE c                ,
      tmp_matnr          LIKE j_1bprnfli-matnr ,
      tmp_maktx          LIKE j_1bprnfli-maktx ,
      tmp_menge          LIKE j_1bprnfli-menge ,
      wl_prazo           LIKE j_1bprnfhd-pstdat,
      wl_pmc_value(20)   TYPE c                ,
      wl_shipfrom        LIKE t001w-txjcd      ,
      wl_shipto          LIKE kna1-txjcd       ,
      wl_stgrp           LIKE j_1btxst1-stgrp  ,
      wl_matnr_pmc       LIKE j_1bnflin-matnr  ,
      wl_validity_date   LIKE j_1btxst1-validfrom,
      c_pallet_pstyv  LIKE lips-pstyv VALUE 'ZNLX',
      c_pallet_pstyv2 LIKE lips-pstyv VALUE 'ZTBL',
      w_btcont(3)     TYPE n,
      w_taxval           TYPE j_1bnfstx-taxval,
*" Begin of BN8068-081010
      w_vgbel            TYPE vbrp-vgbel,
      w_btgew            TYPE likp-btgew,
      w_land1            TYPE kna1-land1,
*" End of BN8068-081010

*" Begin of BN8068-081013
      w_mode(1)          TYPE c,
      w_cont             TYPE i,
      w_docnum           TYPE j_1bdocnum,
      w_kunnr            TYPE kna1-kunnr,
      w_fkart            TYPE vbrk-fkart,
*" End of BN8068-081013

*{ Begin of BN8068-081030
      w_dadic_menge     TYPE zvxxnfe_dadicnew-menge,
      w_vdadic_menge    TYPE zvxxnfe_dadicn2-menge,
      w_fdadic_menge    TYPE zfxxnfe_dadicn2-menge,
*} End of BN8068-081030

*{ Begin of BN5607-090804
      w_po_imp(13)      TYPE c,
      w_all_po_imp(130) TYPE c,
*{ End of BN5607-090804

*{ Begin of BN8068-090810
      w_lines           TYPE i,
      w_trash           TYPE char20,
      w_retorno         TYPE char20,
      w_valor           TYPE char20.
*} End of BN8068-090810

CLASS cl_exithandler DEFINITION LOAD.

DATA: gs_nfeactive TYPE        j_1bnfe_active,
      lr_badi      TYPE REF TO zif_ex_nfe.

DATA: help_cfop(6)    TYPE c,
      default_cfop(6) TYPE c,
      lv_tabix        TYPE sytabix,
      v_cfop          TYPE j_1bnflin-cfop.

CONSTANTS: c_healthcare TYPE mvgr2 VALUE '009',
           c_vick       TYPE mvgr2 VALUE '019',
           c_vkorgfrom  TYPE vkorg VALUE 'BR00',
           c_vkorgto    TYPE vkorg VALUE 'BR99',
           c_i          TYPE c     VALUE 'I',
           c_bt(2)      TYPE c     VALUE 'BT',
           c_ics3(4)    TYPE c     VALUE 'ICS3'.
*-------------------------------------------------
CONSTANTS: sold_to         LIKE tpar-parvw VALUE 'AG'  ,
           bill_to         LIKE tpar-parvw VALUE 'RE'  ,
           ship_to         LIKE tpar-parvw VALUE 'WE'  ,
           carrier         LIKE tpar-parvw VALUE 'SP'  ,
           delivery_sto    LIKE ekbe-vgabe VALUE '8'   ,
           dlnt            LIKE ekbe-bewtp VALUE 'L'   ,
           c_zant(4)                       VALUE 'ZANT',
           c_vbrk(4)                       VALUE 'VBRK',
           c_buzei         LIKE bseg-buzei VALUE '001' ,
           c_imprime                       VALUE 'X'   ,
           c_zfdb(4)                       VALUE 'ZFDB',
           c_iczf          TYPE j_1bnfstx-taxtyp VALUE `ICZF`,
           c_fob(3)        TYPE c          VALUE 'FOB',
*" Begin of BN8068-081010
           c_znli(4)       TYPE c VALUE `ZNLI`,
           c_zic(3)        TYPE c VALUE `ZIC`,
           c_br(2)         TYPE c VALUE `BR`,
*" End of BN8068-081010

*} Begin of BN8068-081028
           c_f2(02)        TYPE c VALUE 'F2',
*} End of BN8068-081028

*{ Begin of BN8068-081030
      c_type_lp        TYPE char2      VALUE 'LP',
      c_type_lj        TYPE char2      VALUE 'LJ',
      c_l7sys          TYPE sy-sysid   VALUE 'L7',
      c_gbsys          TYPE sy-sysid   VALUE 'GB',
*} End of BN8068-081030

*" Begin of BN8068-081013
*           c_f2(2)         TYPE c VALUE `F2`,
           c_zbrn(4)       TYPE c VALUE `ZBRN`,
           c_e(1)          TYPE c VALUE `E`,
           c_n(1)          TYPE c VALUE `N`,
           c_s(1)          TYPE c VALUE `S`,
           c_vn(2)         TYPE c VALUE `VN`,
           c_108(3)        TYPE c VALUE `108`,
*" End of BN8068-081013

*{ Begin of BN8068-090506
      c_reftyp_bi(2)        TYPE c VALUE 'BI',
      c_duplct_observat(19) TYPE c VALUE 'NOTA_FISCAL_FATURA',
*} End of BN8068-090506

*{ Begin of BN5607-090804
     c_nf61(4)             TYPE c VALUE 'NF61',  "BN8068-090901
*{ End of BN5607-090804

*{ Begin of BN8068-090810
      c_langu_pt            TYPE char1 VALUE 'P',
      c_noves               TYPE char8 VALUE '99999999',
      c_exterior            TYPE char8 VALUE 'EXTERIOR',
      c_land_br             TYPE char2 VALUE 'BR',
      c_sys_prod            TYPE char1 VALUE 'P',
      c_times               TYPE numc2 VALUE '18'.
*} End of BN8068-090810

RANGES: r_codmsg FOR zstxtlegal-codmsg.

********
DATA: v_duedate      TYPE bseg-zfbdt.
DATA: v_dtvencimento TYPE txt02_052.
DATA: wa_bsid        TYPE bsid.
DATA: wa_bsad        TYPE bsad.
********

* Início - Diogo 19/08/2008 Declarações pertinentes a tabela ZVXLNFEDATA
DATA: i_nfedata     TYPE TABLE OF zvxlnfedata,
      i_nfedata_aux TYPE TABLE OF zvxlnfedata,
      e_nfedata     TYPE zvxlnfedata,
      e_tline       TYPE tline.
* Fim - Diogo 19/08/2008 Declarações pertinentes a tabela ZVXLNFEDATA

INCLUDE znfe_txt_danfe.

*{ Begin of BN8068-090810
*$*$********************************************************************
*$*$    MACROS
*$*$    naming convention: "m_name"
*$*$********************************************************************
*{
*" State Tax Number Treatment
DEFINE m_ie_treatment.

  clear: w_valor,
         w_retorno.

  move &1 to w_valor.

  call function 'Z_V_NFESTRING'
    exporting
      p_valor   = w_valor
      p_times   = c_times
    changing
      c_retorno = w_retorno.

  if sy-subrc is initial.

    move w_retorno to &1.

  endif.

END-OF-DEFINITION.

DEFINE m_add_nfedata.
  add 1 to w_seqnum.

  move:
      sy-mandt         to e_nfedata-mandt,
      wk_header-docnum to e_nfedata-docnum,
      '000000'         to e_nfedata-itmnum,
      w_seqnum         to e_nfedata-seqnum,
      &1               to e_nfedata-ztexto.

  append e_nfedata to i_nfedata.

  clear e_nfedata.
END-OF-DEFINITION. "m_add_nfedata
*} End of BN8068-090810

*..... Macros
DEFINE if_lines>.
  describe table &1 lines sy-tfill.
  if sy-tfill gt 0.
  END-OF-DEFINITION.
*======================================================================*
*  PROGRAM                                                             *
*======================================================================*

*&---------------------------------------------------------------------*
*&       FORM ENTRY  (MAIN FORM)                                       *
*&---------------------------------------------------------------------*
*       Form for Message Control                                       *
*----------------------------------------------------------------------*
FORM entry USING return_code us_screen.

  CLEAR: retcode.
  xscreen = us_screen.

  DATA: v_sform TYPE tdsfname.

  SELECT SINGLE sform
         INTO v_sform
         FROM tnapr
         WHERE kschl EQ 'NF01'
           AND kappl EQ 'NF'
           AND nacha EQ '1'.

  IF sy-subrc EQ 0.
    IF NOT v_sform IS INITIAL.
      tnapr-sform = v_sform.
      CLEAR tnapr-funcname.
      CLEAR tnapr-fonam.
    ENDIF.
  ENDIF.

  IF lr_badi IS INITIAL.

    CALL METHOD cl_exithandler=>get_instance
      EXPORTING
        exit_name                     = 'ZNFE'
      CHANGING
        instance                      = lr_badi
      EXCEPTIONS
        no_reference                  = 1
        no_interface_reference        = 2
        no_exit_interface             = 3
        class_not_implement_interface = 4
        single_exit_multiply_active   = 5
        cast_error                    = 6
        exit_not_existing             = 7
        data_incons_in_exit_managem   = 8
        OTHERS                        = 9.

    IF sy-subrc <> 0.                                       "#EC NEEDED
    ENDIF.

  ENDIF.

  PERFORM smart_sub_printing.

* main -----------------------------------------------------------------

* check retcode (return code) ------------------------------------------
  IF retcode NE 0.
    return_code = 1.
  ELSE.
    return_code = 0.
  ENDIF.

ENDFORM.                               " ENTRY

*&---------------------------------------------------------------------*
*&      Form  NOTA_FISCAL_READ
*&---------------------------------------------------------------------*
*       Read the Nota Fiscal based in the key giving by Message        *
*       Control.                                                       *
*----------------------------------------------------------------------*
FORM nota_fiscal_read.

  MOVE nast-objky TO wk_docnum.

  CALL FUNCTION 'J_1B_NF_DOCUMENT_READ'
    EXPORTING
      doc_number         = wk_docnum
    IMPORTING
      doc_header         = wk_header
    TABLES
      doc_partner        = wk_partner
      doc_item           = wk_item
      doc_item_tax       = wk_item_tax
      doc_header_msg     = wk_header_msg
      doc_refer_msg      = wk_refer_msg
    EXCEPTIONS
      document_not_found = 1
      docum_lock         = 2
      OTHERS             = 3.

* check the sy-subrc ---------------------------------------------------
  PERFORM check_error.

  CALL FUNCTION 'J_1B_NF_VALUE_DETERMINATION'
    EXPORTING
      nf_header   = wk_header
    IMPORTING
      ext_header  = wk_header_add
    TABLES
      nf_item     = wk_item
      nf_item_tax = wk_item_tax
      ext_item    = wk_item_add.

ENDFORM.                               " NOTA_FISCAL_READ
*&---------------------------------------------------------------------*
*&      Form  NOTA_FISCAL_NUMBER
*&---------------------------------------------------------------------*
*       Get the next Nota Fiscal number                                *
*----------------------------------------------------------------------*
FORM nota_fiscal_number.

  CALL FUNCTION 'J_1B_NF_NUMBER_GET_NEXT'
    EXPORTING
      bukrs                         = wk_header-bukrs
      branch                        = wk_header-branch
      form                          = wk_header-form
      headerdata                    = wk_header
    IMPORTING
      nf_number                     = wk_header-nfnum
    EXCEPTIONS
      print_number_not_found        = 1
      interval_not_found            = 2
      number_range_not_internal     = 3
      object_not_found              = 4
      other_problems_with_numbering = 5
      OTHERS                        = 6.

  PERFORM check_error.

ENDFORM.                               " NOTA_FISCAL_NUMBER

*&---------------------------------------------------------------------*
*&      Form  NOTA_FISCAL_UPDATE
*&---------------------------------------------------------------------*
*       Update NF date and number                                      *
*----------------------------------------------------------------------*
FORM nota_fiscal_update.

  wk_header-printd = 'X'.

  UPDATE j_1bnfdoc SET printd = wk_header-printd
                       follow = wk_header-follow
                 WHERE docnum = wk_header-docnum.

  IF sy-subrc <> 0.
    retcode = sy-subrc.
    syst-msgid = '8B'.
    syst-msgno = '107'.
    syst-msgty = 'E'.
    syst-msgv1 = wk_header-docnum.
    PERFORM protocol_update.
  ENDIF.

ENDFORM.                               " NOTA_FISCAL_UPDATE
*&---------------------------------------------------------------------*
*&      Form  CHECK_ERROR
*&---------------------------------------------------------------------*
*       Check return code                                              *
*----------------------------------------------------------------------*
FORM check_error.

  IF sy-subrc <> 0.
    retcode = sy-subrc.
    PERFORM protocol_update.
  ENDIF.

ENDFORM.                               " CHECK_ERROR
*&---------------------------------------------------------------------*
*&      Form  PROTOCOL_UPDATE
*&---------------------------------------------------------------------*
*       The messages are collected for the processing protocol.        *
*----------------------------------------------------------------------*
FORM protocol_update.

  CHECK xscreen = space.
  CALL FUNCTION 'NAST_PROTOCOL_UPDATE'
    EXPORTING
      msg_arbgb = syst-msgid
      msg_nr    = syst-msgno
      msg_ty    = syst-msgty
      msg_v1    = syst-msgv1
      msg_v2    = syst-msgv2
      msg_v3    = syst-msgv3
      msg_v4    = syst-msgv4
    EXCEPTIONS
      OTHERS    = 1.

ENDFORM.                               " PROTOCOL_UPDATE
*&---------------------------------------------------------------------*
*&      Form  FINANCIAL_DOC_UPDATE
*&---------------------------------------------------------------------*
*       Update the sales document and Financial document with the      *
*       Nota Fiscal number and the Nota Fiscal with the financial      *
*       document                                                       *
*----------------------------------------------------------------------*
FORM financial_doc_update.

  SORT wk_item.
  READ TABLE wk_item INDEX 1.

  CALL FUNCTION 'J_1B_NF_NUMBER_CONDENSE'
    EXPORTING
      nf_number  = wk_header-nfnum
      series     = wk_header-series
      subseries  = wk_header-subser
      nf_number9 = wk_header-nfenum
    IMPORTING
      ref_number = wk_xblnr
    EXCEPTIONS
      OTHERS     = 1.

* get the type of the document and update the documents ----------------
  CASE wk_item-reftyp.

    WHEN 'BI'.
      MOVE wk_item-refkey TO key_vbrk.
      PERFORM read_bi_document.
      CLEAR bkpf.
      IF NOT vbrk IS INITIAL.          " if find VBRK (Billing document)
        PERFORM get_fi_number.
      ENDIF.
      IF bkpf-belnr IS INITIAL.        " there is not FI document
        IF NOT vbrk IS INITIAL.        " if find VBRK (Billing document)
          PERFORM update_bi_document.
        ENDIF.
      ELSE.                            " there is FI document
        PERFORM update_bi_document.
        IF  subrc_upd_bi IS INITIAL.   " update in billing ok.
          PERFORM update_fi_nf_document
                    USING bkpf-bukrs bkpf-belnr bkpf-gjahr.
          PERFORM update_bsid_nf_document
                  USING bkpf-bukrs bkpf-belnr bkpf-gjahr.
        ENDIF.
      ENDIF.

    WHEN OTHERS.  " for MD or <space> that means writer.
      wk_header-follow = 'X'.

  ENDCASE.

ENDFORM.                               " FINANCIAL_DOC_UPDATE

*&---------------------------------------------------------------------*
*&      Form  READ_BI_DOCUMENT
*&---------------------------------------------------------------------*
*       This form read the billing document                            *
*----------------------------------------------------------------------*
FORM read_bi_document.

  SELECT SINGLE * FROM  vbrk
         WHERE  vbeln       = key_vbrk-vbeln.

  IF sy-subrc <> 0.
    CLEAR vbrk.
  ENDIF.

ENDFORM.                               " READ_BI_DOCUMENT

*&---------------------------------------------------------------------*
*&      Form  READ_FI_DOCUMENT
*&---------------------------------------------------------------------*
*       read the fi_document                                           *
*----------------------------------------------------------------------*
FORM read_fi_document USING xbukrs xbelnr xgjahr.

  SELECT SINGLE * FROM  bkpf
         WHERE  bukrs       = xbukrs
         AND    belnr       = xbelnr
         AND    gjahr       = xgjahr.

  IF sy-subrc <> 0.
    CLEAR bkpf.
  ENDIF.

ENDFORM.                               " READ_FI_DOCUMENT

*&---------------------------------------------------------------------*
*&      Form  UPDATE_BI_DOCUMENT
*&---------------------------------------------------------------------*
*       Update billing document                                        *
*----------------------------------------------------------------------*
FORM update_bi_document.

  IF bi_subrc = 0.                     " billing not lock

    UPDATE vbrk SET xblnr = wk_xblnr
                WHERE  vbeln = key_vbrk-vbeln.

    PERFORM check_error.

    subrc_upd_bi = sy-subrc.

    CALL FUNCTION 'DEQUEUE_EVVBRKE'
      EXPORTING
        mandt  = sy-mandt
        vbeln  = key_vbrk-vbeln
      EXCEPTIONS
        OTHERS = 1.

  ELSE.                                " billing lock

    subrc_upd_bi = sy-subrc.

  ENDIF.

ENDFORM.                               " UPDATE_BI_DOCUMENT

*&---------------------------------------------------------------------*
*&      Form  UPDATE_FI_NF_DOCUMENT
*&---------------------------------------------------------------------*
*       Update financial and nota fiscal document                      *
*----------------------------------------------------------------------*
FORM update_fi_nf_document USING xbukrs xbelnr xgjahr.

  IF fi_subrc = 0.                     " billing not lock

    UPDATE bkpf SET xblnr = wk_xblnr
                WHERE  bukrs       = xbukrs
                AND    belnr       = xbelnr
                AND    gjahr       = xgjahr.

    PERFORM check_error.

    wk_header-follow = 'X'.

  ENDIF.

ENDFORM.                               " UPDATE_FI_NF_DOCUMENT

*&---------------------------------------------------------------------*
*&      Form  GET_FI_NUMBER
*&---------------------------------------------------------------------*
*       Read financial document via Billing document number            *
*----------------------------------------------------------------------*
FORM get_fi_number.

  SELECT SINGLE * FROM  bkpf
         WHERE  bukrs = vbrk-bukrs
         AND    awtyp = 'VBRK'
         AND    awkey = key_vbrk-vbeln.

  IF sy-subrc <> 0.
    CLEAR bkpf.
  ENDIF.

ENDFORM.                               " GET_FI_NUMBER


*&---------------------------------------------------------------------*
*&      Form  UPDATE_BSID_NF_DOCUMENT
*&---------------------------------------------------------------------*
*  update table BSID with external Nota Fiscal number - KI3K050466
*  change 23.01.97
*  Change 28.06.2000:
*  update also BSIS if G/L account with line item display exists
*  Change 09.08.2000: if cust account already cleared
*    (e.g. credit card sales) update BSAD instead of BSID
*----------------------------------------------------------------------*
FORM update_bsid_nf_document USING xbukrs xbelnr xgjahr.

  SELECT * FROM bseg WHERE bukrs = xbukrs
                       AND belnr = xbelnr
                       AND gjahr = xgjahr
                       AND ( koart = 'D' OR koart = 'S' ).
    IF sy-subrc = '0'.
      IF bseg-koart = 'D'.
        IF NOT bseg-augbl IS INITIAL.  " account cleared --> update BSAD
          UPDATE bsad SET xblnr = wk_xblnr
                    WHERE bukrs = bseg-bukrs
                      AND kunnr = bseg-kunnr
                      AND umsks = bseg-umsks
                      AND umskz = bseg-umskz
                      AND augdt = bseg-augdt
                      AND augbl = bseg-augbl
                      AND zuonr = bseg-zuonr
                      AND gjahr = bseg-gjahr
                      AND belnr = bseg-belnr
                      AND buzei = bseg-buzei.

        ELSE.   " open item --> update BSID
* Customer account --> update BSID
          UPDATE bsid SET xblnr = wk_xblnr
                    WHERE bukrs = bseg-bukrs
                      AND kunnr = bseg-kunnr
                      AND umsks = bseg-umsks
                      AND umskz = bseg-umskz
                      AND augdt = bseg-augdt
                      AND augbl = bseg-augbl
                      AND zuonr = bseg-zuonr
                      AND gjahr = bseg-gjahr
                      AND belnr = bseg-belnr
                      AND buzei = bseg-buzei.
          IF sy-subrc EQ 0.
            CALL FUNCTION 'OPEN_FI_PERFORM_00005010_P'
              EXPORTING
                i_chgtype     = 'U'
                i_origin      = 'J_1BNFPR UPDATE_BSID_NF_DOCUMENT'
                i_tabname     = 'BSID'
                i_where_bukrs = bseg-bukrs
                i_where_kunnr = bseg-kunnr
                i_where_umsks = bseg-umsks
                i_where_umskz = bseg-umskz
                i_where_augdt = bseg-augdt
                i_where_augbl = bseg-augbl
                i_where_zuonr = bseg-zuonr
                i_where_gjahr = bseg-gjahr
                i_where_belnr = bseg-belnr
                i_where_buzei = bseg-buzei
              EXCEPTIONS
                OTHERS        = 1.
            IF sy-subrc NE 0.
              MESSAGE ID sy-msgid TYPE 'A' NUMBER sy-msgno
                      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
            ENDIF.
          ELSE.
            PERFORM check_error.                            " 793934
          ENDIF. " BSID update ok
        ENDIF. " Clearing status: BSID or BSAD
      ENDIF.  " Debitor Accounts, Note 793934

* Always try to udate BSIS, regardless of account type (Note 793934)

*  G/L account --> try to update BSIS
      UPDATE bsis SET xblnr = wk_xblnr
                WHERE bukrs = bseg-bukrs
                  AND gjahr = bseg-gjahr
                  AND belnr = bseg-belnr
                  AND buzei = bseg-buzei.
* Update only possible for G/L accounts with line item display
*   --> Print NF even for update failure in bsis
      CLEAR sy-subrc.
    ENDIF. " Reading BSEG
  ENDSELECT.

* perform unlocking of the fi document only after the update of BSID,
* because this table must also be locked during update - the following
* call function was before in the form update_fi_nf_document.

  CALL FUNCTION 'DEQUEUE_EFBKPF'
    EXPORTING
      bukrs  = xbukrs
      belnr  = xbelnr
      gjahr  = xgjahr
    EXCEPTIONS
      OTHERS = 1.

ENDFORM.                               " UPDATE_BSID_NF_DOCUMENT

*---------------------------------------------------------------------*
*       FORM ENQUEUE_BI_FI                                            *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM enqueue_bi_fi.

  CLEAR bi_subrc.

* sort the wk_item to get the first item
  SORT wk_item.
  READ TABLE wk_item INDEX 1.

  CHECK wk_item-reftyp = 'BI'.
  MOVE wk_item-refkey TO key_vbrk.

  PERFORM read_bi_document.

  IF NOT vbrk IS INITIAL.              "call via SD
    CALL FUNCTION 'ENQUEUE_EVVBRKE'
      EXPORTING
        mandt          = sy-mandt
        vbeln          = key_vbrk-vbeln
      EXCEPTIONS
        foreign_lock   = 1
        system_failure = 2
        OTHERS         = 3.

    bi_subrc = sy-subrc.
    PERFORM check_error.
    IF bi_subrc = 0.                   "BI document not locked
      CLEAR bkpf.
      PERFORM get_fi_number.
      IF NOT bkpf-belnr IS INITIAL.
        CALL FUNCTION 'ENQUEUE_EFBKPF'
          EXPORTING
            bukrs          = bkpf-bukrs
            belnr          = bkpf-belnr
            gjahr          = bkpf-gjahr
          EXCEPTIONS
            foreign_lock   = 1
            system_failure = 2
            OTHERS         = 3.

        fi_subrc = sy-subrc.
        PERFORM check_error.
        IF fi_subrc <> 0.     "FI lock not successful -> release BI lock
          CALL FUNCTION 'DEQUEUE_EVVBRKE'
            EXPORTING
              mandt  = sy-mandt
              vbeln  = key_vbrk-vbeln
            EXCEPTIONS
              OTHERS = 1.
          PERFORM check_error.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.                               " ENQUEUE_BI_FI
*&---------------------------------------------------------------------*
*&      Form  check_nf_canceled
*&---------------------------------------------------------------------*
*       allow print of NF only when NF is not canceled
*----------------------------------------------------------------------*
FORM check_nf_canceled.
  DATA: lv_dummy  TYPE c.

  IF NOT wk_header-cancel IS INITIAL AND wk_header-nfnum IS INITIAL.
    sy-subrc = 1.
    MESSAGE ID '8B'
            TYPE 'E'
            NUMBER '678'
            WITH wk_header-docnum
            INTO lv_dummy.

    PERFORM check_error.
    IF sy-batch IS INITIAL.                " corr. of note 442570
      MESSAGE e678 WITH wk_header-docnum.
    ENDIF.                                 " corr. of note 442570
  ENDIF.
ENDFORM.                    " check_nf_canceled
*&---------------------------------------------------------------------*
*&      Form  check_nfe_authorized
*&---------------------------------------------------------------------*
FORM check_nfe_authorized.
  DATA: lv_dummy  TYPE c,
        lv_subrc  TYPE sy-subrc,
        obj_ref   TYPE REF TO if_ex_cl_nfe_print.

  CLEAR gs_nfeactive.

* only NFes
  CHECK wk_header-nfe = 'X'.

  SELECT SINGLE * FROM j_1bnfe_active INTO gs_nfeactive
  WHERE docnum = wk_header-docnum.

  IF NOT sy-subrc IS INITIAL.
    MESSAGE e012 WITH wk_header-docnum.
  ENDIF.

  IF gs_nfeactive-code IS INITIAL.

    COMMIT WORK AND WAIT.
    WAIT UP TO 3 SECONDS.

    SELECT SINGLE * FROM j_1bnfe_active INTO gs_nfeactive
    WHERE docnum = wk_header-docnum.

    IF NOT sy-subrc IS INITIAL.
      MESSAGE e012 WITH wk_header-docnum.
    ENDIF.

  ENDIF.

  j_1bnfe_active = gs_nfeactive.

* don't print NF-e when ...
* ... rejected docsta = 2
* ... denied   docsta = 3
* ... switches manual to contingency
  IF gs_nfeactive-conting_s = 'X'
  OR gs_nfeactive-docsta    = '2'
  OR gs_nfeactive-docsta    = '3'.

    lv_subrc = 1.

  ELSE.

*-- don´t print not authorized NFes

    IF  wk_header-authcod IS INITIAL    "Nfe is not authorized
    AND wk_header-conting IS INITIAL.   "and not in contingency
      lv_subrc = 1.
    ENDIF.
  ENDIF.

*-- BADI for reset subrc
*-- When subrc is 0 NFes can be printed without aauthorization code

  IF obj_ref IS INITIAL.

    CALL METHOD cl_exithandler=>get_instance       " #EC CI_BADI_GETINST
      EXPORTING
        exit_name                     = 'CL_NFE_PRINT'
        null_instance_accepted        = seex_false
      CHANGING
        instance                      = obj_ref
      EXCEPTIONS
        no_reference                  = 1
        no_interface_reference        = 2
        no_exit_interface             = 3
        class_not_implement_interface = 4
        single_exit_multiply_active   = 5
        cast_error                    = 6
        exit_not_existing             = 7
        data_incons_in_exit_managem   = 8
        OTHERS                        = 9.

    IF sy-subrc IS INITIAL.
*- nothing to do
    ENDIF.

  ENDIF.

  IF obj_ref IS BOUND.
    CALL METHOD obj_ref->reset_subrc
      EXPORTING
        is_nfdoc = wk_header
      CHANGING
        ch_subrc = lv_subrc.
  ENDIF.

  sy-subrc = lv_subrc.

  IF sy-subrc IS NOT INITIAL.
    IF gs_nfeactive-conting_s = 'X'.
      MESSAGE ID 'J1B_NFE'
              TYPE 'E'
              NUMBER '040'
              WITH wk_header-docnum
              INTO lv_dummy.
    ELSE.
      MESSAGE ID 'J1B_NFE'
              TYPE 'E'
              NUMBER '039'
              WITH wk_header-docnum
              INTO lv_dummy.
    ENDIF.
    IF sy-batch IS INITIAL.
      PERFORM check_error.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ELSE.
    gs_nfeactive-printd = 'X'.
  ENDIF.

ENDFORM.                    " check_nfe_authorized
*&---------------------------------------------------------------------*
*&      Form  active_update
*&---------------------------------------------------------------------*
FORM active_update .

*{ Begin of BN8068 - 28082008
  UPDATE j_1bnfe_active FROM gs_nfeactive.

  IF sy-subrc <> 0.

    MESSAGE a021(j1b_nfe) WITH gs_nfeactive-docnum.

  ENDIF.
*} End of BN8068 - 28082008

ENDFORM.                    " active_update
*&--------------------------------------------------------------------*
*&      Form  smart_sub_printing
*&--------------------------------------------------------------------*
*       text
*---------------------------------------------------------------------*
FORM smart_sub_printing.

  DATA:   tax_types LIKE j_1baj OCCURS 30 WITH HEADER LINE.

  CALL FUNCTION 'SSF_FUNCTION_MODULE_NAME'
    EXPORTING
      formname           = tnapr-sform
    IMPORTING
      fm_name            = fm_name
    EXCEPTIONS
      no_form            = 1
      no_function_module = 2.

  IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  REFRESH: my_items.

* read the Nota Fiscal
  PERFORM nota_fiscal_read.            " read nota fiscal

* allow print of NF only when NF is not canceled
  PERFORM check_nf_canceled.   " check nota fiscal canceled,442570

* number and update the Nota Fiscal
  CHECK retcode IS INITIAL.

* The NFe to be printed must have an authorization code
  IF wk_header-nfe = 'X'.

*   The NFe to be printed must have an authorization code
    PERFORM check_nfe_authorized.
    CHECK retcode IS INITIAL.

  ENDIF.
* for NFe the DANFE is printed. Numbering has already taken place
* before sending teh XML document to SEFAZ.
* Billing document is updated for NFe with the 9 digit NFe number
  IF wk_header-entrad = 'X' OR  "update only entradas or outgoing NF
     wk_header-direct  = '2'.
    IF wk_header-printd IS INITIAL AND " not printed.
       wk_header-nfnum IS INITIAL  AND " without NF number
       nast-nacha = '1'.               " sent to printer

      PERFORM enqueue_bi_fi.
      CHECK retcode IS INITIAL.
* get NF number only for "normal NFs" NFe has already the number
      IF wk_header-nfe IS INITIAL.
        PERFORM nota_fiscal_number.      " get the next number
      ENDIF.

      IF retcode IS INITIAL.
        PERFORM financial_doc_update.    " update in database
        PERFORM nota_fiscal_update.      " update in database
        IF NOT gs_nfeactive IS INITIAL.
          PERFORM active_update ON COMMIT.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

  IF retcode IS INITIAL.
  ELSE.
    MESSAGE a114 WITH '01' 'J_1BNFNUMB'.
  ENDIF.

*----------------------------------------------------------------------*
*    read tax types into internal buffer table                         *
*----------------------------------------------------------------------*
  SELECT * FROM j_1baj INTO TABLE tax_types ORDER BY PRIMARY KEY.

  CLEAR  w_danfe.
  CLEAR: w_danfe-issuer,
         w_danfe-destination,
         w_danfe-carrier,
         w_danfe-nota_fiscal,
         w_danfe-others,
         w_danfe-nfe,
         w_danfe-observ1,
         w_danfe-observ2,
         w_danfe-item,
         w_danfe-invoice.

* Begin BP7435-081218
  PERFORM f_check_traid USING wk_header.
* End of BP7435-081218

*----------------------------------------------------------------------*
*    fill header data into communication structure                     *
*----------------------------------------------------------------------*
  MOVE-CORRESPONDING wk_header TO w_danfe-nota_fiscal.


* Início - Diogo A Oliveira - 14/08/2008

* Fill Gross and Net Weight from Import Interface - Totals
  IF wk_header-nftype EQ 'LP'.

    DATA: w_peso_bruto TYPE zvxxnfe_totalnew-peso_bruto,
          w_peso_liq   TYPE zvxxnfe_totalnew-peso_liq.

    CLEAR: w_peso_bruto, w_peso_liq.

    SELECT peso_bruto peso_liq
      UP TO 1 ROWS
      FROM zvxxnfe_totalnew
      INTO (w_peso_bruto , w_peso_liq )
      WHERE
*{ Begin of BN8068-090109
            dinum  EQ wk_header-observat AND
*} End of BN8068-090109
            nfnum  EQ wk_header-nfenum   AND
            series EQ wk_header-series.
    ENDSELECT.

    IF w_peso_bruto IS NOT INITIAL OR
       w_peso_liq IS NOT INITIAL.

      SHIFT w_peso_bruto LEFT DELETING LEADING '0'.
      SHIFT w_peso_liq LEFT DELETING LEADING '0'.

      w_danfe-nota_fiscal-brgew = w_peso_bruto / 1000.
      w_danfe-nota_fiscal-ntgew = w_peso_liq / 1000.

    ENDIF.

*{ Begin of BN8068-081030
    CLEAR w_dadic_menge.

*{ Begin of BN8068-090413
*    SELECT menge
*      UP TO 1 ROWS
*      FROM zvxxnfe_dadicnew
*      INTO w_dadic_menge
*      WHERE
**{ Begin of BN8068-090109
*            dinum  EQ wk_header-observat AND
**} End of BN8068-090109
*            nfnum  EQ wk_header-nfenum   AND
*            series EQ wk_header-series.
*    ENDSELECT.

*" Importation Interface - aditional data
    SELECT menge
           marca
           numero
        UP TO 1 ROWS
      FROM zvxxnfe_dadicnew
      INTO (w_dadic_menge, w_danfe-nota_fiscal-shpmrk(15) , w_danfe-nota_fiscal-shpnum(15) )
     WHERE dinum  EQ wk_header-observat
       AND nfnum  EQ wk_header-nfenum
       AND series EQ wk_header-series.

    ENDSELECT.
*} End of BN8068-090413

    IF sy-subrc IS INITIAL.

      SHIFT w_dadic_menge LEFT DELETING LEADING '0'.

      MOVE w_dadic_menge TO w_danfe-nota_fiscal-anzpk.

    ENDIF.


  ELSEIF wk_header-nftype EQ c_type_lj.

    IF sy-sysid(2) EQ c_l7sys.

      CLEAR w_vdadic_menge.

*{ Begin of BN8068-090413
*      SELECT menge
*        UP TO 1 ROWS
*        FROM zvxxnfe_dadicn2
*        INTO w_vdadic_menge
*        WHERE
**{ Begin of BN8068-090109
*              dinum  EQ wk_header-observat AND
**} End of BN8068-090109
*              nfnum  EQ wk_header-nfenum   AND
*              series EQ wk_header-series.
*      ENDSELECT.

*" Importation Interface - aditional data
      SELECT menge
             marca
             numero
          UP TO 1 ROWS
        FROM zvxxnfe_dadicn2
        INTO (w_vdadic_menge, w_danfe-nota_fiscal-shpmrk(15) , w_danfe-nota_fiscal-shpnum(15) )
       WHERE dinum  EQ wk_header-observat
         AND nfnum  EQ wk_header-nfenum
         AND series EQ wk_header-series.

      ENDSELECT.
*} End of BN8068-090413

      IF sy-subrc IS INITIAL.

        SHIFT w_vdadic_menge LEFT DELETING LEADING '0'.

        MOVE w_vdadic_menge TO w_danfe-nota_fiscal-anzpk.

      ENDIF.

    ELSEIF sy-sysid(2) EQ c_gbsys.

      CLEAR w_fdadic_menge.

*{ Begin of BN8068-090413
*      SELECT menge
*        UP TO 1 ROWS
*        FROM zfxxnfe_dadicn2
*        INTO w_fdadic_menge
*        WHERE
**{ Begin of BN8068-090109
*              dinum  EQ wk_header-observat AND
**} End of BN8068-090109
*              nfnum  EQ wk_header-nfenum AND
*              series EQ wk_header-series.
*      ENDSELECT.

*" Importation Interface - aditional data
      SELECT menge
             marca
             numero
          UP TO 1 ROWS
        FROM zfxxnfe_dadicn2
        INTO (w_fdadic_menge, w_danfe-nota_fiscal-shpmrk(15) , w_danfe-nota_fiscal-shpnum(15) )
       WHERE dinum  EQ wk_header-observat
         AND nfnum  EQ wk_header-nfenum
         AND series EQ wk_header-series.

      ENDSELECT.
*} End of BN8068-090413

      IF sy-subrc IS INITIAL.

        SHIFT w_vdadic_menge LEFT DELETING LEADING '0'.

        MOVE w_fdadic_menge TO w_danfe-nota_fiscal-anzpk.

      ENDIF.

    ENDIF.
*} End of BN8068-081030

  ENDIF.
* Fim - Diogo A Oliveira - 14/08/2008



*" Begin of BN8068-081010

  CLEAR: w_land1,
         w_vgbel,
         w_btgew.

  SELECT SINGLE land1
    FROM kna1
    INTO w_land1
   WHERE kunnr EQ wk_header-parid.

  IF sy-subrc IS INITIAL AND
     w_land1 NE c_br.

    READ TABLE wk_item INDEX 1.
    IF sy-subrc IS INITIAL.

      SELECT vgbel
        FROM vbrp
        INTO w_vgbel
        UP TO 1 ROWS
       WHERE vbeln EQ wk_item-refkey.
      ENDSELECT.

      IF sy-subrc IS INITIAL.

        SELECT btgew
          FROM likp
          INTO w_btgew
          UP TO 1 ROWS
         WHERE vbeln EQ w_vgbel
*{ Begin of BN8068-081028
*           AND fkarv EQ c_zic.
           AND fkarv IN (c_zic, c_f2 ).
*} End of BN8068-081028

        ENDSELECT.

        IF sy-subrc IS INITIAL AND
           w_btgew IS NOT INITIAL.

          w_danfe-nota_fiscal-brgew = w_btgew.

        ENDIF.

      ENDIF.

    ENDIF.

  ENDIF.

*" End of BN8068-081010

  SELECT SINGLE *
         FROM j_1bnfe_active
         INTO w_danfe-nfe
         WHERE docnum EQ wk_header-docnum.

*---> determine CFOP length, extension and deafulttext from version
*---> table
  PERFORM get_cfop_length_smart  USING wk_header-bukrs
                                 wk_header-branch
                                 wk_header-pstdat
                        CHANGING cfop_version     " BOI note 593218
                                 cfop_length
                                 extension_length
                                 defaulttext
                                 issuer_region.

  MOVE cfop_length TO w_danfe-nota_fiscal-cfop_len.

*... fill header CFOP .................................................*
*{ Begin of BN8068-090810
  CLEAR:
        w_lines,
        w_trash,
        w_retorno,
        w_valor.

*{ Begin of BN8068-090901
  TYPES: BEGIN OF y_item_cfop,
          cfop TYPE j_1bnflin-cfop,
         END OF y_item_cfop,

         BEGIN OF y_cfotxt,
          cfop   TYPE j_1bagnt-cfop,
          cfotxt TYPE j_1bagnt-cfotxt,
         END OF y_cfotxt.

  DATA: t_item   TYPE STANDARD TABLE OF y_item_cfop,
        t_cfotxt TYPE STANDARD TABLE OF y_cfotxt.

  FIELD-SYMBOLS: <fs_item>   TYPE j_1bnflin,
                 <fs_cfotxt> TYPE y_cfotxt.

  FREE: t_item,
        t_cfotxt.

*" Get all itens CFOP
  UNASSIGN <fs_item>.

  LOOP AT wk_item ASSIGNING <fs_item>.

    APPEND <fs_item>-cfop TO t_item.

  ENDLOOP.

  DELETE ADJACENT DUPLICATES FROM t_item COMPARING cfop.

  IF t_item[] IS NOT INITIAL.

*" Get all cfop description
    SELECT cfop cfotxt
      FROM j_1bagnt
      INTO TABLE t_cfotxt
       FOR ALL ENTRIES IN t_item
     WHERE spras   EQ c_langu_pt
       AND version EQ cfop_version
       AND cfop    EQ t_item-cfop.

    IF sy-subrc IS INITIAL.

      DESCRIBE TABLE t_cfotxt LINES w_lines.

      UNASSIGN <fs_cfotxt>.

      LOOP AT t_cfotxt ASSIGNING <fs_cfotxt>.

        MOVE: <fs_cfotxt>-cfop   TO e_cfop-key,
              <fs_cfotxt>-cfotxt TO e_cfop-text.

*" CFOP Description treatment
        IF w_lines EQ 1.

          APPEND e_cfop TO t_cfop.

        ELSE.

          SPLIT e_cfop-text AT space INTO e_cfop-text w_trash.

          APPEND e_cfop TO t_cfop.

        ENDIF.

      ENDLOOP.

    ENDIF.

  ENDIF.

  FREE: t_item,
        t_cfotxt.

*  DESCRIBE TABLE wk_item LINES w_lines.
*
**End of BN8068-090810
*
*  LOOP AT wk_item.
*
**{ Begin of BN8068-090810
**    SELECT SINGLE * FROM j_1bagnt   WHERE spras   = sy-langu
**                                      AND version = cfop_version
**                                      AND cfop    = wk_item-cfop.
**" Old command
*    SELECT SINGLE *
*      FROM j_1bagnt
*     WHERE spras   EQ c_langu_pt
*       AND version EQ cfop_version
*       AND cfop    EQ wk_item-cfop.
*
*    IF sy-subrc IS INITIAL.
*
**} End of BN8068-090810
*
*      e_cfop-key  = wk_item-cfop.
*      e_cfop-text = j_1bagnt-cfotxt.
*
**{ Begin of BN8068-090810
**" CFOP Description treatment
*      IF w_lines EQ 1.
*
*        APPEND e_cfop TO t_cfop.
*
*      ELSE.
*
*        SPLIT e_cfop-text AT space INTO e_cfop-text w_trash.
*
*        APPEND e_cfop TO t_cfop.
*
*      ENDIF.
*
*    ENDIF.
**} End of BN8068-090810
*
*    CLEAR: j_1bagnt, e_cfop.
*  ENDLOOP.

*} End of BN8068-090901

* Verfificar se está em contigência
  IF wk_header-conting EQ 'X'.

*{ Begin of BN8068-090810
*" Delete identical CFOP codes
*   SORT t_cfop BY key.
    SORT t_cfop BY text.
*   DELETE ADJACENT DUPLICATES FROM t_cfop COMPARING key
    DELETE ADJACENT DUPLICATES FROM t_cfop COMPARING text.

    SORT t_cfop BY key.
*} End of BN8068-090810

** Primeiro CFOP
    READ TABLE t_cfop INTO e_cfop INDEX 1.
    IF sy-subrc EQ 0.
      CONCATENATE w_danfe-nota_fiscal-cfop_text e_cfop-text INTO w_danfe-nota_fiscal-cfop_text.
    ENDIF.

** Segundo CFOP
    READ TABLE t_cfop INTO e_cfop INDEX 2.
    IF sy-subrc EQ 0.
      CONCATENATE w_danfe-nota_fiscal-cfop_text ' / ' e_cfop-text
             INTO w_danfe-nota_fiscal-cfop_text
             SEPARATED BY space.
    ENDIF.

** Terceiro CFOP
    READ TABLE t_cfop INTO e_cfop INDEX 3.
    IF sy-subrc EQ 0.
      CONCATENATE w_danfe-nota_fiscal-cfop_text ' / ' e_cfop-text
             INTO w_danfe-nota_fiscal-cfop_text
             SEPARATED BY space.
    ENDIF.

*" Início Diogo - 21/08/2008
    CLEAR e_nfedata.

    MOVE:
        sy-mandt         TO e_nfedata-mandt,
        wk_header-docnum TO e_nfedata-docnum,
        '000000'         TO e_nfedata-itmnum,
        '00'             TO e_nfedata-seqnum,
        w_danfe-nota_fiscal-cfop_text TO e_nfedata-ztexto.

    CLEAR w_docnum.

    SELECT SINGLE docnum
      FROM zvxlnfedata
      INTO w_docnum
     WHERE docnum EQ wk_header-docnum.

    IF sy-subrc IS NOT INITIAL.

* Atualizar/Criar tabela Dados de impressão XML e DANFE
      INSERT into zvxlnfedata values e_nfedata.
      CLEAR e_nfedata.

    ENDIF.
*" Fim Diogo - 21/08/2008


  ELSE.

    DATA w_cfop_text TYPE zvxlnfedata-ztexto.

* Buscar o texto da Natureza da Operação (CFOP)
    CLEAR w_cfop_text.
    SELECT SINGLE ztexto
      FROM zvxlnfedata
      INTO w_cfop_text
      WHERE docnum EQ wk_header-docnum AND
            itmnum EQ '000000'         AND
            seqnum EQ '00'.

    IF sy-subrc IS INITIAL.
      w_danfe-nota_fiscal-cfop_text = w_cfop_text.
    ENDIF.

    FREE w_cfop_text.

  ENDIF.

*  LOOP AT wk_item.
*    CONCATENATE wk_item-cfop(3) '0' wk_item-cfop+4(2) INTO v_cfop.
*    wk_item-cfop = v_cfop.
*    WRITE wk_item-cfop  TO help_cfop.
*    help_cfop = help_cfop(cfop_length).
*    CASE extension_length.
*      WHEN 1.
*        IF ( wk_item-cfop+1(3) = '991' OR wk_item-cfop+1(3) = '999' )
*                                             AND issuer_region = 'SP'.
*          CONCATENATE help_cfop '.' wk_item-cfop+3(1) INTO help_cfop.
*        ENDIF.
*      WHEN 2.
*        IF wk_item-cfop+1(2) = '99' AND issuer_region = 'SC'.
*          CONCATENATE help_cfop '.' wk_item-cfop+3(2) INTO help_cfop.
*        ENDIF.
*    ENDCASE.
*
*    READ TABLE wk_cfop WITH KEY key = help_cfop.
*    lv_tabix = sy-tabix.
*    IF sy-subrc <> 0.  " new CFOP on this NF: append this CFOP to list
*      wk_cfop-char6  =  wk_item-cfop.
*      wk_cfop-key    =  help_cfop.
*
*      SELECT SINGLE * FROM j_1bagnt   WHERE spras   = sy-langu
*                                        AND version = cfop_version
*                                        AND cfop    = wk_item-cfop.
*      IF sy-subrc = 0.
*        wk_cfop-text = j_1bagnt-cfotxt.
*        APPEND wk_cfop.
*      ELSE.
*        encoded_cfop = wk_item-cfop.
*        IF encoded_cfop(1) CA                    " BOI note 593218-470
*      'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ[-<>=!?]'.
*          WRITE wk_item-cfop  TO encoded_cfop.
*          REPLACE '/' IN encoded_cfop WITH ' '.
*          CONDENSE encoded_cfop NO-GAPS.
*        ELSE.
*          PERFORM encoding_cfop_smart CHANGING encoded_cfop.
*        ENDIF.                                   " EOI note 593218-470
**PERFORM ENCODING_CFOP_SMART CHANGING ENCODED_CFOP." note 593218-470
*        SELECT SINGLE * FROM j_1bagnt WHERE spras = nast-spras
*                                          AND version = cfop_version
*                                          AND cfop    = encoded_cfop.
*        IF sy-subrc = 0.
*          wk_cfop-text = j_1bagnt-cfotxt.
*          APPEND wk_cfop.
*        ENDIF.
*      ENDIF.
*    ELSE. " CFOP already on list; however, could be rel. to other text
*      IF wk_cfop-char6 <> wk_item-cfop AND
*                                  wk_cfop-dupl_text_indic IS INITIAL.
*        default_cfop      = wk_item-cfop.
*        default_cfop+4(2) = defaulttext.
*        SELECT SINGLE * FROM j_1bagnt WHERE spras   = nast-spras
*                                        AND version = cfop_version
*                                        AND cfop    = default_cfop.
*        IF sy-subrc = 0.
*          wk_cfop-text = j_1bagnt-cfotxt.
*          wk_cfop-dupl_text_indic = 'X'.
*          MODIFY wk_cfop INDEX lv_tabix.
*        ELSE.
*          encoded_cfop = default_cfop.
*          PERFORM encoding_cfop_smart CHANGING encoded_cfop.
*          SELECT SINGLE * FROM j_1bagnt WHERE spras = nast-spras
*                                          AND version = cfop_version
*                                          AND cfop    = encoded_cfop.
*          IF sy-subrc = 0.
*            wk_cfop-text = j_1bagnt-cfotxt.
*            wk_cfop-dupl_text_indic = 'X'.
*            MODIFY wk_cfop INDEX lv_tabix.
*          ENDIF.
*        ENDIF.
*      ENDIF.
*    ENDIF.
*  ENDLOOP.
*
*  DESCRIBE TABLE wk_cfop LINES cfop_lines.
*  IF cfop_lines > 1.
*    SORT wk_cfop.
*    DELETE ADJACENT DUPLICATES FROM wk_cfop COMPARING key.
*    LOOP AT wk_cfop.
*      CONCATENATE w_danfe-nota_fiscal-cfop_text
*                  '/'
*                  wk_cfop-key wk_cfop-text
*                  INTO w_danfe-nota_fiscal-cfop_text.
*      IF w_danfe-nota_fiscal-cfop_text(1) EQ '/'.
*        SHIFT w_danfe-nota_fiscal-cfop_text LEFT BY 1 PLACES.
*      ENDIF.
*    ENDLOOP.
*  ELSEIF cfop_lines = 1.      " NF with items that all have one CFOP
*    MOVE wk_cfop-key  TO w_danfe-nota_fiscal-cfop.
*    MOVE wk_cfop-text TO w_danfe-nota_fiscal-cfop_text.
*  ENDIF.                                             " BOI note 593218

*----------------------------------------------------------------------*
*    determine issuer and destination (only for test)                  *
*----------------------------------------------------------------------*
  IF wk_header-direct = '1'   AND
     wk_header-entrad = ' '.
    issuer-partner_type      = wk_header-partyp.
    issuer-partner_id        = wk_header-parid.
    issuer-partner_function  = wk_header-parvw.
    destination-partner_type = 'B'.
    destination-partner_id   = wk_header-bukrs.
    destination-partner_id+4 = wk_header-branch.
  ELSE.
    issuer-partner_type          = 'B'.
    issuer-partner_id            = wk_header-bukrs.
    issuer-partner_id+4          = wk_header-branch.
    destination-partner_type     = wk_header-partyp.
    destination-partner_id       = wk_header-parid.
    destination-partner_function = wk_header-parvw.
  ENDIF.

*----------------------------------------------------------------------*
*    read branch data (issuer)                                         *
*----------------------------------------------------------------------*

  CLEAR j_1binnad.

  CALL FUNCTION 'J_1B_NF_PARTNER_READ'
    EXPORTING
      partner_type           = issuer-partner_type
      partner_id             = issuer-partner_id
      partner_function       = issuer-partner_function
      doc_number             = wk_header-docnum
      obj_item               = wk_item
    IMPORTING
      parnad                 = j_1binnad
    EXCEPTIONS
      partner_not_found      = 1
      partner_type_not_found = 2
      OTHERS                 = 3.
  MOVE-CORRESPONDING j_1binnad TO w_danfe-issuer.

*... check the sy-subrc ...............................................*
  PERFORM check_error.
  CHECK retcode IS INITIAL.

*----------------------------------------------------------------------*
*    read destination data                                             *
*----------------------------------------------------------------------*

  CLEAR j_1binnad.

  CALL FUNCTION 'J_1B_NF_PARTNER_READ'
    EXPORTING
      partner_type           = destination-partner_type
      partner_id             = destination-partner_id
      partner_function       = destination-partner_function
      doc_number             = wk_header-docnum
      obj_item               = wk_item
    IMPORTING
      parnad                 = j_1binnad
    EXCEPTIONS
      partner_not_found      = 1
      partner_type_not_found = 2
      OTHERS                 = 3.
  MOVE-CORRESPONDING j_1binnad TO w_danfe-destination.

*" Begin of BN8068-081003

  CLEAR w_kunnr.

  SELECT SINGLE kunnr
    FROM kna1
    INTO w_kunnr
   WHERE kunnr EQ wk_header-parid.

  IF sy-subrc IS INITIAL.

    CLEAR w_danfe-destination-name2.

  ENDIF.
*" End of BN8068-081003

*{ Begin of BN8068-090810
*" Issuer State tax number treatment
  m_ie_treatment: w_danfe-issuer-stains.

*" Destination State tax number treatment
  m_ie_treatment: w_danfe-destination-stains.

  IF w_danfe-destination-land1 NE c_land_br
  OR wk_header-nftype          EQ c_type_lp.

    MOVE: c_noves    TO w_danfe-destination-pstlz,
          c_exterior TO w_danfe-destination-ort02.

  ENDIF.
*} End of BN8068-090810

*----------------------------------------------------------------------*
*    read fatura data if the Nota Fiscal is a Nota Fiscal Fatura       *
*----------------------------------------------------------------------*

  DATA: v_loops TYPE i,
        v_linha TYPE i,
        v_index TYPE i.
  DATA: w_line TYPE tline.

  CLEAR v_linha.

*  IF wk_header-fatura = 'X'.
*
*    IF wk_header-zterm NE space.
*      SELECT *
*             FROM t052
*             WHERE zterm = wk_header-zterm
*             ORDER BY PRIMARY KEY.
*        EXIT.
*      ENDSELECT.
*
*      IF t052-ztagg > '00' AND t052-ztagg LT wk_header-zfbdt+6(2).
*        SELECT *
*               FROM t052
*               WHERE zterm =  wk_header-zterm
*               AND   ztagg GE wk_header-zfbdt+6(2)
*               ORDER BY PRIMARY KEY.
*          EXIT.
*        ENDSELECT.
*      ENDIF.
*
*      IF t052-xsplt = 'X'.               "holdback/retainage
*
*        SELECT *
*               FROM t052s
*               INTO TABLE int_t052s
*               WHERE zterm = wk_header-zterm
*               ORDER BY PRIMARY KEY.
*
*        DESCRIBE TABLE int_t052s LINES t052slines.
*
*        v_loops = t052slines MOD 3.
*
*        IF t052slines > 3.
*          t052slines = 3.  "max. number of holdbacks printed on NF
*        ENDIF.
*
*        DO v_loops TIMES.
*
*          ADD 1 TO v_linha.
*
*          DO t052slines TIMES VARYING rate  FROM j_1bprnffa-ratpz1
*                                            NEXT j_1bprnffa-ratpz2
*                              VARYING text2 FROM j_1bprnffa-txt12
*                                            NEXT j_1bprnffa-txt22
*                              VARYING text3 FROM j_1bprnffa-txt13
*                                            NEXT j_1bprnffa-txt23
*                              VARYING text4 FROM j_1bprnffa-txt14
*                                            NEXT j_1bprnffa-txt24
*                              VARYING text1 FROM j_1bprnffa-txt11
*                                            NEXT j_1bprnffa-txt21.
*
*            v_index = sy-index + ( ( v_linha - 1 ) * 3 ).
*
*            READ TABLE int_t052s INDEX v_index.
*            rate = int_t052s-ratpz.
*            SELECT SINGLE *
*                   FROM t052
*                   WHERE zterm = int_t052s-ratzt
*                   AND   ztagg = '00'.
*            CALL FUNCTION 'FI_TEXT_ZTERM'
*              EXPORTING
*                i_t052  = t052
*              TABLES
*                t_ztext = ztext.
*            LOOP AT ztext.
*              CASE sy-tabix.
*                WHEN 1.
*                  text2 = ztext-text1.
*                WHEN 2.
*                  text3 = ztext-text1.
*                WHEN 3.
*                  text4 = ztext-text1.
*                WHEN 4.
*                  text1 = ztext-text1.
*              ENDCASE.
*            ENDLOOP.
*          ENDDO.
**          APPEND j_1bprnffa TO w_danfe-invoice.
*        ENDDO.
*      ELSE.                              " t052-xsplt = ' '
*        CALL FUNCTION 'FI_TEXT_ZTERM'
*          EXPORTING
*            i_t052  = t052
*          TABLES
*            t_ztext = ztext.
*
*        LOOP AT ztext.
*          CASE sy-tabix.
*            WHEN 1.
**              j_1bprnffa-txt02 = ztext-text1.
*              MOVE: ztext-text1 TO w_text1.
*            WHEN 2.
**              j_1bprnffa-txt03 = ztext-text1.
*              MOVE: ztext-text1 TO w_text2.
*            WHEN 3.
**              j_1bprnffa-txt04 = ztext-text1.
*              MOVE: ztext-text1 TO w_text3.
*            WHEN 4.
**              j_1bprnffa-txt01 = ztext-text1.
*              MOVE: ztext-text1 TO w_text4.
*          ENDCASE.
*        ENDLOOP.
**        APPEND j_1bprnffa TO w_danfe-invoice.
*        CONCATENATE w_text1 w_text2 w_text3 INTO w_line-tdline SEPARATED BY ' / '.
*        APPEND w_line TO w_danfe-text1.
*
*        IF NOT w_text4 IS INITIAL.
*          MOVE: w_text4 TO w_line-tdline.
*          APPEND w_line TO w_danfe-text1.
*        ENDIF.
*
*      ENDIF.
*    ENDIF.
*  ENDIF.


*----------------------------------------------------------------------*
*    read carrier data                                                 *
*----------------------------------------------------------------------*

  IF wk_header-doctyp NE '2'.          "no carrier for Complementars

    READ TABLE wk_partner WITH KEY docnum = wk_header-docnum
                                   parvw  = 'SP'.
    IF sy-subrc = 0.

      CLEAR j_1binnad.
      CALL FUNCTION 'J_1B_NF_PARTNER_READ'
        EXPORTING
          partner_type           = wk_partner-partyp
          partner_id             = wk_partner-parid
          partner_function       = wk_partner-parvw
          doc_number             = wk_header-docnum
        IMPORTING
          parnad                 = j_1binnad
        EXCEPTIONS
          partner_not_found      = 1
          partner_type_not_found = 2
          OTHERS                 = 3.
      MOVE-CORRESPONDING j_1binnad TO w_danfe-carrier.
    ENDIF.

  ENDIF.          "no carrier for Complementars



*----------------------------------------------------------------------*
*    read reference NF                                                 *
*----------------------------------------------------------------------*
  IF w_danfe-nota_fiscal-docref <> space.
    SELECT SINGLE * FROM j_1bnfdoc INTO *j_1bnfdoc
             WHERE docnum = w_danfe-nota_fiscal-docref.
    w_danfe-nota_fiscal-nf_docref = *j_1bnfdoc-nfnum.
    w_danfe-nota_fiscal-nf_serref = *j_1bnfdoc-series.
    w_danfe-nota_fiscal-nf_subref = *j_1bnfdoc-subser.
    w_danfe-nota_fiscal-nf_datref = *j_1bnfdoc-docdat.
  ENDIF.

*----------------------------------------------------------------------*
*    get information about form                                        *
*----------------------------------------------------------------------*

  DATA: print_conf TYPE j_1bb2.

  CALL FUNCTION 'J_1BNF_GET_PRINT_CONF'
    EXPORTING
      headerdata = wk_header
    IMPORTING
      print_conf = print_conf
    EXCEPTIONS
      error      = 1
      OTHERS     = 2.

  PERFORM check_error.
  CHECK retcode IS INITIAL.

*----------------------------------------------------------------------*
*    write texts to TEXTS window                                       *
*----------------------------------------------------------------------*

  istart = print_conf-totlih.                       " note note 743361

*  LOOP AT wk_header_msg.
*    w_line-tdline = wk_header_msg-message.
*    IF sy-index LT istart.
*      IF sy-index EQ 1.
*        w_danfe-observ1 = wk_header_msg-message.
*      ELSE.
*        CONCATENATE w_danfe-observ1
*                    cl_abap_char_utilities=>cr_lf
*                    wk_header_msg-message
*                    INTO w_danfe-observ1.
*      ENDIF.
*      APPEND w_line TO w_danfe-text1.
*    ELSE.
*      IF sy-index EQ istart.
*        w_danfe-observ2 = wk_header_msg-message.
*      ELSE.
*        CONCATENATE w_danfe-observ2
*                    cl_abap_char_utilities=>cr_lf
*                    wk_header_msg-message
*                    INTO w_danfe-observ2.
*      ENDIF.
*      APPEND w_line TO w_danfe-text2.
*    ENDIF.
*  ENDLOOP.

*... fill items ......................................................*

  CLEAR index.

  PERFORM f_batch_split_selection.

* Início Diogo 19/08/2008 - Carregar Tabela de Dados XML/Danfe
* Verfificar se está em contigência
  IF wk_header-conting IS INITIAL.

* Buscar Dados de impressão XML e DANFE
    REFRESH: i_nfedata, i_nfedata_aux.
    SELECT *
      FROM zvxlnfedata
      INTO TABLE i_nfedata
      WHERE docnum EQ wk_header-docnum.

    IF sy-subrc IS INITIAL.

* Filtrar apenas com os dados de PMC
      i_nfedata_aux = i_nfedata.
      DELETE i_nfedata_aux WHERE itmnum EQ '000000'.

    ENDIF.

  ELSE.

    REFRESH: i_nfedata.

  ENDIF.

* Fim Diogo 19/08/2008 - Carregar Tabela de Dados XML/Danfe


  LOOP AT wk_item.

    READ TABLE wk_item_add WITH KEY docnum = wk_item-docnum
                              itmnum = wk_item-itmnum.

    MOVE: sy-tabix TO index.

*   Delete initial zeros
    SHIFT wk_item-nbm LEFT BY 2 PLACES.

    CLEAR j_1bprnfli.
    MOVE-CORRESPONDING wk_item TO j_1bprnfli.
    MOVE-CORRESPONDING wk_item_add TO j_1bprnfli.

*... fill text reference ..............................................*

    LOOP AT wk_refer_msg WHERE itmnum = wk_item-itmnum.
      REPLACE '  ' WITH wk_refer_msg-seqnum INTO j_1bprnfli-text_ref.
      REPLACE ' '  WITH ','                 INTO j_1bprnfli-text_ref.
    ENDLOOP.
    REPLACE ', ' WITH '  ' INTO j_1bprnfli-text_ref.

*   Select data of Batch
    PERFORM f_select_batch_data.
    APPEND j_1bprnfli TO w_danfe-item.

    CLEAR j_1bprnfli.

  ENDLOOP.

*" Início Diogo - 21/08/2008
  IF wk_header-conting EQ 'X'.
* Atualizar dados de PMC para carregar no XML
    MODIFY zvxlnfedata FROM TABLE i_nfedata.
    REFRESH i_nfedata.
  ENDIF.
*" Fim Diogo - 21/08/2008

  CHECK retcode IS INITIAL.

  MOVE-CORRESPONDING wk_header_add TO w_danfe-nota_fiscal.

*{Begin of BN8068-090128
*  CLEAR w_taxval.
*
*  LOOP AT wk_item_tax.
*
*    IF wk_item_tax-taxtyp = c_iczf.
*
*      w_taxval = w_taxval + wk_item_tax-taxval.
*
*    ENDIF.
*  ENDLOOP.
*
*  w_danfe-nota_fiscal-nftot = w_danfe-nota_fiscal-nftot + w_taxval.
*{End of BN8068-090128

  IF NOT lr_badi IS INITIAL.
    CALL METHOD lr_badi->filling_danfe
      CHANGING
        danfe = w_danfe.
  ENDIF.

*{ Begin of BN8068
*  PERFORM f_fill_aditional_info.
** Retirar Frete do Valor Total Produtos
*  w_danfe-nota_fiscal-nfnett = w_danfe-nota_fiscal-nfnett - w_danfe-nota_fiscal-nffre.
  w_danfe-nota_fiscal-nfnett = w_danfe-nota_fiscal-nfnet.

  PERFORM printing.

**** Begin of BP7435-121108
  CONSTANTS: c_icm1 TYPE char4 VALUE 'ICM1',
             c_ipi1 TYPE char4 VALUE 'IPI1'.

  LOOP AT wk_item_tax.

    IF wk_header-nftype  EQ c_type_lp
    OR wk_header-nftype  EQ c_type_lj.

      IF wk_item_tax-base EQ 0 AND wk_item_tax-taxval NE 0.

        CASE wk_item_tax-taxtyp.

          WHEN c_icm1.

            MOVE zsprnfauxi-icmsothbas TO w_danfe-nota_fiscal-icmsbase.

          WHEN c_ipi1.

            MOVE zsprnfauxi-ipiothbas TO w_danfe-nota_fiscal-ipibase.

        ENDCASE.

      ENDIF.

    ENDIF.

  ENDLOOP.
**** End of BP7435-121108

  IF  wk_header-nftype  NE c_type_lp
  AND wk_header-nftype  NE c_type_lj.

*{ Begin of BN8068-090406
    UNASSIGN: <fs_item>.

    READ TABLE wk_item ASSIGNING <fs_item> INDEX 1.

    IF  sy-subrc        IS INITIAL
    AND <fs_item>-matnr IS INITIAL.

      MOVE: wk_header-anzpk   TO w_danfe-nota_fiscal-anzpk,
            j_1bprnfhd-shpunt TO w_danfe-nota_fiscal-shpunt.

    ELSE.
*} End of BN8068-090406

      MOVE: j_1bprnfhd-anzpk  TO w_danfe-nota_fiscal-anzpk,
            j_1bprnfhd-shpunt TO w_danfe-nota_fiscal-shpunt.

*{ Begin of BN8068-090406
    ENDIF.
*} End of BN8068-090406

  ENDIF.

* Verfificar se está em contigência
  IF wk_header-conting EQ 'X'.

    IF NOT wk_header_msg[] IS INITIAL.
      PERFORM f_fill_danfe_text.
    ENDIF.

    PERFORM f_select_sales_document_data.

  ELSE.

* Filtrar apenas com os textos Adicionais
    REFRESH i_nfedata_aux.
    i_nfedata_aux = i_nfedata.
    DELETE i_nfedata_aux WHERE itmnum NE '000000' OR
                               seqnum EQ '00'.

    IF i_nfedata_aux[] IS NOT INITIAL.

      CLEAR e_tline-tdline.
      LOOP AT i_nfedata_aux INTO e_nfedata.
        e_tline-tdline = e_nfedata-ztexto.
        APPEND e_tline TO w_danfe-text1.
      ENDLOOP.
    ENDIF.

    FREE: i_nfedata, e_nfedata, e_tline.

  ENDIF.

*{ Begin of BN5607-090804
  IF wk_header-form EQ c_nf61.

    FREE: e_tline,
          t_po_imp.

    UNASSIGN <fs_po_imp>.

    SELECT po_imp
      FROM zvxxnfe_itemnew
      INTO CORRESPONDING FIELDS OF TABLE t_po_imp
     WHERE dinum EQ wk_header-observat
       AND nfnum EQ wk_header-nfenum.

    IF sy-subrc IS INITIAL.

      LOOP AT t_po_imp ASSIGNING <fs_po_imp>.

        MOVE <fs_po_imp>-po_imp to w_po_imp.

        CONCATENATE w_po_imp w_all_po_imp INTO w_all_po_imp SEPARATED BY space.

      ENDLOOP.

      CONCATENATE text-002 w_all_po_imp INTO e_tline-tdline SEPARATED BY space.

      APPEND e_tline TO w_danfe-text1.

      FREE: e_tline.

    ENDIF.

  ENDIF.
*} End of BN5607-090804

*" Begin of BN8068-080929
  PERFORM f_fill_ie_subst_trib.
*" End of BN8068-080929

  PERFORM f_select_invoice_data.

***  PERFORM f_read_text.
*} End of BN8068

  CLEAR control_parameters-getotf.

* <<< Inclusão Valdenilson Pina 12/09/2008
  IF wk_header-inco1 EQ c_fob.

    MOVE 1 TO w_danfe-others-freight.

  ENDIF.
* >>> Fim Inclusão Valdenilson Pina 12/09/2008

  PERFORM call_smartform.

  PERFORM f_checa_cliente.

  IF w_teste NE c_x.

    control_parameters-getotf = c_x.

    PERFORM call_smartform.

* Início alteração Aline Marinho - 20/06/06
    PERFORM f_envia_pdf.

  ENDIF.

*" Begin of BN8068-081013
  READ TABLE wk_item INDEX 1.

  IF sy-subrc IS INITIAL.

    CLEAR w_fkart.

    SELECT SINGLE fkart
      FROM vbrk
      INTO w_fkart
     WHERE vbeln EQ wk_item-refkey.

    IF sy-subrc IS INITIAL AND
       w_fkart EQ c_f2.

      PERFORM f_executa_vf31.

    ENDIF.

  ENDIF.

*" End of BN8068-081013

ENDFORM.                        "smart_sub_printing

*&---------------------------------------------------------------------
*&      Form  GET_CFOP_LENGTH_SMART
*&---------------------------------------------------------------------
*       text
*----------------------------------------------------------------------
FORM get_cfop_length_smart USING    p_bukrs
                                    p_branch
                                    p_pstdat
                           CHANGING p_version         " note 593218
                                    p_clength
                                    p_elength
                                    p_text
                                    p_region.         " note 593218

  DATA: lv_adress   TYPE addr1_val.

  CALL FUNCTION 'J_1BREAD_BRANCH_DATA'
    EXPORTING
      bukrs             = p_bukrs
      branch            = p_branch
    IMPORTING
      address1          = lv_adress
    EXCEPTIONS
      branch_not_found  = 1
      address_not_found = 2
      company_not_found = 3
      OTHERS            = 4.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  p_region = lv_adress-region.                   " note 593218

  CALL FUNCTION 'J_1B_CFOP_GET_VERSION'
    EXPORTING
      region            = lv_adress-region
      date              = p_pstdat
    IMPORTING
      version           = p_version        " note 593218
      extension         = p_elength
      cfoplength        = p_clength
      txtdef            = p_text
    EXCEPTIONS
      date_missing      = 1
      version_not_found = 2
      OTHERS            = 3.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                             " GET_CFOP_LENGTH_SMART

*&---------------------------------------------------------------------
*&      Form  ENCODING_CFOP_SMART
*&---------------------------------------------------------------------
*       encode the CFOP
*      51234   =>  51234
*      5123A   =>  5123A
*      512345  =>  512345
*      51234A  =>  51234A
*      5123B4  =>  5123B4
*      5123BA  =>  5123BA
*----------------------------------------------------------------------
FORM encoding_cfop_smart  CHANGING p_cfop.

  DATA: len(1) TYPE n,
        helpstring(60) TYPE c,
        d TYPE i.

  helpstring =
    'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ[-<>=!?]'.

  len = STRLEN( p_cfop ).
  IF len = 6.
    CASE p_cfop(1).
      WHEN 1. d = 0.
      WHEN 2. d = 1.
      WHEN 3. d = 2.
      WHEN 5. d = 3.
      WHEN 6. d = 4.
      WHEN 7. d = 5.
    ENDCASE.
    d = d * 10 + p_cfop+1(1).
    SHIFT helpstring BY d PLACES.
    MOVE helpstring(1) TO p_cfop(1).
    p_cfop+1(4) = p_cfop+2(4).
    CLEAR p_cfop+5(1).
  ENDIF.

ENDFORM.                    " ENCODING_CFOP_SMART
*&--------------------------------------------------------------------*
*&      Form  call_smartform
*&--------------------------------------------------------------------*
*       text
*---------------------------------------------------------------------*
FORM call_smartform.

  DATA: lv_subject TYPE tdtitle,
        t_errortab TYPE tsferror.

  output_options-tdimmed       = nast-dimme.
  output_options-tddest        = nast-ldest.
  output_options-tddataset     = nast-dsnam.
  output_options-tdsuffix1     = nast-dsuf1.
  output_options-tdsuffix2     = nast-objky.
  output_options-tdreceiver    = nast-tdreceiver.
* <<< Inclusão Valdenilson 12/09/2008
  output_options-tdcopies      = nast-anzal.
* >>> Fim Inclusão Valdenilson 12/09/2008

  control_parameters-no_dialog = 'X'.

  CALL FUNCTION fm_name
    EXPORTING
      control_parameters = control_parameters
      output_options     = output_options
      user_settings      = ''
      nota_fiscal        = w_danfe
    IMPORTING
      job_output_info    = e_job_output_info
    EXCEPTIONS
      formatting_error   = 1
      internal_error     = 2
      send_error         = 3
      user_canceled      = 4
      OTHERS             = 5.

  IF sy-subrc <> 0.

    CALL FUNCTION 'SSF_READ_ERRORS'
      IMPORTING
        errortab = t_errortab.

  ENDIF.

ENDFORM.                    "call_smartform
*&---------------------------------------------------------------------*
*&      Form  F_FILL_ADITIONAL_INFO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_fill_aditional_info .

  DATA: i_j1bprnfli TYPE TABLE OF j_1bprnfli,
        i_j1bnfftx  TYPE TABLE OF j_1bnfftx.

  DATA: e_j1bnfdoc   TYPE j_1bnfdoc,
        e_danfe_item TYPE j_1bprnfli,
        e_j1bnfftx   TYPE j_1bnfftx,
        e_tline      TYPE tline.

  CALL FUNCTION 'Z_V_NFETEXTOS'
    EXPORTING
      doc_number   = w_danfe-nota_fiscal-docnum
    TABLES
      t_header_msg = i_j1bnfftx.

  IF NOT i_j1bnfftx[] IS INITIAL.

    REFRESH w_danfe-text1.

    LOOP AT i_j1bnfftx INTO e_j1bnfftx.
      CLEAR: e_tline-tdline.
      e_tline-tdline   = e_j1bnfftx-message.
      APPEND e_tline TO w_danfe-text1.
    ENDLOOP.

    SORT w_danfe-text1 BY tdline.
    DELETE ADJACENT DUPLICATES FROM w_danfe-text1 COMPARING tdline.

  ENDIF.

ENDFORM.                    " F_FILL_ADITIONAL_INFO
*&---------------------------------------------------------------------*
*&      Form  F_SELECT_SALES_DOCUMENT_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_select_sales_document_data .

  CONSTANTS:
    c_type_lp TYPE char2 VALUE 'LP',
    c_type_lj TYPE char2 VALUE 'LJ',
    c_l7sys   TYPE sy-sysid   VALUE 'L7',
    c_gbsys   TYPE sy-sysid   VALUE 'GB'.

  DATA: e_tline TYPE tline.

  DATA w_seqnum TYPE i.

* Início - Diogo A Oliveira - 15/08/2008
  DATA: w_di_num  TYPE zvxxnfe_geralnew-di_num,
        w_di_date TYPE zvxxnfe_geralnew-di_date.
* Fim - Diogo A Oliveira - 15/08/2008

*{ Begin of BN8068-080910
  DATA: w_vdi_num  TYPE zvxxnfe_geraln2-di_num,
        w_vdi_date TYPE zvxxnfe_geraln2-di_date.
*} End of BN8068-080910

* Select data of Billing Document: Item Data
  SELECT *
  UP TO 1 ROWS
  FROM vbrp
  WHERE vbeln EQ wk_item-refkey.
  ENDSELECT.

  IF sy-subrc EQ 0.

*   Select data of Sales Document: Header Data
    SELECT SINGLE *
    FROM vbak
    WHERE vbeln EQ vbrp-aubel.

    IF NOT vbak-bstnk IS INITIAL.

      CONCATENATE text-001 vbak-bstnk INTO e_tline-tdline SEPARATED BY space.
      APPEND e_tline TO w_danfe-text1.

    ENDIF.

  ENDIF.

  IF NOT vbrp-aubel IS INITIAL.

    CONCATENATE text-002 vbrp-aubel INTO e_tline-tdline SEPARATED BY space.
    APPEND e_tline TO w_danfe-text1.

  ENDIF.

  IF NOT vbrp-vgbel IS INITIAL.

    CONCATENATE text-003 vbrp-vgbel INTO e_tline-tdline SEPARATED BY space.
    APPEND e_tline TO w_danfe-text1.

  ENDIF.

  IF NOT wk_item-refkey IS INITIAL.

    CONCATENATE text-005 wk_item-refkey INTO e_tline-tdline SEPARATED BY space.
    APPEND e_tline TO w_danfe-text1.

  ENDIF.

* Início - Daniela 29/08/2008 Docto Referencia em Dados Adic. XML e DANFE
  IF NOT wk_header-docref IS INITIAL.

    CLEAR: e_docref.

* Seleção do Número Externo do Docto Referencia
    SELECT SINGLE nfe nfenum nfnum
      FROM j_1bnfdoc
      INTO e_docref
      WHERE docnum EQ wk_header-docref.

    IF sy-subrc EQ 0.

      IF e_docref-nfe IS INITIAL.
*       Nota Fiscal - NFNUM
        CONCATENATE text-009 e_docref-nfnum INTO e_tline-tdline SEPARATED BY space.
        APPEND e_tline TO w_danfe-text1.

      ELSE.
*       Nota Fiscal Eletronica - NFENUM
        CONCATENATE text-009 e_docref-nfenum INTO e_tline-tdline SEPARATED BY space.
        APPEND e_tline TO w_danfe-text1.

      ENDIF.

    ENDIF.

  ENDIF.
* Fim - Daniela 29/08/2008 Docto Referencia em Dados Adic. XML e DANFE

* Inicio Diogo Augusto de Oliveira - 18/08/2008
* Gravar msg: DANFE em contingência. Impresso em decorrência de problemas técnicos.
* Verificar se é Re-impressão
*  IF wk_header-printd IS INITIAL.

*{ Begin of BN8068-090810
*  e_tline-tdline = text-008.
*  APPEND e_tline TO w_danfe-text1.
*} End of BN8068-090810

*  ENDIF.
* Fim Diogo Augusto de Oliveira - 18/08/2008

* Início das alterações Diogo Augusto de Oliveira - 08/08/2008

* DI information
  IF wk_header-nftype EQ c_type_lp.

    CLEAR: w_di_num, w_di_date.
    SELECT di_num di_date
      UP TO 1 ROWS
      FROM zvxxnfe_geralnew
      INTO (w_di_num , w_di_date )
      WHERE
*{ Begin of BN8068-090109
            dinum  EQ wk_header-observat AND
*} End of BN8068-090109
            nfnum  EQ wk_header-nfenum   AND
            series EQ wk_header-series.
    ENDSELECT.

    IF sy-subrc IS INITIAL.

      CONCATENATE text-006 w_di_num INTO e_tline-tdline SEPARATED BY space.
      APPEND e_tline TO w_danfe-text1.

      CONCATENATE text-007 w_di_date INTO e_tline-tdline SEPARATED BY space.
      APPEND e_tline TO w_danfe-text1.

    ENDIF.
  ENDIF.
* Fim das alterações Diogo Augusto de Oliveira - 08/08/2008

*{ Begin of BN8068-080910
  IF wk_header-nftype EQ c_type_lj.

    IF sy-sysid(2) EQ c_l7sys.

      CLEAR: w_vdi_num, w_vdi_date.
      SELECT di_num di_date
        UP TO 1 ROWS
        FROM zvxxnfe_geraln2
        INTO (w_vdi_num , w_vdi_date )
        WHERE
*{ Begin of BN8068-090109
              dinum  EQ wk_header-observat AND
*} End of BN8068-090109
              nfnum  EQ wk_header-nfenum   AND
              series EQ wk_header-series.
      ENDSELECT.

      IF sy-subrc IS INITIAL.

        CONCATENATE text-006 w_vdi_num INTO e_tline-tdline SEPARATED BY space.
        APPEND e_tline TO w_danfe-text1.

        CONCATENATE text-007 w_vdi_date INTO e_tline-tdline SEPARATED BY space.
        APPEND e_tline TO w_danfe-text1.

      ENDIF.

    ELSEIF sy-sysid(2) EQ c_gbsys.

      CLEAR: w_vdi_num, w_vdi_date.
      SELECT di_num di_date
        UP TO 1 ROWS
        FROM zfxxnfe_geraln2
        INTO (w_vdi_num , w_vdi_date )
        WHERE
*{ Begin of BN8068-090109
              dinum  EQ wk_header-observat AND
*} End of BN8068-090109
              nfnum  EQ wk_header-nfenum   AND
              series EQ wk_header-series.
      ENDSELECT.

      IF sy-subrc IS INITIAL.

        CONCATENATE text-006 w_vdi_num INTO e_tline-tdline SEPARATED BY space.
        APPEND e_tline TO w_danfe-text1.

        CONCATENATE text-007 w_vdi_date INTO e_tline-tdline SEPARATED BY space.
        APPEND e_tline TO w_danfe-text1.

      ENDIF.

    ENDIF.

  ENDIF.
*} End of BN8068-080910

*" Início Diogo - 21/08/2008
  CLEAR: e_nfedata,
         w_seqnum,
         e_tline.

  REFRESH i_nfedata.

  LOOP AT w_danfe-text1 INTO e_tline.

    ADD 1 TO w_seqnum.

    MOVE:
        sy-mandt         TO e_nfedata-mandt,
        wk_header-docnum TO e_nfedata-docnum,
        '000000'         TO e_nfedata-itmnum,
        w_seqnum         TO e_nfedata-seqnum,
        e_tline-tdline   TO e_nfedata-ztexto.

    APPEND e_nfedata TO i_nfedata.
    CLEAR e_nfedata.

  ENDLOOP.

*{ Begin of BN8068-090810
*" Contingency message
  m_add_nfedata: text-008.

*" Homologation environment message
  IF sy-sysid+2(1) NE c_sys_prod.

    m_add_nfedata: text-010.

  ENDIF.

*} End of BN8068-090810

* Atualizar tabela Dados de impressão XML e DANFE com Dados Adicionais
  MODIFY zvxlnfedata FROM TABLE i_nfedata.
  REFRESH i_nfedata.

*" Fim Diogo - 21/08/2008

ENDFORM.                    " F_SELECT_SALES_DOCUMENT_DATA
*&---------------------------------------------------------------------*
*&      Form  F_SELECT_BATCH_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_select_batch_data .

  DATA: e_danfe_item TYPE j_1bprnfli.

  DATA: w_maktx       TYPE j_1bprnfli-maktx,
        w_j_vpmc(15)  TYPE c               ,
        w_menge(16)   TYPE c               ,
        wl_shipfrom   LIKE t001w-txjcd     ,
        wl_shipto     LIKE kna1-txjcd      ,
        wl_stgrp      LIKE j_1btxst1-stgrp.

  CLEAR: e_batch.

  IF NOT wk_item-refkey IS INITIAL.
    SELECT SINGLE *
      FROM vbrk
      INTO e_vbrk
      WHERE  vbeln = wk_item-refkey.

    IF sy-subrc EQ 0.
      SELECT SINGLE mvgr2
        FROM mvke
        INTO w_mvgr2
        WHERE matnr EQ wk_item-matnr
          AND vkorg EQ e_vbrk-vkorg
          AND vtweg EQ e_vbrk-vtweg.
    ENDIF.
  ENDIF.

  IF w_mvgr2 IS INITIAL.

    e_vkorg-sign   = c_i.
    e_vkorg-option = c_bt.
    e_vkorg-low    = c_vkorgfrom.
    e_vkorg-high   = c_vkorgto.
    APPEND e_vkorg TO t_vkorg.

    SELECT SINGLE mvgr2
    FROM mvke
    INTO w_mvgr2
    WHERE matnr EQ wk_item-matnr
      AND vkorg IN t_vkorg.

  ENDIF.

*" Informação de Batch deve ser enviada apenas para HC e Vick
  IF w_mvgr2 EQ c_healthcare OR
     w_mvgr2 EQ c_vick.

    IF NOT wk_item-charg IS INITIAL.
*" BATCH Normal

      e_batch-docnum  = wk_item-docnum.
      e_batch-itmnum  = wk_item-itmnum.
      e_batch-charg   = wk_item-charg.
      e_batch-menge   = wk_item-menge.
      e_batch-meins   = wk_item-meins.
      APPEND e_batch TO w_danfe-batch.

    ELSE.
*" Batch Split - IN_LIN-CHARG em branco - Buscar dados do Batch na LIPS
      READ TABLE t_bvbrp INTO e_bvbrp WITH KEY vbeln = wk_item-refkey
                                               posnr = wk_item-itmnum BINARY SEARCH.
      IF sy-subrc EQ 0.
        READ TABLE t_blips INTO e_blips WITH KEY vbeln = e_bvbrp-vgbel
                                                 uecha = e_bvbrp-vgpos BINARY SEARCH.
        IF sy-subrc EQ 0.
          LOOP AT t_blips INTO e_blips FROM sy-tabix.
            IF e_blips-vbeln NE e_bvbrp-vgbel OR
               e_blips-uecha NE e_bvbrp-vgpos.
              EXIT.
            ENDIF.
            e_batch-docnum  = wk_item-docnum.
            e_batch-itmnum  = wk_item-itmnum.
            e_batch-charg   = e_blips-charg.
            e_batch-menge   = e_blips-lfimg.
            e_batch-meins   = e_blips-vrkme.

            APPEND e_batch TO w_danfe-batch.
            CLEAR: e_batch.

          ENDLOOP.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

  CLEAR: wl_shipto, wl_stgrp.
  SELECT SINGLE xsubt txjcd INTO (wl_stgrp, wl_shipto) FROM kna1
       WHERE kunnr EQ wk_header-parid.

  CLEAR wl_shipfrom.
  SELECT SINGLE txjcd INTO wl_shipfrom FROM t001w
       WHERE werks EQ wk_item-werks.
  IF NOT e_vbrk-fkdat IS INITIAL.
    CONVERT DATE e_vbrk-fkdat INTO INVERTED-DATE wl_validity_date.
  ELSE.
    CONVERT DATE sy-datum INTO INVERTED-DATE wl_validity_date.
  ENDIF.

  SELECT * FROM j_1btxst3 UP TO 1 ROWS
* Country
      WHERE land1     = 'BR' " Country
* Tax Group = 10
      AND   gruop     = '12'
* Tax jurisdiction of shipping from
      AND   shipfrom  = wl_shipfrom
* Tax jurisdiction of shipping to
      AND   shipto    = wl_shipto
* Material number
      AND   value     = wk_item-matnr
* Customer group for Substituiçao Tributária calculation
      AND   stgrp     = wl_stgrp
* Date from which the tax rule is valid
      AND   validfrom GE wl_validity_date
      AND   validto   LE wl_validity_date.
  ENDSELECT.

  IF sy-subrc EQ 0.
    READ TABLE wk_item_tax INTO e_ittax WITH KEY itmnum = wk_item-itmnum
                                                 taxtyp = c_ics3.
    IF sy-subrc EQ 0.
      e_pmc-docnum  = wk_item-docnum.
      e_pmc-itmnum  = wk_item-itmnum.

* Início - Diogo 19/08/2008
      IF i_nfedata_aux[] IS NOT INITIAL.
        CLEAR e_nfedata.
        READ TABLE i_nfedata_aux INTO e_nfedata WITH KEY docnum = wk_header-docnum
                                                         itmnum = wk_item-itmnum
                                                         BINARY SEARCH.
        IF sy-subrc IS INITIAL.
          e_pmc-j_vpmc  = e_nfedata-ztexto.
        ENDIF.
      ELSE.
        e_pmc-j_vpmc  = j_1btxst3-price.

*" Início Diogo - 21/08/2008
        CLEAR e_nfedata.

        MOVE:
            sy-mandt         TO e_nfedata-mandt,
            wk_header-docnum TO e_nfedata-docnum,
            wk_item-itmnum   TO e_nfedata-itmnum,
            '00'             TO e_nfedata-seqnum,
            e_pmc-j_vpmc     TO e_nfedata-ztexto.

        APPEND e_nfedata TO i_nfedata.
        CLEAR e_nfedata.

*" Fim Diogo - 21/08/2008

      ENDIF.
* Fim - Diogo 19/08/2008

      APPEND e_pmc TO w_danfe-pmc.
      CLEAR: e_pmc.
    ELSE.
      CLEAR: e_ittax.
    ENDIF.
  ENDIF.

ENDFORM.                    " F_SELECT_BATCH_DATA
*&---------------------------------------------------------------------*
*&      Form  F_SELECT_INVOICE_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_select_invoice_data .
*----------------------------------------------------------------------*
*    read fatura data if the Nota Fiscal is a Nota Fiscal Fatura       *
*----------------------------------------------------------------------*

*" Início Diogo 25/08/2008
  DATA: e_t052s    TYPE t052s,
        e_fatura   TYPE j_1bprnffa,
        e_top_text TYPE vtopis,
        e_item     TYPE j_1bnflin.
*" Fim Diogo 25/08/2008

  DATA: BEGIN OF t_konv OCCURS 0,
          kposn LIKE konv-kposn,
          kbetr LIKE konv-kbetr,
        END OF t_konv.

*" Início Diogo 25/08/2008
  DATA: i_t052s        TYPE STANDARD TABLE OF t052s,
        i_top_text     TYPE STANDARD TABLE OF vtopis,
        i_invoice_date TYPE STANDARD TABLE OF zvxlnfedata.
*" Fim Diogo 25/08/2008

  CONSTANTS: c_zant(4) VALUE 'ZANT',
             c_vbrk(4) VALUE 'VBRK',
             c_buzei   LIKE bseg-buzei VALUE '001',
             c_imprime VALUE 'X',
             c_zfdb(4) VALUE 'ZFDB'.

* RFS062003 begin of insertion
  DATA: ndias(03)        TYPE n,
        w_zterm          TYPE dzterm,
        w_wert           TYPE acccr-wrbtr,
        w_data           TYPE sy-datum,
        wl_ndias1(03)    TYPE n,
        wl_ndias2(03)    TYPE n,
        wl_prazo         LIKE j_1bprnfhd-pstdat,
        v_lines          TYPE i,
        v_zfbdt          LIKE bseg-zfbdt,
        v_imprime        TYPE c.

  IF wk_header-fatura = 'X'.

    CLEAR: zsprnfauxi-prazod1,
           zsprnfauxi-prazod2,
           zsprnfauxi-percdesc1,
           zsprnfauxi-percdesc2,
           zsprnfauxi-valdesc1,
           zsprnfauxi-valdesc2,
           zsprnfauxi-netwodesc1,
           zsprnfauxi-netwodesc2,
           zsprnfauxi-daysdesc1,
           zsprnfauxi-daysdesc2,
           zsprnfauxi-daysdesc3,
           wl_ndias1,
           wl_ndias2.

    READ TABLE wk_item INDEX 1.
    MOVE wk_item-refkey TO key_vbrk.
    SELECT SINGLE * FROM vbrk
           WHERE  vbeln       = key_vbrk-vbeln.
    IF sy-subrc <> 0.
      CLEAR vbrk.
    ENDIF.

* RFS062003 end of insertion
    IF wk_header-zterm NE space.
* Início alteração Aline Marinho - 01/08/06
      SELECT kposn kbetr
       FROM konv
        INTO TABLE t_konv
        WHERE knumv EQ vbrk-knumv AND
       kschl EQ c_zant AND
      kbetr NE 0.
      DESCRIBE TABLE t_konv LINES v_lines.
* Fim alteração Aline Marinho - 01/08/06
      SELECT * FROM t052 WHERE zterm = wk_header-zterm ORDER BY PRIMARY KEY.
* RFS062003 begin of insertion
        IF NOT t052-ztag1 IS INITIAL.
          wl_ndias1 = t052-ztag1.
*         wl_prazo = wk_header-pstdat + t052-ztag1.
          wl_prazo = j_1bprnfhd-zfbdt + t052-ztag1.  "Diogo Oliveira 18/08/2008
          WRITE wl_prazo TO zsprnfauxi-prazod1.
          zsprnfauxi-percdesc1  = t052-zprz1.
          zsprnfauxi-daysdesc1  = t052-ztag1.
        ENDIF.
        IF NOT t052-ztag2 IS INITIAL.
          wl_ndias2 = t052-ztag2.
*         wl_prazo = j_1bprnfhd-pstdat + t052-ztag2.
          wl_prazo = j_1bprnfhd-zfbdt + t052-ztag2.  "Diogo Oliveira 18/08/2008
          WRITE wl_prazo TO zsprnfauxi-prazod2.
          zsprnfauxi-percdesc2  = t052-zprz2.
          zsprnfauxi-daysdesc2  = t052-ztag2.
        ENDIF.
        zsprnfauxi-daysdesc3     = t052-ztag3.
* RFS062003 end of insertion
        ndias = t052-ztag1.
        IF t052-ztag2 > ndias.
          ndias = t052-ztag2.
        ENDIF.
        IF t052-ztag3 > ndias.
          ndias = t052-ztag3.
        ENDIF.
*       ZSPRNFAUXI-PRAZO1 = WK_HEADER-ZFBDT + NDIAS.
* Início alteração Aline Marinho - 01/08/06
        IF NOT v_lines IS INITIAL.
          SELECT SINGLE * FROM bkpf INTO bkpf
           WHERE bukrs EQ vbrk-bukrs
           AND awtyp EQ c_vbrk
          AND awkey EQ vbrk-vbeln.
          IF sy-subrc IS INITIAL.
            SELECT SINGLE zfbdt FROM bseg INTO v_zfbdt
             WHERE bukrs EQ bkpf-bukrs AND
              belnr EQ bkpf-belnr AND
             gjahr EQ bkpf-gjahr AND
            buzei EQ c_buzei.
            IF sy-subrc IS INITIAL.
              wk_header-zfbdt = v_zfbdt.
              v_imprime = c_imprime.
            ENDIF.
          ENDIF.
          zsprnfauxi-prazo1 = wk_header-zfbdt + ndias.
        ELSE.
          zsprnfauxi-prazo1 = wk_header-pstdat + ndias.     "RCS290798
        ENDIF.
* Fim alteração Aline Marinho - 01/08/06
* Início alteração Aline Marinho - 01/08/06
*      zsprnfauxi-prazo1 = j_1bprnfhd-pstdat + ndias.        "RCS290798
* Fim alteração Aline Marinho - 01/08/06
*--->>> BEGIN RCS082002
        CLEAR zvbrpterm.                                    "RFS102003
* RFS102003 begin of change
*       SELECT SINGLE * FROM ZVBRZTERM WHERE ZTERM EQ VBRK-ZTERM.
        SELECT SINGLE * FROM zvbrpterm WHERE zterm EQ vbrk-zterm.
* RFS102003 end of change
        IF sy-subrc EQ 0
        AND zvbrpterm-duedate EQ 'X'.                       "RFS102003
* RFS062003 (fixed on 09/29/2003) begin of insertion
          IF NOT wl_ndias1 IS INITIAL.
            wl_prazo = vbrk-valdt + wl_ndias1.
            WRITE wl_prazo TO zsprnfauxi-prazod1.
          ENDIF.
          IF NOT wl_ndias2 IS INITIAL.
            wl_prazo = vbrk-valdt + wl_ndias2.
            WRITE wl_prazo TO zsprnfauxi-prazod2.
          ENDIF.
* RFS062003 (fixed on 09/29/2003) end   of insertion
* Início alteração Aline Marinho - 01/08/06
          IF NOT v_lines IS INITIAL.
            zsprnfauxi-prazo1 = wk_header-zfbdt + ndias.
          ELSE.
* Fim alteração Aline Marinho - 01/08/06
            zsprnfauxi-prazo1 = vbrk-valdt + ndias.
* Início alteração Aline Marinho - 01/08/06
          ENDIF.
* Fim alteração Aline Marinho - 01/08/06
        ENDIF.
*<<<--- END RCS082002
*--->>> BEGIN RCS012002
        IF NOT vbrk-vbeln IS INITIAL.
          SELECT * UP TO 1 ROWS FROM zwint_plan
            WHERE vkorg     EQ vbrk-vkorg
              AND zterm     EQ vbrk-zterm
              AND date_from LE vbrk-fkdat
              AND date_to   GE vbrk-fkdat.
          ENDSELECT.
          IF sy-subrc EQ 0.
* Início alteração Aline Marinho - 01/08/06
            IF NOT v_lines IS INITIAL.
              zsprnfauxi-prazo1 = wk_header-zfbdt + ndias.
            ELSE.
* Fim alteração Aline Marinho - 01/08/06
              zsprnfauxi-prazo1 = zwint_plan-zfbdt + ndias.
* Início alteração Aline Marinho - 01/08/06
            ENDIF.
* Fim alteração Aline Marinho - 01/08/06
          ENDIF.
        ENDIF.
*<<<--- END RCS012002
        EXIT.
      ENDSELECT.

      IF t052-ztagg > '00' AND t052-ztagg LT wk_header-zfbdt+6(2).
        SELECT * FROM t052 WHERE zterm =  wk_header-zterm
                           AND   ztagg GE wk_header-zfbdt+6(2)
                           ORDER BY PRIMARY KEY.
          EXIT.
        ENDSELECT.
      ENDIF.

      IF t052-xsplt = 'X'.             "holdback/retainage

        SELECT * FROM t052s INTO TABLE int_t052s WHERE zterm = wk_header-zterm
                                                          ORDER BY PRIMARY KEY.
        DESCRIBE TABLE int_t052s LINES t052slines.

        IF t052slines > 5.
          t052slines = 5.  "max. number of holdbacks/retainages printed on NF
        ENDIF.

        DO t052slines TIMES VARYING rate  FROM j_1bprnffa-ratpz1
                                          NEXT j_1bprnffa-ratpz2
                            VARYING text2 FROM j_1bprnffa-txt12
                                          NEXT j_1bprnffa-txt22
                            VARYING text3 FROM j_1bprnffa-txt13
                                          NEXT j_1bprnffa-txt23
                            VARYING text4 FROM j_1bprnffa-txt14
                                          NEXT j_1bprnffa-txt24
                            VARYING text1 FROM j_1bprnffa-txt11
                                          NEXT j_1bprnffa-txt21.

          READ TABLE int_t052s INDEX sy-index.
          rate = int_t052s-ratpz.
          SELECT SINGLE * FROM t052 WHERE zterm = int_t052s-ratzt
                                    AND   ztagg = '00'.
          CALL FUNCTION 'FI_TEXT_ZTERM'
            EXPORTING
              i_t052  = t052
            TABLES
              t_ztext = ztext.
          LOOP AT ztext.
            CASE sy-tabix.
              WHEN 1.
                text2 = ztext-text1.
              WHEN 2.
                text3 = ztext-text1.
              WHEN 3.
                text4 = ztext-text1.
              WHEN 4.
                text1 = ztext-text1.
            ENDCASE.
          ENDLOOP.
        ENDDO.
      ELSE.                            " t052-xsplt = ' '
        CALL FUNCTION 'FI_TEXT_ZTERM'
          EXPORTING
            i_t052  = t052
          TABLES
            t_ztext = ztext.

        LOOP AT ztext.
          CASE sy-tabix.
            WHEN 1.
              j_1bprnffa-txt02 = ztext-text1.
            WHEN 2.
              j_1bprnffa-txt03 = ztext-text1.
            WHEN 3.
              j_1bprnffa-txt04 = ztext-text1.
            WHEN 4.
              j_1bprnffa-txt01 = ztext-text1.
          ENDCASE.
        ENDLOOP.
      ENDIF.
    ENDIF.
* Next three lines were commented.      RCS231098
*   IF VBAK-VBTYP NE 'I' AND                                "CVS070798
*      ( NOT VBRK-BELNR IS INITIAL OR
*        PROCTYPE EQ 'WR' ).
    SELECT * FROM  j_1bnflin                                "RCS231098
           WHERE  docnum = wk_item-docnum.                  "RCS231098
    ENDSELECT.                                              "RCS231098

    IF vbak-vbtyp NE 'I' AND           "Prom, Don, Samp   "RCS231098
       j_1bnflin-matkl NE 'PALETAS' AND"Pallets           "RCS231098
       vbrk-fkart NE 'ZFLB'            "STO               "RCS231098
*{ ICSTO development
   AND vbrk-fkart NE 'ZFZB'.
*}
      SELECT SINGLE * FROM  knb1
             WHERE  kunnr       = wk_header-parid
             AND    bukrs       = wk_header-bukrs.
      IF knb1-hbkid = ' '.
*         Pagamento em carteira
      ELSE.
        SELECT SINGLE * FROM  t012
               WHERE  bukrs       = wk_header-bukrs
               AND    hbkid       = knb1-hbkid.
        IF sy-subrc NE 0.
          CLEAR t012.
        ENDIF.
        SELECT SINGLE * FROM  bnka
               WHERE  banks       = t012-banks
               AND    bankl       = t012-bankl.
        IF sy-subrc = 0.
          zsprnfauxi-mpagto = bnka-banka.
        ENDIF.
      ENDIF.
    ELSE.
*     ZSPRNFAUXI-MPAGTO = 'BANCO'.                           "CVS100798C
      CLEAR zsprnfauxi-mpagto.                              "CVS100798
      CLEAR zsprnfauxi-prazo1.                              "CVS100798
    ENDIF.                                                  "CVS070798

  ENDIF.

*********
  REFRESH w_danfe-invoice.
*  WRITE: zsprnfauxi-prazo1 TO e_fatura-txt02.
*  APPEND e_fatura TO w_danfe-invoice.

  CLEAR: v_duedate,v_dtvencimento,wa_bsid.


*" Início Diogo - 25/08/2008
* WERT
  CLEAR: w_wert.

  LOOP AT wk_item
     INTO e_item.

    w_wert = w_wert + e_item-netwrt.

  ENDLOOP.


* BUDAT
  IF vbrk-valdt IS NOT INITIAL.
    w_data = vbrk-valdt.
  ELSE.
    w_data = vbrk-fkdat.
  ENDIF.

*{ Begin of BN8068-090506
*" Proceed in contengency when it's a Billing process
*" OR When is not billing but has a specific data in observations
  IF  wk_header-conting  EQ c_x
  AND ( wk_item-reftyp   EQ c_reftyp_bi
  OR  ( wk_item-reftyp   NE c_reftyp_bi
  AND wk_header-observat EQ c_duplct_observat ) ).


    IF e_vbrk-zterm IS NOT INITIAL.

*" Terms of Payment
      MOVE e_vbrk-zterm TO w_zterm.

    ELSE.

*" Terms of Payment and date
      MOVE: sy-datum        TO w_data,
            wk_header-zterm TO w_zterm.

    ENDIF.
*} End of BN8068-090506


* Valida se condição existe na tabela T052S
    SELECT *
    FROM t052s
    INTO TABLE i_t052s
    WHERE zterm EQ w_zterm.

    IF sy-subrc EQ 0.

*   Pagamento Parcelado
      CALL FUNCTION 'SD_PRINT_TERMS_OF_PAYMENT_SPLI'
        EXPORTING
          bldat            = w_data
          budat            = w_data
          cpudt            = w_data
          language         = 'P'
          terms_of_payment = w_zterm
          wert             = w_wert
        TABLES
          top_text_split   = i_top_text
* <<< Inclusão Valdenilson Pina 08/09/2008
        EXCEPTIONS
          terms_of_payment_not_in_t052  = 1
          terms_of_payment_not_in_t052s = 2
          OTHERS                        = 3.
* >>> Fim inclusão Valdenilson Pina 08/09/2008

      IF sy-subrc IS INITIAL.
        REFRESH i_invoice_date.

        LOOP AT i_top_text INTO e_top_text.

          CLEAR: e_t052s,
                 e_nfedata.

          CLEAR e_t052s.
          READ TABLE i_t052s INTO e_t052s INDEX sy-tabix.

          IF sy-subrc EQ 0.

            WRITE  e_top_text-hdatum TO v_dtvencimento.
            APPEND v_dtvencimento TO w_danfe-invoice.

*" Início Diogo - 21/08/2008
            CLEAR e_nfedata.

            MOVE:
                sy-mandt          TO e_nfedata-mandt,
                wk_header-docnum  TO e_nfedata-docnum,
                '999998'          TO e_nfedata-itmnum,
                '00'              TO e_nfedata-seqnum,
                v_dtvencimento    TO e_nfedata-ztexto.

* Atualizar/Criar data da fatura no XML
            APPEND e_nfedata TO i_invoice_date.
            CLEAR e_nfedata.
          ENDIF.

*" Fim Diogo - 21/08/2008
        ENDLOOP.
      ENDIF.

* Atualizar/Criar data da fatura no XML
      MODIFY zvxlnfedata FROM TABLE i_invoice_date.
      FREE i_invoice_date.

    ELSE.

*   Pagamento Parcelado
      CALL FUNCTION 'SD_PRINT_TERMS_OF_PAYMENT'
        EXPORTING
          bldat                        = w_data
          budat                        = w_data
          cpudt                        = w_data
          language                     = 'P'
          terms_of_payment             = w_zterm
          country                      = 'BR'
        TABLES
          top_text                     = i_top_text
* <<< Inclusão Valdenilson Pina 09/09/2008
        EXCEPTIONS
          terms_of_payment_not_in_t052 = 1
          OTHERS                       = 2.
* <<< Inclusão Valdenilson Pina 09/09/2008

      IF sy-subrc IS INITIAL.

        REFRESH i_invoice_date.

        SORT i_top_text BY hdatum DESCENDING.

        READ TABLE i_top_text INTO e_top_text INDEX 1.

        IF sy-subrc EQ 0.
*       Vencimento
          WRITE  e_top_text-hdatum TO v_dtvencimento.
          APPEND v_dtvencimento TO w_danfe-invoice.
        ENDIF.

*" Início Diogo - 21/08/2008
        CLEAR e_nfedata.

        MOVE:
            sy-mandt          TO e_nfedata-mandt,
            wk_header-docnum  TO e_nfedata-docnum,
            '999998'          TO e_nfedata-itmnum,
            '00'              TO e_nfedata-seqnum,
            v_dtvencimento    TO e_nfedata-ztexto.

* Atualizar/Criar data da fatura no XML
        MODIFY zvxlnfedata FROM e_nfedata.
        CLEAR e_nfedata.
      ENDIF.

*" Fim Diogo - 21/08/2008
    ENDIF.
*********
*" Fim Diogo - 25/08/2008


*" Início Diogo - 20/08/2008
  ELSE.

    DATA w_date_invoice TYPE zvxlnfedata-ztexto.

* Buscar o texto da Natureza da Operação (CFOP)
    CLEAR w_date_invoice.
    SELECT SINGLE ztexto
      FROM zvxlnfedata
      INTO w_date_invoice
      WHERE docnum EQ wk_header-docnum AND
            itmnum EQ '999998'         AND
            seqnum EQ '00'.

    IF sy-subrc IS INITIAL.

      CONCATENATE w_date_invoice+6(2) '.'
                  w_date_invoice+4(2) '.'
                  w_date_invoice(4) INTO v_dtvencimento.

      APPEND v_dtvencimento TO w_danfe-invoice.

      FREE w_date_invoice.

    ENDIF.

  ENDIF.
*" Fim Diogo - 20/08/2008

ENDFORM.                    " F_SELECT_INVOICE_DATA
***********************************************************************
FORM print_nota_fiscal.

  CLEAR:    j_1bprnfhd,                "document header
            j_1bprnfis,                "issuer data
            j_1bprnffa,                "fatura data
            j_1bprnfli,                "line item data
            j_1bprnfst,                "subtotals across pages
            j_1bprnftr,                "carrier data
            j_1bprnfre,                "bill-to party data
            j_1bprnfrg,                "payer data
            j_1bprnftx,                "texts
            j_1bprnfde,                "destination data
            zsprnfauxi.                "other Nf components fields

*----------------------------------------------------------------------*
*    Get order number for item                                         *
*----------------------------------------------------------------------*
  READ TABLE wk_item INDEX 1.
  MOVE wk_item-refkey TO key_vbrk.
  CLEAR: w_piscofins_value,                                 "RFS072005
         w_piscofins_msg.                                   "RFS072005
  SELECT SINGLE * FROM vbrk
         WHERE  vbeln       = key_vbrk-vbeln.
  IF sy-subrc <> 0.
    CLEAR vbrk.
*-------------------> Begin of code "CVS190698
  ELSE.
*** Flags existence of the following discounts: ZBDF, ZPRO, ZDAM
*** First ZBDF
    CLEAR: zsprnfauxi-zbdf_cont, zsprnfauxi-zpro_cont,
           zsprnfauxi-zdam_cont, value.
    SELECT * FROM konv WHERE knumv EQ vbrk-knumv AND kschl EQ 'ZBDF'.
      value = value + konv-kbetr.
    ENDSELECT.
    IF sy-subrc NE 0. CLEAR value. ENDIF.
    IF value NE 0.
      MOVE text-i00 TO zsprnfauxi-observ.
      MOVE 'X' TO zsprnfauxi-zbdf_cont.
    ENDIF.
*** Then ZPRO
    SELECT * UP TO 1 ROWS FROM konv
      WHERE knumv EQ vbrk-knumv
        AND kschl EQ 'ZPRO'
        AND kbetr NE 0.
    ENDSELECT.
    IF sy-subrc EQ 0. MOVE 'X' TO zsprnfauxi-zpro_cont. ENDIF.
*** Then ZDAM
    SELECT * UP TO 1 ROWS FROM konv
      WHERE knumv EQ vbrk-knumv
        AND kschl EQ 'ZDAM'
        AND kbetr NE 0.
    ENDSELECT.
    IF sy-subrc EQ 0. MOVE 'X' TO zsprnfauxi-zdam_cont. ENDIF.
*-------------------> End of code "CVS190698
*
* RFS072005 begin of insertion
    CLEAR *j_1bnfdoc-docdat.
    CLEAR w_continue.
    SELECT SINGLE docdat INTO *j_1bnfdoc-docdat
         FROM *j_1bnfdoc
         WHERE docnum = wk_docnum.
    SELECT SINGLE zbegdat INTO zpisconfiszf-zbegdat
         FROM zpisconfiszf
         CLIENT SPECIFIED
         WHERE mandt EQ sy-mandt.
    IF sy-subrc EQ 0
    AND zpisconfiszf-zbegdat LE *j_1bnfdoc-docdat.
      SELECT * FROM konv
           WHERE knumv EQ vbrk-knumv.
        CHECK konv-kschl EQ 'ZPS1'
        OR    konv-kschl EQ 'ZPF1'
        OR    konv-kschl EQ 'ZCS1'
        OR    konv-kschl EQ 'ZCF1'
        OR    konv-kschl EQ 'ZPS2'
        OR    konv-kschl EQ 'ZCS2'.
        MOVE 'X' TO w_continue.
        EXIT.
      ENDSELECT.
      IF w_continue EQ 'X'.
        SELECT kwert INTO konv-kwert FROM konv
             WHERE knumv EQ vbrk-knumv AND kschl EQ 'ZCZF'.
          w_piscofins_value = w_piscofins_value + konv-kwert.
        ENDSELECT.
        SELECT kwert INTO konv-kwert FROM konv
             WHERE knumv EQ vbrk-knumv AND kschl EQ 'ZPZF'.
          w_piscofins_value = w_piscofins_value + konv-kwert.
        ENDSELECT.
        IF w_piscofins_value EQ 0.
          SELECT matnr werks INTO (vbrp-matnr, vbrp-werks)
                        FROM vbrp
                        WHERE vbeln = key_vbrk-vbeln.
            SELECT SINGLE steuc INTO marc-steuc FROM marc
                 WHERE matnr = vbrp-matnr
                 AND   werks = vbrp-werks.
            IF sy-subrc = 0.
*
*** Início de alteração Denis Nakamoto/HP - 03/05/2007
* Adaptação para o KLD, onde não será mais necessário usar esta tabela
*              select datbi into a820-datbi up to 1 rows from a820
*                                 where kappl     eq 'V'          and
*                                       kschl     eq 'ZCOF'       and
*                                       zzj_1bnbm eq marc-steuc   and
*                                       datbi     ge sy-datum     and
*                                       datab     le sy-datum.
*              endselect.
*              if sy-subrc eq 0.
*                move 'X' to w_piscofins_msg.
*              else.
*                select datbi into a820-datbi up to 1 rows from a820
*                                   where kappl     eq 'V'          and
*                                         kschl     eq 'ZPIS'       and
*                                         zzj_1bnbm eq marc-steuc   and
*                                         datbi     ge sy-datum     and
*                                         datab     le sy-datum.
*                endselect.
*                if sy-subrc eq 0.
*                  move 'X' to w_piscofins_msg.
*                endif.
*              endif.
*** Fim de alteração Denis Nakamoto/HP - 03/05/2007
*
            ENDIF.
          ENDSELECT.
        ENDIF.
      ENDIF.
    ENDIF.
* RFS072005 end of insertion
*
  ENDIF.

  SELECT * FROM vbrp
                     WHERE vbeln = key_vbrk-vbeln.
    MOVE vbrp-aubel TO zsprnfauxi-numped.
    OVERLAY zsprnfauxi-numped WITH '0' ONLY ' '.
    EXIT.
  ENDSELECT.
  IF sy-subrc <> 0.
    CLEAR vbrp.
  ENDIF.
  zsprnfauxi-proctype = proctype.

*----------------------------------------------------------------------*
*    Calculate volume total (m3) for NF (all itens)                    *
*----------------------------------------------------------------------*

  CALL FUNCTION 'Z_GET_NF_WEIGHTS_AND_VOLUMES'
       EXPORTING
            docnum                = wk_docnum
*>------------>Begin of insertion JUP030698
            voleh                 = space
            gewei                 = 'KG'
*>------------>End   of Insertion JUP030698
       TABLES
            item_data             = t_zvimatdata
       EXCEPTIONS
            document_not_found    = 1
            item_not_found        = 2
            values_not_calculated = 3
            other                 = 4
            OTHERS                = 5.
*>------------>Begin of insertion RFS151198
  w_womatnr = 1.
  LOOP AT t_zvimatdata WHERE docnum = wk_docnum.
    IF t_zvimatdata-itmnum NE 0.
      w_womatnr = 0.
    ENDIF.
  ENDLOOP.
*>------------>End   of Insertion RFS151198
* loop at t_zvimatdata where bukrs  = wk_header-bukrs and
  LOOP AT t_zvimatdata WHERE docnum = wk_docnum AND
                             itmnum = 0.
    zsprnfauxi-volum = t_zvimatdata-volumh.
  ENDLOOP.
*> ---------------> Begin of inserted code CVS230698
*----------------------------------------------------------------------*
* Check export document.
*----------------------------------------------------------------------*
  CLEAR: w_auart, vbak-kunnr.                               "RFS022002

  SELECT SINGLE * FROM vbak WHERE vbeln EQ vbrp-aubel.

  IF sy-subrc NE 0.
    SELECT vbeln INTO lips-vbeln
    FROM lips
    UP TO 1 ROWS
    WHERE vgbel EQ vbrp-aubel.

    ENDSELECT.

    SELECT SINGLE kuniv INTO vbak-kunnr
    FROM likp
    WHERE vbeln EQ lips-vbeln.

  ENDIF.

  IF vbak-kunnr NE space.
    SELECT SINGLE regio INTO w_regio FROM kna1 WHERE kunnr EQ vbak-kunnr.

    IF w_regio NE 'BR'.
      PERFORM fill_f_lips.                                  "RFS022002
    ENDIF.
  ENDIF.

  SELECT SINGLE * FROM vbak WHERE vbeln EQ vbrp-aubel.

  IF sy-subrc EQ 0.
    w_auart = vbak-auart.                                   "RFS022002
*    IF w_auart = 'ZICS'. " normal exports                     "RFS022002
*      PERFORM fill_f_lips.                                  "RFS022002
*    ENDIF.                                                  "RFS022002
    SELECT SINGLE regio INTO w_regio FROM kna1 WHERE kunnr EQ vbak-kunnr.
    IF w_regio NE 'BR'.
      PERFORM fill_f_lips.                                  "RFS022002
    ENDIF.
*
* Inicio - Diogo A Oliveira - 09/08/08 - Ler KNVI p/msg ZF
    CLEAR knvi-taxkd.
    SELECT taxkd UP TO 1 ROWS
      INTO knvi-taxkd FROM knvi WHERE kunnr EQ vbak-kunnr.
    ENDSELECT.
* Fim - Diogo A Oliveira - 09/08/08 - Ler KNVI p/msg ZF

* BEGIN OF CCV102005
    IF w_auart EQ 'ZAP1'
     AND proctype EQ 'ST'.
      SELECT SINGLE ebeln
        INTO ekko-ebeln
        FROM ekko
        WHERE ebeln EQ vbak-bstnk.
      zsprnfauxi-bstnk = vbak-bstnk.
      IF sy-subrc EQ 0.
        SELECT SINGLE vbeln
           INTO lips-vbeln
           FROM lips
           WHERE vgbel EQ vbak-bstnk.
        IF sy-subrc EQ 0.
        ENDIF.
      ELSE.
        MESSAGE e001 WITH text-e01.
      ENDIF.
    ENDIF.
* END OF CCV102005
    SELECT SINGLE * FROM kna1 WHERE kunnr EQ vbak-kunnr.
    IF sy-subrc EQ 0.
*>------------>Begin of Deletion  JUP300698
*     select single * from t001 where bukrs eq j_1bprnfhd-bukrs.
*>------------>End   of Deletion  JUP300698
*>------------>Begin of Insertion JUP300698
      SELECT SINGLE * FROM t001 WHERE bukrs EQ wk_header-bukrs.
*>------------>End   of Insertion JUP300698
    ENDIF.
*-------------------> Begin of code "CS040200
    CLEAR vbep.
    SELECT tddat wadat edatu
       INTO (vbep-tddat, vbep-wadat, vbep-edatu)
       UP TO 1 ROWS FROM vbep
       WHERE vbeln = vbak-vbeln
         AND lfrel NE space
         AND bmeng > 0.
      WRITE vbep-tddat TO zsprnfauxi-ztddat.
      WRITE vbep-wadat TO zsprnfauxi-zwadat.
      WRITE vbep-edatu TO zsprnfauxi-zedatu.
    ENDSELECT.
    IF vbep-edatu GT vbak-vdatu. "Imprimir > entre requested e scheduled
      WRITE vbep-edatu TO zsprnfauxi-dt_entrega.
    ELSE.
      WRITE vbak-vdatu TO zsprnfauxi-dt_entrega.
    ENDIF.
*- Print goods receiving hours
    SELECT wanid INTO knva-wanid UP TO 1 ROWS FROM knva
      WHERE kunnr EQ vbak-kunnr.
    ENDSELECT.
    SELECT SINGLE vtext INTO tvwat-vtext FROM tvwat
      WHERE spras EQ 'P'
        AND wanid EQ knva-wanid.
    WRITE tvwat-vtext TO zsprnfauxi-hora_receb.
*-------------------> End of code   "CS040200
*{ Insertion ICSTO developments
  ELSEIF proctype EQ 'IS'.
* ICSTO header
    PERFORM read_icsto USING vbrp-aubel.
    PERFORM read_po_history.
    PERFORM construct_belegflub.
    if_lines> query.
    PERFORM read_delivery_note.
  ENDIF.
  SELECT SINGLE * FROM kna1 WHERE kunnr EQ vbrk-kunag.
  IF sy-subrc EQ 0.
    SELECT SINGLE * FROM t001 WHERE bukrs EQ wk_header-bukrs.
  ENDIF.
*- Print goods receiving hours FROM SHIP-TO!
  READ TABLE f_likp INDEX 1.
  SELECT wanid UP TO 1 ROWS FROM knva INTO knva-wanid
              WHERE kunnr EQ f_likp-kunnr.
    SELECT SINGLE vtext INTO tvwat-vtext FROM tvwat
          WHERE spras EQ 'P'
            AND wanid EQ knva-wanid.
    IF sy-subrc EQ 0.
      WRITE tvwat-vtext TO zsprnfauxi-hora_receb.
      EXIT.
    ELSE.
      SELECT SINGLE vtext INTO tvwat-vtext FROM tvwat
            WHERE wanid EQ knva-wanid.
      IF sy-subrc EQ 0.
        WRITE tvwat-vtext TO zsprnfauxi-hora_receb.
        EXIT.
      ENDIF.
    ENDIF.
  ENDSELECT.
  zsprnfauxi-ztddat = f_likp-tddat.    "Planned Transp. Date
  zsprnfauxi-zwadat = f_likp-wadat.    "Planned Goods Issue Date
* Read from EKPO the requested delivery date
  DATA: max_eindt LIKE eket-eindt.
  LOOP AT f_eket.
    IF f_eket-eindt GE max_eindt.
      max_eindt = f_eket-eindt.
    ENDIF.
    zsprnfauxi-zedatu = f_eket-bedat.    "Scheduled date for delivery
  ENDLOOP.
  IF f_likp-lfdat GT max_eindt.
    WRITE f_likp-lfdat TO zsprnfauxi-dt_entrega.
  ELSE.
    WRITE max_eindt    TO zsprnfauxi-dt_entrega.
  ENDIF.
  CLEAR: tvlk, tvak.
  SELECT SINGLE * FROM tvlk WHERE lfart EQ f_likp-lfart.
  SELECT SINGLE * FROM tvak WHERE auart EQ tvlk-daart.
  IF sy-subrc EQ 0.
    MOVE-CORRESPONDING tvak TO vbak.
  ELSE.
    MOVE: 'C'    TO vbak-vbtyp,
          'ZDL1' TO  vbak-auart.
  ENDIF.
* Add pallet weight to J_1BPRNFHD-BRGEW. Pallets are not NF relevant
* so that we need Delivery Note Information
* RFS022002 befin of change
*  data: lief_gewe_tot like j_1bprnfhd-brgew.
*  clear lief_gewe_tot.
*  loop at f_likp.
*   call function 'UNIT_CONVERSION_SIMPLE'
*      exporting
*        input      = f_likp-btgew
*        unit_in    = f_likp-gewei
*        unit_out   = 'KG'
*      importing
*        output     =  f_likp-btgew.
*    add f_likp-btgew to lief_gewe_tot.
*  endloop.
* RFS022002 end of change
*}
ENDIF.
IF t001-land1 NE kna1-land1.
  zfac_export = 'X'.
ENDIF.
*> ---------------> End of inserted code CVS230698

*----------------------------------------------------------------------*
*    read tax types into internal buffer table                         *
*----------------------------------------------------------------------*

SELECT * FROM j_1baj INTO TABLE tax_types ORDER BY PRIMARY KEY.

*----------------------------------------------------------------------*
*    fill header data into communication structure                     *
*----------------------------------------------------------------------*

MOVE-CORRESPONDING wk_header TO j_1bprnfhd.
* select form for only manaus
*{ ICSTO addition
* RFS022002 begin of change
* if proctype eq 'IS' and lief_gewe_tot gt 0.
*data: w_regio type kna1-regio.
SELECT SINGLE regio INTO w_regio FROM kna1 WHERE kunnr EQ vbak-kunnr.


*IF proctype EQ 'IS' OR w_auart = 'ZICS'. " ICSTO or normal export
IF proctype EQ 'IS' OR w_regio NE 'BR'. " ICSTO or normal export
  PERFORM get_pallets_weight.
  IF w_pallets_brgew GT 0.
*   j_1bprnfhd-brgew = lief_gewe_tot.
    j_1bprnfhd-brgew = j_1bprnfhd-brgew + w_pallets_brgew.
  ENDIF.
* RFS022002 end   of change
ENDIF.
*}
*>------------>Begin of insertion RFS151198
IF w_womatnr = 0.
*>------------>End   of Insertion RFS151198
*>------------>Begin of insertion JUP030698
*   j_1bprnfhd-brgew = t_zvimatdata-brgewh.
*   j_1bprnfhd-ntgew = t_zvimatdata-ntgewh.
*>------------>Begin of insertion RFS151198
ENDIF.
*>------------>End   of Insertion RFS151198
j_1bprnfhd-gewei = 'KG'.
*>------------>End   of Insertion JUP030698
CASE j_1bprnfhd-shpunt.
*  WHEN 'CS '.                     "CSL_WELLABR_LA20050224
  WHEN 'CS' OR 'EA'.              "CSL_WELLABR_LA20050224
    zsprnfauxi-shpunt = 'CX'.
  WHEN 'PAL'.
    zsprnfauxi-shpunt = 'UN'.
  WHEN 'C31'.
    zsprnfauxi-shpunt = 'UN'.
  WHEN 'X8'.
    zsprnfauxi-shpunt = 'UN'.
  WHEN 'IT'.                      "CSL_WELLABR_RG20050218
    zsprnfauxi-shpunt = 'CX'.     "CSL_WELLABR_RG20050218
    j_1bprnfhd-anzpk  = wk_totcs. "CSL_WELLABR_RG20050218
  WHEN OTHERS.
*    zsprnfauxi-shpunt = j_1bprnfhd-shpunt.  "CSL_WELLABR_LA20050224
    zsprnfauxi-shpunt = 'CX'.     "CSL_WELLABR_LA20050224
ENDCASE.

******** BEGIN INCLUDE RCS032000 - NEW CFOP LAW IN SAO PAULO STATE
SELECT SINGLE * FROM j_1bbranch
  WHERE bukrs = j_1bprnfhd-bukrs
    AND branch = j_1bprnfhd-branch.
SELECT SINGLE regio INTO issuer_region FROM sadr
  WHERE adrnr = j_1bbranch-adrnr AND natio EQ space.
* RFS022003 begin of insertion
CLEAR zvbrmsgnfh.
SELECT SINGLE * FROM zvbrmsgnfh
  WHERE bukrs = j_1bprnfhd-bukrs
    AND branch = j_1bprnfhd-branch
    AND j_1bform = wk_header-form.
IF sy-subrc NE 0.
  CLEAR zsprnfauxi-char80.
ELSE.
  zsprnfauxi-char80 = zvbrmsgnfh-char80.
ENDIF.
* RFS022003 end   of insertion
******** END INCLUDE RCS032000 - NEW CFOP LAW IN SAO PAULO STATE

*... fill header CFOP .................................................*

*>-------> Begin of inserted code CVS060698
index = 0.
LOOP AT wk_item.
  index = index + 1.
  IF index = 1.
*     move wk_item-cfop(3) to zsprnfauxi-subcfop(3).          "RFS112002
    MOVE wk_item-cfop(4) TO zsprnfauxi-subcfop(4).          "RFS112002
******** BEGIN INCLUDE RCS032000 - NEW CFOP LAW IN SAO PAULO STATE
*     if issuer_region = 'SP' and wk_item-cfop+1(3) = '991'.  "RFS112002
*       zsprnfauxi-subcfop+3(2) = '.1'.                       "RFS112002
*     endif.                                                  "RFS112002
*     if issuer_region = 'SP' and wk_item-cfop+1(3) = '999'.  "RFS112002
*       zsprnfauxi-subcfop+3(2) = '.9'.                       "RFS112002
*     endif.                                                  "RFS112002
******** END INCLUDE RCS032000 - NEW CFOP LAW IN SAO PAULO STATE
  ENDIF.
*   if wk_item-cfop(3) ne zsprnfauxi-subcfop(3).              "RFS112002
*     zsprnfauxi-subcfop+3(1) = '/'.                          "RFS112002
*     zsprnfauxi-subcfop+4(3) = wk_item-cfop.                 "RFS112002
  IF wk_item-cfop(4) NE zsprnfauxi-subcfop(4).              "RFS112002
    zsprnfauxi-subcfop+4(1) = '/'.                          "RFS112002
*ZSPRNFAUXI-SUBCFOP+5(4) = WK_ITEM-CFOP. "RFS112002 CLS_UPG46RFH20030121
    zsprnfauxi-subcfop+5(4) = wk_item-cfop.      "CLS_UPG46RFH20030121
    EXIT.
  ENDIF.
ENDLOOP.
*>-------> End of inserted code CVS060698

* RFS012004 begin of deletion
* READ TABLE WK_ITEM INDEX 1.
* J_1BPRNFHD-CFOP = WK_ITEM-CFOP.
* LOOP AT WK_ITEM FROM 2.
*   CFOP_POSITION = 0.
*   WHILE CFOP_POSITION < 5
*                 VARY CFOP_CHARACTER1 FROM J_1BPRNFHD-CFOP(1)
*                                      NEXT J_1BPRNFHD-CFOP+1(1)
*                 VARY CFOP_CHARACTER2 FROM WK_ITEM-CFOP(1)
*                                      NEXT WK_ITEM-CFOP+1(1).
*     IF CFOP_CHARACTER1 <> CFOP_CHARACTER2.
*       EXIT.
*     ENDIF.
*     CFOP_POSITION = CFOP_POSITION + 1.
*   ENDWHILE.
*   IF CFOP_POSITION <> 5.
*     MOVE '00000' TO J_1BPRNFHD-CFOP+CFOP_POSITION.
*     MOVE '1' TO  J_1BPRNFHD-CFOP+4.
*   ENDIF.
* ENDLOOP.
* SELECT SINGLE * FROM J_1BAGT WHERE SPRAS = NAST-SPRAS
*                                AND CFOP  = J_1BPRNFHD-CFOP.
* J_1BPRNFHD-CFOP_TEXT = J_1BAGT-CFOTXT.
* RFS012004 end of deletion

*----------------------------------------------------------------------*
*    determine issuer and destination (only for test)                  *
*----------------------------------------------------------------------*
IF wk_header-direct = '1'   AND
   wk_header-entrad = ' '.
  issuer-partner_type      = wk_header-partyp.
  issuer-partner_id        = wk_header-parid.
  issuer-partner_function  = wk_header-parvw.
  destination-partner_type = 'B'.
  destination-partner_id   = wk_header-bukrs.
  destination-partner_id+4 = wk_header-branch.
ELSE.
  issuer-partner_type          = 'B'.
  issuer-partner_id            = wk_header-bukrs.
  issuer-partner_id+4          = wk_header-branch.
  destination-partner_type     = wk_header-partyp.
  destination-partner_id       = wk_header-parid.
  destination-partner_function = wk_header-parvw.
ENDIF.

*----------------------------------------------------------------------*
*    read branch data (issuer)                                         *
*----------------------------------------------------------------------*

CLEAR: j_1binnad, ship_from_partner, ship_to_partner.

CALL FUNCTION 'J_1B_NF_PARTNER_READ'
  EXPORTING
    partner_type           = issuer-partner_type
    partner_id             = issuer-partner_id
    partner_function       = issuer-partner_function
    doc_number             = wk_header-docnum
  IMPORTING
    parnad                 = j_1binnad
  EXCEPTIONS
    partner_not_found      = 1
    partner_type_not_found = 2
    OTHERS                 = 3.
MOVE-CORRESPONDING j_1binnad TO ship_from_partner.
*... check the sy-subrc ...............................................*
IF submi_pa = space.
*  PERFORM check_error.
ELSE.
  IF sy-subrc NE 0.
    retcode = sy-subrc.
*     PERFORM PCLOG USING 'E' TEXT-010 ISSUER-PARTNER_ID SPACE SPACE
*                                      SPACE.
    "No issuer found
  ENDIF.
ENDIF.
CHECK retcode IS INITIAL.

CALL FUNCTION 'J_1B_NF_PARTNER_READ'
  EXPORTING
    partner_type           = destination-partner_type
    partner_id             = destination-partner_id
    partner_function       = destination-partner_function
    doc_number             = wk_header-docnum
  IMPORTING
    parnad                 = ship_to_partner
  EXCEPTIONS
    partner_not_found      = 1
    partner_type_not_found = 2
    OTHERS                 = 3.
*... check the sy-subrc ...............................................*
IF submi_pa = space.
*  PERFORM check_error.
ELSE.
  IF sy-subrc NE 0.
    retcode = sy-subrc.
*     PERFORM PCLOG USING 'E' TEXT-010 ISSUER-PARTNER_ID SPACE SPACE
*                                      SPACE.
    "No issuer found
  ENDIF.
ENDIF.

CHECK retcode IS INITIAL.
* Caution : the field J_1BPRNFIS is used to Ship-to.
*   move-corresponding j_1binnad to j_1bprnfis.
shipfrom = ship_from_partner-regio.
*
* RFS012004 begin insertion
DATA: version LIKE j_1bagn-version.
CLEAR version.
CALL FUNCTION 'J_1B_CFOP_GET_VERSION'
  EXPORTING
    land1             = 'BR'
    region            = shipfrom
    date              = sy-datum
  IMPORTING
    version           = version
  EXCEPTIONS
    date_missing      = 01
    version_not_found = 02.
*
* Início alteração Aline Marinho - 31/07/2006
***clear j_1bcfopver.
***select single * from j_1bcfopver where version = version.
*
***read table wk_item index 1.
***j_1bprnfhd-cfop = wk_item-cfop.
***loop at wk_item from 2.
***  cfop_position = 0.
***  while cfop_position < 5
***                vary cfop_character1 from j_1bprnfhd-cfop(1)
***                                     next j_1bprnfhd-cfop+1(1)
***                vary cfop_character2 from wk_item-cfop(1)
***                                     next wk_item-cfop+1(1).
***    if cfop_character1 <> cfop_character2.
***      exit.
***    endif.
***    cfop_position = cfop_position + 1.
***  endwhile.
***  data: length type i.
***  if cfop_position <> 5.
***    move '00000' to j_1bprnfhd-cfop+cfop_position.
***    clear length.
***    compute length = strlen( j_1bcfopver-cfop_txtdef ).
***    case length.
***      when 1.
***        move j_1bcfopver-cfop_txtdef to  j_1bprnfhd-cfop+4.
***      when 2.
***        move j_1bcfopver-cfop_txtdef to  j_1bprnfhd-cfop+3.
***      when others.
***        j_1bprnfhd-cfop = wk_item-cfop.
***    endcase.
***  endif.
***endloop.
*
***clear j_1bagnt.
***select single * from j_1bagnt where spras   = nast-spras
***                                and version = version
***                                and cfop    = j_1bprnfhd-cfop.
***if  j_1bagnt-cfotxt is initial
***and j_1bprnfhd-cfop ne wk_item-cfop.
***  select single * from j_1bagnt where spras   = nast-spras
***                                  and version = version
***                                  and cfop    = wk_item-cfop.
***endif.
***j_1bprnfhd-cfop_text = j_1bagnt-cfotxt.
* Fim alteração Aline Marinho - 31/07/06
* Início alteração Aline Marinho - 31/07/06
LOOP AT wk_item.
  SELECT SINGLE * FROM j_1bagnt WHERE spras   = nast-spras
                                  AND version = version
                                  AND cfop    = wk_item-cfop.
  t_desc_cfop-text = j_1bagnt-cfotxt.
  COLLECT t_desc_cfop.
ENDLOOP.
READ TABLE t_desc_cfop INDEX 1.
j_1bprnfhd-cfop_text = t_desc_cfop-text.
READ TABLE t_desc_cfop INDEX 2.
IF sy-subrc IS INITIAL.
  v_cfop_text = t_desc_cfop-text.
ENDIF.
* Fim alteração Aline Marinho - 31/07/06

* RFS012004 end insertion
*
IF wk_header_add-icstval NE 0.
* RFS012003 begin of change
*   select single * from  zssubstrib
  SELECT SINGLE * FROM  j_1bstast
         WHERE  bukrs       = wk_header-bukrs
         AND    branch      = wk_header-branch
*          and    regio       = kna1-regio.
         AND    txreg       = kna1-regio.
  IF sy-subrc EQ 0.
*     zsprnfauxi-stains = zssubstrib-stains.
    zsprnfauxi-stains = j_1bstast-state_insc.
* RFS012003 end   of change
  ENDIF.
ENDIF.

CONVERT DATE sy-datum INTO INVERTED-DATE inverted_datum.
CLEAR zsprnfauxi-conv24.
LOOP AT wk_item.
  SELECT * FROM j_1btxic2
              WHERE land1     EQ ship_from_partner-land1
                AND shipfrom  EQ ship_from_partner-regio
                AND shipto    EQ ship_to_partner-regio
                AND matnr     EQ wk_item-matnr
                AND validfrom GE inverted_datum
                AND validto   LE inverted_datum.
  ENDSELECT.
  IF sy-subrc EQ 0.
*** Início de alteração Denis Nakamoto/HP - 03/05/2007
*    if j_1btxic2-conv24 eq 'X'.
*      zsprnfauxi-conv24 = 'X'.
*      exit.
*    endif.
*** Fim de alteração Denis Nakamoto/HP - 03/05/2007
  ENDIF.
ENDLOOP.

*----------------------------------------------------------------------*
*    read destination data                                             *
*----------------------------------------------------------------------*

CLEAR j_1binnad.

CALL FUNCTION 'J_1B_NF_PARTNER_READ'
  EXPORTING
    partner_type           = destination-partner_type
    partner_id             = destination-partner_id
    partner_function       = destination-partner_function
    doc_number             = wk_header-docnum
  IMPORTING
    parnad                 = j_1binnad
  EXCEPTIONS
    partner_not_found      = 1
    partner_type_not_found = 2
    OTHERS                 = 3.
*... check the sy-subrc ...............................................*
IF submi_pa = space.
*  PERFORM check_error.
ELSE.
  IF sy-subrc NE 0.
    retcode = sy-subrc.
    PERFORM pclog USING 'E' text-011 destination-partner_id space
                                     space space.
    "No ship-to party found
  ENDIF.
ENDIF.
CHECK retcode IS INITIAL.

MOVE-CORRESPONDING j_1binnad TO j_1bprnfde.

SELECT SINGLE * FROM  knvv
       WHERE  kunnr       = destination-partner_id AND
              vkorg       = vbrk-vkorg AND
              vtweg       = vbrk-vtweg AND
              spart       = vbrk-spart.

IF sy-subrc NE 0.
  CLEAR: knvv.
ENDIF.

MOVE wk_header-docnum TO zsprnfauxi-docnum.
MOVE knvv-vkbur TO zsprnfauxi-vkbur.

*----------------------------------------------------------------------*
*   read payer data (if existing)
*----------------------------------------------------------------------*

READ TABLE wk_partner WITH KEY docnum = wk_header-docnum
                               parvw  = 'RG'.
IF sy-subrc = 0.
  CLEAR j_1binnad.

  CALL FUNCTION 'J_1B_NF_PARTNER_READ'
    EXPORTING
      partner_type           = wk_partner-partyp
      partner_id             = wk_partner-parid
      partner_function       = wk_partner-parvw
      doc_number             = wk_header-docnum
    IMPORTING
      parnad                 = j_1binnad
    EXCEPTIONS
      partner_not_found      = 1
      partner_type_not_found = 2
      OTHERS                 = 3.
  MOVE-CORRESPONDING j_1binnad TO j_1bprnfrg.

ENDIF.

*----------------------------------------------------------------------*
*   read bill-to party data (if existing)
*----------------------------------------------------------------------*

READ TABLE wk_partner WITH KEY docnum = wk_header-docnum
                               parvw  = 'RE'.
IF sy-subrc = 0.
  CLEAR j_1binnad.

  CALL FUNCTION 'J_1B_NF_PARTNER_READ'
    EXPORTING
      partner_type           = wk_partner-partyp
      partner_id             = wk_partner-parid
      partner_function       = wk_partner-parvw
      doc_number             = wk_header-docnum
    IMPORTING
      parnad                 = j_1binnad
    EXCEPTIONS
      partner_not_found      = 1
      partner_type_not_found = 2
      OTHERS                 = 3.
  MOVE-CORRESPONDING j_1binnad TO j_1bprnfre.

ENDIF.

*----------------------------------------------------------------------*
*   read ship-to party data (if existing)
*----------------------------------------------------------------------*

READ TABLE wk_partner WITH KEY docnum = wk_header-docnum
                               parvw  = 'WE'.
IF sy-subrc = 0.
  CLEAR j_1binnad.

  CALL FUNCTION 'J_1B_NF_PARTNER_READ'
    EXPORTING
      partner_type           = wk_partner-partyp
      partner_id             = wk_partner-parid
      partner_function       = wk_partner-parvw
      doc_number             = wk_header-docnum
    IMPORTING
      parnad                 = j_1binnad
    EXCEPTIONS
      partner_not_found      = 1
      partner_type_not_found = 2
      OTHERS                 = 3.
  MOVE-CORRESPONDING j_1binnad TO j_1bprnfis.
ELSE.
  MOVE j_1bprnfde TO j_1bprnfis.
ENDIF.

*----------------------------------------------------------------------*
*    read fatura data if the Nota Fiscal is a Nota Fiscal Fatura       *
*----------------------------------------------------------------------*
IF wk_header-fatura = 'X'.

* RFS062003 begin of insertion
  DATA: wl_ndias1 LIKE ndias,
        wl_ndias2 LIKE ndias.
  CLEAR: zsprnfauxi-prazod1,
         zsprnfauxi-prazod2,
         zsprnfauxi-percdesc1,
         zsprnfauxi-percdesc2,
         zsprnfauxi-valdesc1,
         zsprnfauxi-valdesc2,
         zsprnfauxi-netwodesc1,
         zsprnfauxi-netwodesc2,
         zsprnfauxi-daysdesc1,
         zsprnfauxi-daysdesc2,
         zsprnfauxi-daysdesc3,
         wl_ndias1,
         wl_ndias2.
* RFS062003 end of insertion
  IF wk_header-zterm NE space.
* Início alteração Aline Marinho - 01/08/06
    SELECT kposn kbetr
     FROM konv
      INTO TABLE t_konv
      WHERE knumv EQ vbrk-knumv AND
     kschl EQ c_zant AND
    kbetr NE 0.
    DESCRIBE TABLE t_konv LINES v_lines.
* Fim alteração Aline Marinho - 01/08/06
    SELECT * FROM t052 WHERE zterm = wk_header-zterm ORDER BY PRIMARY KEY.
* RFS062003 begin of insertion
      IF NOT t052-ztag1 IS INITIAL.
        wl_ndias1 = t052-ztag1.
*       wl_prazo = wk_header-pstdat + t052-ztag1.
        wl_prazo = j_1bprnfhd-zfbdt + t052-ztag1.  "Diogo Oliveira 18/08/2008
        WRITE wl_prazo TO zsprnfauxi-prazod1.
        zsprnfauxi-percdesc1  = t052-zprz1.
        zsprnfauxi-daysdesc1  = t052-ztag1.
      ENDIF.
      IF NOT t052-ztag2 IS INITIAL.
        wl_ndias2 = t052-ztag2.
*       wl_prazo = j_1bprnfhd-pstdat + t052-ztag2.
        wl_prazo = j_1bprnfhd-zfbdt + t052-ztag2.  "Diogo Oliveira 18/08/2008
        WRITE wl_prazo TO zsprnfauxi-prazod2.
        zsprnfauxi-percdesc2  = t052-zprz2.
        zsprnfauxi-daysdesc2  = t052-ztag2.
      ENDIF.
      zsprnfauxi-daysdesc3     = t052-ztag3.
* RFS062003 end of insertion
      ndias = t052-ztag1.
      IF t052-ztag2 > ndias.
        ndias = t052-ztag2.
      ENDIF.
      IF t052-ztag3 > ndias.
        ndias = t052-ztag3.
      ENDIF.
*       ZSPRNFAUXI-PRAZO1 = WK_HEADER-ZFBDT + NDIAS.
* Início alteração Aline Marinho - 01/08/06
      IF NOT v_lines IS INITIAL.
        SELECT SINGLE * FROM bkpf INTO bkpf
         WHERE bukrs EQ vbrk-bukrs
         AND awtyp EQ c_vbrk
        AND awkey EQ vbrk-vbeln.
        IF sy-subrc IS INITIAL.
          SELECT SINGLE zfbdt FROM bseg INTO v_zfbdt
           WHERE bukrs EQ bkpf-bukrs AND
            belnr EQ bkpf-belnr AND
           gjahr EQ bkpf-gjahr AND
          buzei EQ c_buzei.
          IF sy-subrc IS INITIAL.
            wk_header-zfbdt = v_zfbdt.
            v_imprime = c_imprime.
          ENDIF.
        ENDIF.
        zsprnfauxi-prazo1 = wk_header-zfbdt + ndias.
      ELSE.
        zsprnfauxi-prazo1 = j_1bprnfhd-pstdat + ndias.      "RCS290798
      ENDIF.
* Fim alteração Aline Marinho - 01/08/06
* Início alteração Aline Marinho - 01/08/06
*      zsprnfauxi-prazo1 = j_1bprnfhd-pstdat + ndias.        "RCS290798
* Fim alteração Aline Marinho - 01/08/06
*--->>> BEGIN RCS082002
      CLEAR zvbrpterm.                                      "RFS102003
* RFS102003 begin of change
*       SELECT SINGLE * FROM ZVBRZTERM WHERE ZTERM EQ VBRK-ZTERM.
      SELECT SINGLE * FROM zvbrpterm WHERE zterm EQ vbrk-zterm.
* RFS102003 end of change
      IF sy-subrc EQ 0
      AND zvbrpterm-duedate EQ 'X'.                         "RFS102003
* RFS062003 (fixed on 09/29/2003) begin of insertion
        IF NOT wl_ndias1 IS INITIAL.
          wl_prazo = vbrk-valdt + wl_ndias1.
          WRITE wl_prazo TO zsprnfauxi-prazod1.
        ENDIF.
        IF NOT wl_ndias2 IS INITIAL.
          wl_prazo = vbrk-valdt + wl_ndias2.
          WRITE wl_prazo TO zsprnfauxi-prazod2.
        ENDIF.
* RFS062003 (fixed on 09/29/2003) end   of insertion
* Início alteração Aline Marinho - 01/08/06
        IF NOT v_lines IS INITIAL.
          zsprnfauxi-prazo1 = wk_header-zfbdt + ndias.
        ELSE.
* Fim alteração Aline Marinho - 01/08/06
          zsprnfauxi-prazo1 = vbrk-valdt + ndias.
* Início alteração Aline Marinho - 01/08/06
        ENDIF.
* Fim alteração Aline Marinho - 01/08/06
      ENDIF.
*<<<--- END RCS082002
*--->>> BEGIN RCS012002
      IF NOT vbrk-vbeln IS INITIAL.
        SELECT * UP TO 1 ROWS FROM zwint_plan
          WHERE vkorg     EQ vbrk-vkorg
            AND zterm     EQ vbrk-zterm
            AND date_from LE vbrk-fkdat
            AND date_to   GE vbrk-fkdat.
        ENDSELECT.
        IF sy-subrc EQ 0.
* Início alteração Aline Marinho - 01/08/06
          IF NOT v_lines IS INITIAL.
            zsprnfauxi-prazo1 = wk_header-zfbdt + ndias.
          ELSE.
* Fim alteração Aline Marinho - 01/08/06
            zsprnfauxi-prazo1 = zwint_plan-zfbdt + ndias.
* Início alteração Aline Marinho - 01/08/06
          ENDIF.
* Fim alteração Aline Marinho - 01/08/06
        ENDIF.
      ENDIF.
*<<<--- END RCS012002
      EXIT.
    ENDSELECT.

    IF t052-ztagg > '00' AND t052-ztagg LT wk_header-zfbdt+6(2).
      SELECT * FROM t052 WHERE zterm =  wk_header-zterm
                         AND   ztagg GE wk_header-zfbdt+6(2)
                         ORDER BY PRIMARY KEY.
        EXIT.
      ENDSELECT.
    ENDIF.

    IF t052-xsplt = 'X'.             "holdback/retainage

      SELECT * FROM t052s INTO TABLE int_t052s WHERE zterm = wk_header-zterm
                                                        ORDER BY PRIMARY KEY.
      DESCRIBE TABLE int_t052s LINES t052slines.

      IF t052slines > 5.
        t052slines = 5.  "max. number of holdbacks/retainages printed on NF
      ENDIF.

      DO t052slines TIMES VARYING rate  FROM j_1bprnffa-ratpz1
                                        NEXT j_1bprnffa-ratpz2
                          VARYING text2 FROM j_1bprnffa-txt12
                                        NEXT j_1bprnffa-txt22
                          VARYING text3 FROM j_1bprnffa-txt13
                                        NEXT j_1bprnffa-txt23
                          VARYING text4 FROM j_1bprnffa-txt14
                                        NEXT j_1bprnffa-txt24
                          VARYING text1 FROM j_1bprnffa-txt11
                                        NEXT j_1bprnffa-txt21.

        READ TABLE int_t052s INDEX sy-index.
        rate = int_t052s-ratpz.
        SELECT SINGLE * FROM t052 WHERE zterm = int_t052s-ratzt
                                  AND   ztagg = '00'.
        CALL FUNCTION 'FI_TEXT_ZTERM'
          EXPORTING
            i_t052  = t052
          TABLES
            t_ztext = ztext.
        LOOP AT ztext.
          CASE sy-tabix.
            WHEN 1.
              text2 = ztext-text1.
            WHEN 2.
              text3 = ztext-text1.
            WHEN 3.
              text4 = ztext-text1.
            WHEN 4.
              text1 = ztext-text1.
          ENDCASE.
        ENDLOOP.
      ENDDO.
    ELSE.                            " t052-xsplt = ' '
      CALL FUNCTION 'FI_TEXT_ZTERM'
        EXPORTING
          i_t052  = t052
        TABLES
          t_ztext = ztext.

      LOOP AT ztext.
        CASE sy-tabix.
          WHEN 1.
            j_1bprnffa-txt02 = ztext-text1.
          WHEN 2.
            j_1bprnffa-txt03 = ztext-text1.
          WHEN 3.
            j_1bprnffa-txt04 = ztext-text1.
          WHEN 4.
            j_1bprnffa-txt01 = ztext-text1.
        ENDCASE.
      ENDLOOP.
    ENDIF.
  ENDIF.
* Next three lines were commented.      RCS231098
*   IF VBAK-VBTYP NE 'I' AND                                "CVS070798
*      ( NOT VBRK-BELNR IS INITIAL OR
*        PROCTYPE EQ 'WR' ).
  SELECT * FROM  j_1bnflin                                  "RCS231098
         WHERE  docnum = wk_item-docnum.                    "RCS231098
  ENDSELECT.                                                "RCS231098

  IF vbak-vbtyp NE 'I' AND           "Prom, Don, Samp   "RCS231098
     j_1bnflin-matkl NE 'PALETAS' AND"Pallets           "RCS231098
     vbrk-fkart NE 'ZFLB'            "STO               "RCS231098
*{ ICSTO development
 AND vbrk-fkart NE 'ZFZB'.
*}
    SELECT SINGLE * FROM  knb1
           WHERE  kunnr       = wk_header-parid
           AND    bukrs       = wk_header-bukrs.
    IF knb1-hbkid = ' '.
*         Pagamento em carteira
    ELSE.
      SELECT SINGLE * FROM  t012
             WHERE  bukrs       = wk_header-bukrs
             AND    hbkid       = knb1-hbkid.
      IF sy-subrc NE 0.
        CLEAR t012.
      ENDIF.
      SELECT SINGLE * FROM  bnka
             WHERE  banks       = t012-banks
             AND    bankl       = t012-bankl.
      IF sy-subrc = 0.
        zsprnfauxi-mpagto = bnka-banka.
      ENDIF.
    ENDIF.
  ELSE.
*     ZSPRNFAUXI-MPAGTO = 'BANCO'.                           "CVS100798C
    CLEAR zsprnfauxi-mpagto.                                "CVS100798
    CLEAR zsprnfauxi-prazo1.                                "CVS100798
  ENDIF.                                                    "CVS070798

ENDIF.

*----------------------------------------------------------------------*
*    read carrier data                                                 *
*----------------------------------------------------------------------*

IF wk_header-doctyp NE '2'.          "no carrier for Complementars

  READ TABLE wk_partner WITH KEY docnum = wk_header-docnum
                                 parvw  = 'SP'.
  IF sy-subrc = 0.

    CLEAR j_1binnad.
    CALL FUNCTION 'J_1B_NF_PARTNER_READ'
      EXPORTING
        partner_type           = wk_partner-partyp
        partner_id             = wk_partner-parid
        partner_function       = wk_partner-parvw
        doc_number             = wk_header-docnum
      IMPORTING
        parnad                 = j_1binnad
      EXCEPTIONS
        partner_not_found      = 1
        partner_type_not_found = 2
        OTHERS                 = 3.
    MOVE-CORRESPONDING j_1binnad TO j_1bprnftr.
  ENDIF.

ENDIF.                               "no carrier for Complementars

*----------------------------------------------------------------------*
*    read reference NF                                                 *
*----------------------------------------------------------------------*

IF j_1bprnfhd-docref <> space.
  SELECT SINGLE * FROM j_1bnfdoc INTO *j_1bnfdoc
           WHERE docnum = j_1bprnfhd-docref.
  j_1bprnfhd-nf_docref = *j_1bnfdoc-nfnum.
  j_1bprnfhd-nf_serref = *j_1bnfdoc-series.
  j_1bprnfhd-nf_subref = *j_1bnfdoc-subser.
  j_1bprnfhd-nf_datref = *j_1bnfdoc-docdat.
ENDIF.

*----------------------------------------------------------------------*
*    get information about form                                        *
*----------------------------------------------------------------------*

*SELECT single * FROM j_1bb2 WHERE bukrs  = j_1bprnfhd-bukrs
*                              AND branch = j_1bprnfhd-branch
*                              AND form   = j_1bprnfhd-form.
IF submi_pa = space.
*  PERFORM check_error.
ELSE.
  IF sy-subrc NE 0.
    retcode = sy-subrc.
*     PERFORM PCLOG USING 'E' TEXT-012 J_1BPRNFHD-BUKRS
*                             J_1BPRNFHD-BRANCH J_1BPRNFHD-FORM SPACE.
    "Nota Fiscal print configuration
  ENDIF.
ENDIF.
CHECK retcode IS INITIAL.

*----------------------------------------------------------------------*
*    write item information (MAIN window)                              *
*----------------------------------------------------------------------*
*   IF ZSPRNFAUXI-PROCTYPE = 'IM'.                         "CVS060698
*     MOVE MKPF-BKTXT TO J_1BPRNFTR-NAME1.                 "CVS060698
*   ENDIF.                                                 "CVS060698
CLEAR cst_control.                                          "CVS060698
REFRESH cst_control.                                        "CVS060698
CLEAR bom_data.                                             "RCS091999
kit_counter = 1.                                            "RCS091999

DATA: BEGIN OF wk_matnr OCCURS 30,
       matnr LIKE vbrp-matnr.
DATA: END   OF wk_matnr.

REFRESH wk_matnr.
CLEAR wk_matnr.

LOOP AT wk_item.
  MOVE wk_item-matnr TO wk_matnr-matnr.
  COLLECT wk_matnr.
ENDLOOP.

LOOP AT wk_item.                                            "CVS060698
*********************************************** BEGIN INCLUDE RCS091999
  cst_control-member_of_kit = ' '.
  cst_control-kit_consecutive = 0.
  cst_control-kit_header_or_items = ' '.
  SELECT * FROM mast WHERE matnr = wk_item-matnr
                       AND werks = wk_item-werks
                       AND stlan = '5'.
  ENDSELECT.
  IF sy-subrc = 0.  "IT IS A KIT HEADER
    bom_data-stlnr = mast-stlnr.
    bom_data-stlal = mast-stlal.
    tmp_menge = wk_item-menge.                              "RCS012000
*BEGIN  Check if the subitems are included in the NF before flagging as Kit Header
    SELECT * FROM stpo
             FOR ALL ENTRIES IN wk_matnr
             WHERE stlty EQ 'M'
               AND stlnr EQ bom_data-stlnr
               AND idnrk EQ wk_matnr-matnr.
    ENDSELECT.
    IF sy-subrc EQ 0.
*END    Check if the subitems are included in the NF before flagging as Kit Header
      cst_control-member_of_kit = 'K'.
      cst_control-kit_consecutive = kit_counter.
      kit_counter = kit_counter + 1.
      cst_control-kit_header_or_items = 'H'.
    ENDIF.
  ENDIF.
  SELECT * FROM stpo WHERE stlty = 'M'
                       AND stlnr = bom_data-stlnr
                       AND idnrk = wk_item-matnr.
  ENDSELECT.
  IF sy-subrc = 0.   "IT IS A KIT ITEM
    cst_control-member_of_kit = 'K'.
    cst_control-kit_consecutive = kit_counter.
    kit_counter = kit_counter + 1.
    cst_control-kit_header_or_items = 'I'.
*     cst_control-qty_per_embalagem = stpo-menge.    DELETED RCS121999
  ENDIF.
*********************************************** END INCLUDE RCS091999
******** BEGIN INCLUDE RCS032000 - NEW CFOP LAW IN SAO PAULO STATE
*   move wk_item-cfop(3) to cst_control-subcfop.              "RFS112002
  MOVE wk_item-cfop(4) TO cst_control-subcfop.              "RFS112002
*   if issuer_region = 'SP' and wk_item-cfop+1(3) = '991'.    "RFS112002
*     move '.1' to cst_control-subcfop+3(2).                  "RFS112002
*   elseif issuer_region = 'SP' and wk_item-cfop+1(3) = '999'."RFS112002
*     move '.9' to cst_control-subcfop+3(2).                  "RFS112002
*   else.                                                     "RFS112002
*     move '  ' to cst_control-subcfop+3(2).                  "RFS112002
*   endif.                                                    "RFS112002
******** BEGIN INCLUDE RCS032000 - NEW CFOP LAW IN SAO PAULO STATE
  MOVE wk_item-matorg TO cst_control-cst(1).                "CVS060698
  MOVE wk_item-taxsit TO cst_control-cst+1(1).              "CVS060698
***MOVE wk_item-icms_rate TO cst_control-icms_rate.          "CVS160798
  MOVE wk_item-docnum TO cst_control-docnum.                "CVS060698
  MOVE wk_item-itmnum TO cst_control-itmnum.                "CVS060698
  APPEND cst_control.                                       "CVS060698
ENDLOOP.                                                    "CVS060698


*Begin CSL_WELLABR_RG20041208
* Get divisions for batch printing
SELECT * INTO TABLE xznfbatch
FROM znfbatch.
*End CSL_WELLABR_RG20041208

*-----------> Begin of modification CVS310798
CLEAR wk_item_tmp.
REFRESH wk_item_tmp.
*Begin CSL_WELLABR_RG20041208
CLEAR: wk_totcs.
REFRESH: t_meins.
REFRESH: t_meins2.                                          "RFS052005
*End CSL_WELLABR_RG20041208

LOOP AT wk_item.
** Check if this is not a bundle pack item
  SELECT SINGLE * FROM vbrp
    WHERE vbeln EQ wk_item-refkey
      AND posnr EQ wk_item-refitm.
*( Begin - BN8068-090127
*  CHECK vbrp-uepos IS INITIAL.
*( End - BN8068-090127

  SELECT SINGLE * FROM mara WHERE matnr EQ wk_item-matnr.
***  MOVE mara-ean11 TO wk_item-dun14.
  MODIFY wk_item INDEX sy-tabix.

*Begin CSL_WELLABR_RG20050218
  IF wk_item-meins = 'IT'.
    CLEAR: wk_res, wk_div.
    CALL FUNCTION 'Z_VSO_UNIT_CONVERT'
      EXPORTING
        uom1                 = wk_item-meins
        uom2                 = 'CS'
        wmatnr               = wk_item-matnr
      IMPORTING
        w_factor1            = w_factor1
        w_factor2            = w_factor2
      EXCEPTIONS
        conversion_not_found = 1
        OTHERS               = 2.
    IF sy-subrc = 0.
      IF w_factor1 NE 0.
        wk_div = ( wk_item-menge * w_factor2 ) DIV w_factor1.
        wk_res = ( wk_item-menge * w_factor2 ) MOD w_factor1.
        wk_totcs = wk_totcs + wk_div.
        IF wk_res NE 0.
          SELECT SINGLE meins INTO zbrmatcx-meins
          FROM zbrmatcx WHERE matnr = wk_item-matnr.
          IF sy-subrc EQ 0.
* RFS052005 begin if change
* t_meins was changed to t_meins2 here to avoid problems with
* batch split
*               move zbrmatcx-meins to t_meins-meins.
*               move wk_res to t_meins-menge.
*               collect t_meins.
            MOVE wk_item-matnr    TO t_meins2-matnr.
            MOVE zbrmatcx-meins   TO t_meins2-meins.
            MOVE wk_res           TO t_meins2-menge.
            COLLECT t_meins2.
* RFS052005 end of change
          ELSE.
            wk_totcs = wk_totcs + 1.
          ENDIF.
        ENDIF.
      ENDIF.
    ELSE.
      wk_res = 1.
    ENDIF.
**Begin CSL_WELLABR_LA20050224
  ELSE.
    IF wk_item-meins = 'CS'.
      wk_totcs = wk_totcs + wk_item-menge.
    ELSE.
      CALL FUNCTION 'Z_VSO_UNIT_CONVERT'
        EXPORTING
          uom1                 = wk_item-meins
          uom2                 = 'CS'
          wmatnr               = wk_item-matnr
        IMPORTING
          w_factor1            = w_factor1
          w_factor2            = w_factor2
        EXCEPTIONS
          conversion_not_found = 1
          OTHERS               = 2.
      IF sy-subrc = 0.
        IF w_factor1 NE 0.
          wk_totcs = wk_totcs +
                     ( wk_item-menge * w_factor2 ) DIV w_factor1.
        ELSE.
          wk_totcs = wk_totcs + 1.
        ENDIF.
*{ BEGIN OF BP9015-090817
**{ BEGIN OF BP9015-090630
**      ELSE.
**        wk_totcs = wk_totcs + 1.
**} END OF BP9015-090630
      ELSE.

        wk_totcs = wk_totcs + 1.
*} END OF BP9015-090817
      ENDIF.
    ENDIF.
**End CSL_WELLABR_LA20050224
  ENDIF.
*End CSL_WELLABR_RG20050218
*Begin CSL_WELLABR_RG20041208
  READ TABLE xznfbatch WITH KEY mvgr2 = vbrp-mvgr2.
  CHECK sy-subrc EQ 0.
*  CHECK ( mara-spart GE '30' AND mara-spart LT '40' )
*        OR mara-spart EQ '42'
*        OR mara-spart EQ '44'
*        OR mara-spart EQ '46'.
*End CSL_WELLABR_RG20041208

  CHECK NOT ( vbrk-fkart = 'ZRE1' ).   "Don't print batches for return
  SELECT * FROM vbrp WHERE vbeln EQ wk_item-refkey AND
                           posnr EQ wk_item-itmnum.
    SELECT * FROM lips WHERE vbeln EQ vbrp-vgbel AND
                             posnr NE vbrp-vgpos AND
                             uecha EQ vbrp-vgpos.
      MOVE: wk_item-docnum TO wk_item_tmp-docnum,
            lips-posnr     TO wk_item_tmp-itmnum,
            vbrp-posnr     TO wk_item_tmp-uecha,
            lips-charg     TO wk_item_tmp-charg,
*           lips-lfimg     TO wk_item_tmp-menge.
            lips-lfimg     TO wk_item_tmp-menge, "WELLABR_CBG20041210
            vbrp-vrkme     TO wk_item_tmp-meins. "WELLABR_CBG20041210

*         IF WK_ITEM_TMP-ITMNUM IS INITIAL.
*           MOVE: VBRP-POSNR TO WK_ITEM_TMP-ITMNUM,
*                 VBRP-POSNR TO WK_ITEM_TMP-UECHA.
*         ENDIF.
*Begin CSL_WELLABR_RG20041208
** RFS092003 begin of insertion
*      IF ( mara-spart GE '30' AND mara-spart LT '40' ).
      READ TABLE xznfbatch WITH KEY mvgr2 = vbrp-mvgr2
                                    hc    = 'X'.
      IF sy-subrc EQ 0.
*End CSL_WELLABR_RG20041208
* It is a HC product
        wk_item_tmp-xchar = 'H'.
      ELSE.
* It is not a HC product
        wk_item_tmp-xchar = 'X'.
      ENDIF.
* RFS092003 end of insertion
      APPEND wk_item_tmp.
    ENDSELECT.
    IF sy-subrc NE 0.
      SELECT SINGLE * FROM lips WHERE vbeln EQ vbrp-vgbel AND
                                      posnr EQ vbrp-vgpos.
      IF NOT lips-charg IS INITIAL.
        MOVE: wk_item-docnum TO wk_item_tmp-docnum,
              vbrp-posnr     TO wk_item_tmp-itmnum,
              vbrp-posnr     TO wk_item_tmp-uecha,
              lips-charg     TO wk_item_tmp-charg,
*             lips-lfimg     TO wk_item_tmp-menge.
              lips-lfimg     TO wk_item_tmp-menge, "WELLABR_CBG2004
              vbrp-vrkme     TO wk_item_tmp-meins. "WELLABR_CBG2004

*Begin CSL_WELLABR_RG20041208
** RFS092003 begin of insertion
*      IF ( mara-spart GE '30' AND mara-spart LT '40' ).
        READ TABLE xznfbatch WITH KEY mvgr2 = vbrp-mvgr2
                                      hc    = 'X'.
        IF sy-subrc EQ 0.
*End CSL_WELLABR_RG20041208
* It is a HC product
          wk_item_tmp-xchar = 'H'.
        ELSE.
* It is not a HC product
          wk_item_tmp-xchar = 'X'.
        ENDIF.
* RFS092003 end of insertion
        APPEND wk_item_tmp.
      ENDIF.
    ENDIF.
  ENDSELECT.
* Início alteração Aline Marinho - 31/01/07 Req.117
  IF vbrk-fkart EQ c_zfdb.
    IF NOT wk_item-charg IS INITIAL.
      MOVE: wk_item-docnum TO wk_item_tmp-docnum,
            wk_item-itmnum TO wk_item_tmp-itmnum,
            vbrp-posnr     TO wk_item_tmp-uecha,
            wk_item-charg  TO wk_item_tmp-charg,
            wk_item-menge  TO wk_item_tmp-menge,
            wk_item-meins  TO wk_item_tmp-meins.

      READ TABLE xznfbatch WITH KEY mvgr2 = vbrp-mvgr2
                                    hc    = 'X'.
      IF sy-subrc IS INITIAL.
* It is a HC product
        wk_item_tmp-xchar = 'H'.
      ELSE.
* It is not a HC product
        wk_item_tmp-xchar = 'X'.
      ENDIF.
      APPEND wk_item_tmp.
    ENDIF.
  ENDIF.
* Fim alteração Aline Marinho - 31/01/07 Req.117
ENDLOOP.
*
* RFS052005 begin of insertion
DATA: wl_check_it(1),
      wl_last_nf(1).
CLEAR wl_check_it.
LOOP AT wk_item WHERE meins EQ 'IT'.
  wl_check_it = 'X'.
  EXIT.
ENDLOOP.
*
* RFS052005 begin of insertion
LOOP AT t_meins2.
  CLEAR: wk_res, wk_div.
  CALL FUNCTION 'Z_VSO_UNIT_CONVERT'
    EXPORTING
      uom1                 = 'IT'
      uom2                 = 'CS'
      wmatnr               = t_meins2-matnr
    IMPORTING
      w_factor1            = w_factor1
      w_factor2            = w_factor2
    EXCEPTIONS
      conversion_not_found = 1
      OTHERS               = 2.
  IF sy-subrc = 0.
    IF w_factor1 NE 0.
      wk_div = ( t_meins2-menge * w_factor2 ) DIV w_factor1.
      wk_res = ( t_meins2-menge * w_factor2 ) MOD w_factor1.
      wk_totcs = wk_totcs + wk_div.
      IF wk_res NE 0.
        SELECT SINGLE meins INTO zbrmatcx-meins
        FROM zbrmatcx WHERE matnr = t_meins2-matnr.
        IF sy-subrc EQ 0.
          MOVE t_meins2-meins TO t_meins-meins.
          MOVE wk_res TO t_meins-menge.
          COLLECT t_meins.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.
ENDLOOP.
* RFS052005 end of insertion
*
REFRESH wl_t_meins_all.
CLEAR wl_vbeln.
IF wl_check_it = 'X'.
  PERFORM get_all_nfs.
ENDIF.
* RFS052005 end of insertion
*
*Begin CSL_WELLABR_RG20050218
LOOP AT t_meins.
  CLEAR: wk_res, wk_div.
  SELECT SINGLE umrez INTO zbrcxty-umrez
    FROM zbrcxty WHERE meins = t_meins-meins.
  IF sy-subrc EQ 0 AND zbrcxty-umrez GT 0.
    wk_div = t_meins-menge / zbrcxty-umrez.
    wk_res = t_meins-menge MOD zbrcxty-umrez.
*
* RFS052005 begin of insertion
    wl_last_nf = 'X'.
    PERFORM check_if_last_nf USING t_meins-meins
                             CHANGING wl_last_nf.
* RFS052005 end of insertion
*
    IF wk_res GT 0
    AND wl_last_nf EQ 'X'.                                  "RFS052005
      wk_totcs = wk_totcs + 1.
    ENDIF.

*Begin CSL_WELLABR_JR20050317
*    wk_div = wk_div + '0.99'.

    CALL FUNCTION 'ROUND'
      EXPORTING
        decimals = 0
        input    = wk_div
        sign     = '-'
      IMPORTING
        output   = wk_div.
*End CSL_WELLABR_JR20050317

    wk_totcs = wk_totcs + wk_div.
*    if wk_res gt 0."CSL_WELLABR_JR20050318
*      wk_totcs = wk_totcs + 1.
*    endif.
  ENDIF.
*  at last.
*    J_1BPRNFHD-ANZPK  = wk_totcs.
*  endat.
ENDLOOP.

j_1bprnfhd-anzpk  = wk_totcs.


*End CSL_WELLABR_RG20050218


*LOOP AT wk_item_tmp.
*  MOVE-CORRESPONDING wk_item_tmp TO wk_item.
*  IF wk_item-meins = 'CS'.  "WELLABR_CBG20041012
*    wk_item-meins = 'CX'.  "WELLABR_CBG20041012
*  ENDIF.  "WELLABR_CBG20041012
*  IF NOT wk_item-charg IS INITIAL.
*    WRITE wk_item-menge TO wk_item-matnr DECIMALS 0 LEFT-JUSTIFIED.
*    CONCATENATE wk_item-charg ':' INTO wk_item-charg.
** begin change WELLABR_CBG20041210
**   CONCATENATE '** Lote' wk_item-charg wk_item-matnr 'CX'
*    CONCATENATE '** Lote' wk_item-charg wk_item-matnr wk_item-meins+0(2)
** end change WELLABR_CBG20041210
*                                   INTO wk_item-maktx SEPARATED BY space.
*    CLEAR wk_item-matnr.
**     CLEAR WK_ITEM-MENGE.        "RFS092003
**     MOVE 'X' TO WK_ITEM-XCHAR.  "RFS092003
*    APPEND wk_item.
*  ENDIF.
*ENDLOOP.
***SORT wk_item BY docnum itmnum uecha.
*
* RFS042004 begin of insertion
REFRESH w_pmc_table.
IF w_auart = 'Z001'. "Only customer sales
  LOOP AT wk_item.
    CHECK NOT wk_item-matnr IS INITIAL.
* Get customer group (sub.trib.) and tax jurisdiction of shipping to
    CLEAR: wl_shipto, wl_stgrp.
    SELECT SINGLE xsubt txjcd INTO (wl_stgrp, wl_shipto) FROM kna1
         WHERE kunnr EQ wk_header-parid. "Ship-to partner
* Get tax jurisdiction of shipping from
    CLEAR wl_shipfrom.
    SELECT SINGLE txjcd INTO wl_shipfrom FROM t001w
         WHERE werks EQ wk_item-werks.
* Prepare validity date according to billing date
    IF NOT vbrk-fkdat IS INITIAL.
      CONVERT DATE vbrk-fkdat INTO INVERTED-DATE wl_validity_date.
    ELSE.
      CONVERT DATE sy-datum INTO INVERTED-DATE wl_validity_date.
    ENDIF.
*
*RCS05022008 BEGIN DELETE
*   SELECT * FROM j_1btxst1 UP TO 1 ROWS
* Country
*        WHERE land1     = 'BR' " Country
* Tax jurisdiction of shipping from
*        AND   shipfrom  = wl_shipfrom
* Tax jurisdiction of shipping to
*        AND   shipto    = wl_shipto
* Material number
*        AND   matnr     = wk_item-matnr
* Customer group for Substituiçao Tributária calculation
*        AND   stgrp     = wl_stgrp
* Date from which the tax rule is valid
*        AND   validfrom GE wl_validity_date
*        AND   validto   LE wl_validity_date.
*   ENDSELECT.
*   IF sy-subrc NE 0
*   OR j_1btxst1-price EQ 0.
*     CONTINUE.
*   ENDIF.
*RCS05022008 END DELETE
*RCS05022008 BEGIN INSERT
    SELECT * FROM j_1btxst3 UP TO 1 ROWS
* Country
         WHERE land1     = 'BR' " Country
* Tax Group = 10
         AND   gruop     = '12'
* Tax jurisdiction of shipping from
         AND   shipfrom  = wl_shipfrom
* Tax jurisdiction of shipping to
         AND   shipto    = wl_shipto
* Material number
         AND   value     = wk_item-matnr
* Customer group for Substituiçao Tributária calculation
         AND   stgrp     = wl_stgrp
* Date from which the tax rule is valid
         AND   validfrom GE wl_validity_date
         AND   validto   LE wl_validity_date.
    ENDSELECT.
    IF sy-subrc NE 0
    OR j_1btxst3-price EQ 0.
      CONTINUE.
    ENDIF.
*RCS05022008 END INSERT
    MOVE wk_item-matnr   TO w_pmc_table-matnr.
*   MOVE j_1btxst1-price TO wl_pmc_value. "RCS05022008
    MOVE j_1btxst3-price TO wl_pmc_value. "RCS05022008
    TRANSLATE wl_pmc_value USING '.,'.
    CLEAR w_pmc_table-maktx.
    CONCATENATE 'PMC: R$' wl_pmc_value
                 INTO w_pmc_table-maktx SEPARATED BY space.
    CONDENSE w_pmc_table-maktx.
    APPEND w_pmc_table.
  ENDLOOP.
ENDIF.
***SORT wk_item BY docnum itmnum uecha.

* RFS042004 end of insertion
*
*-----------> End of modification CVS310798
* SORT CST_CONTROL BY CST DOCNUM ITMNUM.                   "CVS060698
* sort cst_control by cst icms_rate docnum itmnum. "RCS091999 "CVS160798
*********************************************** BEGIN INCLUDE RCS091999
SORT cst_control DESCENDING BY member_of_kit kit_consecutive
                             cst icms_rate docnum itmnum.
type_of_next = ' '.
LOOP AT cst_control.  "This is to include the field "type of next"
  cst_control-type_of_next = type_of_next.
  MODIFY cst_control.
  type_of_next = cst_control-kit_header_or_items.
ENDLOOP.
SORT cst_control BY member_of_kit        "First non-kits, then kits
                  kit_consecutive      "Kit members must come consec
                  cst
                  icms_rate
                  docnum
                  itmnum.
*********************************************** END INCLUDE RCS091999
* RFS092003 begin of insertion
DATA: wl_hc_batch_item(1),
    wl_hc_batch_item_kit(1),
    wl_clear_kit_control(1),
    wl_last_rec(1),
    wl_count_batch TYPE i,
    wl_last LIKE cst_control-itmnum,
    wl_qty LIKE j_1bprnfli-nfqty,
    wl_ipi LIKE j_1bprnfli-ipival,
    wl_val LIKE j_1bprnfli-nfnet,
    wl_nfnet LIKE j_1bprnfli-nfnet,
    wl_nfqty LIKE j_1bprnfli-nfqty,
    wl_ipival LIKE j_1bprnfli-ipival,
    wl_tipi LIKE j_1bprnfli-ipival,
    wl_tqty LIKE j_1bprnfli-nfqty,
    wl_tval LIKE j_1bprnfli-nfnet,
    wl_strlen   TYPE i,
    wl_cont     TYPE i,
    wl_char(80) TYPE c VALUE 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',
    wl_not      TYPE c.

MOVE 'X' TO wl_clear_kit_control.
REFRESH w_kit_components.
CLEAR   w_kit_header.
* RFS092003 end of insertion
LOOP AT cst_control.                                        "CVS060698
*
* RFS092003 begin of insertion
  CLEAR:  wl_hc_batch_item, wl_count_batch, wl_tval, wl_tipi.
  LOOP AT wk_item WHERE docnum EQ cst_control-docnum.
***                        ( itmnum EQ cst_control-itmnum OR
***                          uecha  EQ cst_control-itmnum ).
***    IF NOT wk_item-xchar IS INITIAL.
***      wl_hc_batch_item = wk_item-xchar.
***      IF wk_item-xchar EQ 'H'. "HC product with batch number
***        ADD 1 TO wl_count_batch.
***        wl_last = wk_item-itmnum.
***      ENDIF.
***    ENDIF.
  ENDLOOP.
  IF wl_count_batch < 2.
* Special treatment only for items with more than one batch number
    CLEAR wl_hc_batch_item.
  ENDIF.
  IF wl_clear_kit_control = 'X'.
    wl_hc_batch_item_kit = wl_hc_batch_item.
    CLEAR wl_clear_kit_control.
  ENDIF.
* RFS092003 end of insertion
*
* RFS042004 begin of insertion
* This next field will be used to identify the material number to print
* the PMC (maximum consumer price) of Health Care products. This field
* will be used only for non-Kits. There are special statements to write
* PMC for Kits.
  CLEAR wl_matnr_pmc.
* RFS042004 end of insertion
*
  LOOP AT wk_item WHERE docnum EQ cst_control-docnum. " AND    "CVS060698
***                        ( itmnum EQ cst_control-itmnum OR   "CVS060698
***                          uecha  EQ cst_control-itmnum ).
    READ TABLE wk_item_add WITH KEY docnum = wk_item-docnum
                              itmnum = wk_item-itmnum.
*
* RFS092003 begin of insertion
    IF  sy-subrc <> 0 "record of table wk_item_add not found
    AND ( wl_hc_batch_item = 'H' OR  wl_hc_batch_item_kit = 'H' ).
* It is a HC product with more than one batch number
      READ TABLE wk_item_add WITH KEY docnum = wk_item-docnum.
***                                      itmnum = wk_item-uecha.
    ENDIF.
* RFS092003 end of insertion
*
* RFS042004 begin of insertion
    IF cst_control-member_of_kit NE 'K'  "It's not a Kit
    AND NOT wk_item-matnr IS INITIAL.    "It's not a batch line.
      wl_matnr_pmc = wk_item-matnr.
* It will be used to find PMC value to print.
    ENDIF.
* RFS042004 end of insertion
*
***    IF wk_item-xchar IS INITIAL.
***      CLEAR batch_item.
***    ELSE.
****       BATCH_ITEM = 'X'.               "RFS092003
***      batch_item = wk_item-xchar.                           "RFS092003
***    ENDIF.
    CLEAR j_1bprnfli.
    MOVE-CORRESPONDING wk_item TO j_1bprnfli.
    MOVE-CORRESPONDING wk_item_add TO j_1bprnfli.
*     zsprnfauxi-subcfop2 = cst_control-subcfop.              "RFS112002
*** Begin DDN122007
*    translate wk_item-nbm to upper case.
    wl_strlen = STRLEN( wk_item-nbm ).
*** Get the last 8 digits
    CLEAR wl_cont.

    wl_cont = wl_strlen - 8.

    j_1bprnfli-nbm = wk_item-nbm+wl_cont(8).

*    clear wl_cont.
*    do wl_strlen times.
*      if wk_item-nbm+wl_cont(1) ca wl_char.
*       wl_not = 'X'.
*       exit.
*      endif.
*      wl_cont = wl_cont + 1.
*    enddo.
*
*    if wl_not ne 'X'.
*     PACK wk_item-nbm TO j_1bprnfli-nbm.
*    endif.
*
*    CONDENSE j_1bprnfli-nbm NO-GAPS.

*** End DDN122007
    IF j_1bprnfli-ipival = 0.
      CLEAR j_1bprnfli-ipirate.
    ENDIF.
    CLEAR zsprnfauxi-subcfop2.                              "RFS112002
    zsprnfauxi-subcfop2+1 = cst_control-subcfop.            "RFS112002
***    zsprnfauxi-dun14 = wk_item-dun14.
    CASE j_1bprnfli-nfunt.
      WHEN 'CS '.
        zsprnfauxi-nfunt = 'CX'.
      WHEN 'PAL'.
        zsprnfauxi-nfunt = 'UN'.
      WHEN 'C31'.
        zsprnfauxi-nfunt = 'UN'.
      WHEN 'X8'.
        zsprnfauxi-nfunt = 'UN'.
      WHEN 'EA'.
        zsprnfauxi-nfunt = 'IT'.
      WHEN OTHERS.
        zsprnfauxi-nfunt = j_1bprnfli-nfunt.
    ENDCASE.
* Calculate total of unit per embalagem
*********************************************** BEGIN INCLUDE RCS091999
*     if cst_control-kit_header_or_items = 'I'.               DELETED
*       zsprnfauxi-embal = cst_control-qty_per_embalagem.     BY
*     else.                                                   RCS121999
*********************************************** END INCLUDE RCS091999
    CALL FUNCTION 'Z_VSO_UNIT_CONVERT'
      EXPORTING
        uom1                 = j_1bprnfli-nfunt
        uom2                 = 'IT'
        wmatnr               = wk_item-matnr
      IMPORTING
        w_factor1            = w_factor1
        w_factor2            = w_factor2
      EXCEPTIONS
        conversion_not_found = 1
        OTHERS               = 2.
    IF sy-subrc = 0.
      IF w_factor1 NE 0.      " CSL_UPG46_WLS20030814
        zsprnfauxi-embal = w_factor2 / w_factor1.
      ELSE.                   " CSL_UPG46_WLS20030814
        zsprnfauxi-embal = 1. " CSL_UPG46_WLS20030814
      ENDIF.                  " CSL_UPG46_WLS20030814
    ELSE.
      IF sy-subrc = 1.
        zsprnfauxi-embal = 1.
        IF proctype NE 'ST'
*{ ICSTO development
      AND  proctype NE 'IS'.
*}
          PERFORM pclog USING 'I' text-021 wk_item-matnr
                                           space space space.
          "Material, quantity per embalagem assumed_1
        ENDIF.
      ELSE.
        PERFORM pclog USING 'E' text-022 wk_item-meins
                                          'UNI' wk_item-matnr space.
        "Error in 'Z_VSO_UNIT_CONVERT' function
      ENDIF.
    ENDIF.
*     endif.   "RCS091999

* GILLETTE BEGIN
* Check if price for this item is maintained in CS
    SELECT kmein INTO konv-kmein FROM konv
      WHERE knumv EQ vbrk-knumv
        AND kposn EQ j_1bprnfli-itmnum
        AND kschl EQ 'PR00'.
    ENDSELECT.
    IF sy-subrc EQ 0.
      IF ( konv-kmein EQ 'CS' ) AND ( j_1bprnfli-nfunt EQ 'IT' ).
* Modify line to show information in CS instead of IT
        CALL FUNCTION 'Z_VSO_UNIT_CONVERT'
          EXPORTING
            uom1                 = j_1bprnfli-nfunt
            uom2                 = konv-kmein
            wmatnr               = wk_item-matnr
          IMPORTING
            w_factor1            = w_factor1
            w_factor2            = w_factor2
          EXCEPTIONS
            conversion_not_found = 1
            OTHERS               = 2.
        IF sy-subrc EQ 0.
          zsprnfauxi-nfunt = 'CX'.
          zsprnfauxi-embal = w_factor1.
          j_1bprnfli-nfqty = j_1bprnfli-nfqty / w_factor1.
          j_1bprnfli-nfpri = j_1bprnfli-nfpri * w_factor1.
        ENDIF.
      ENDIF.
    ENDIF.
* GILLETTE END

*... fill text reference ..............................................*

    LOOP AT wk_refer_msg WHERE itmnum = wk_item-itmnum.
      REPLACE '  ' WITH wk_refer_msg-seqnum INTO j_1bprnfli-text_ref.
      REPLACE ' '  WITH ','                 INTO j_1bprnfli-text_ref.
    ENDLOOP.
    REPLACE ', ' WITH '  ' INTO j_1bprnfli-text_ref.

*... determine totals per ICMS taxrate and taxsituation and update ....*
*... table inter_total_table if the branch is allowed to print ........*
*... NF's consisting of more than one page ............................*

    CLEAR j_1bbranch.
    SELECT SINGLE * FROM j_1bbranch  WHERE bukrs  = j_1bprnfhd-bukrs
                                     AND   branch = j_1bprnfhd-branch.

    IF j_1bbranch-single = ' '.      "more than one page allowed

      CLEAR inter_total_table.
      READ TABLE inter_total_table WITH KEY
           matorg    = j_1bprnfli-matorg
           taxsit    = j_1bprnfli-taxsit
           icmsrate = j_1bprnfli-icmsrate
           BINARY SEARCH.

      tabix = sy-tabix.

      IF sy-subrc NE '0'.
        MOVE-CORRESPONDING j_1bprnfli TO inter_total_table.
        INSERT inter_total_table INDEX tabix.
      ELSE.
        inter_total_table-nfnett = inter_total_table-nfnett
                                        + j_1bprnfli-nfnett.
        inter_total_table-condensed = 'X'.
        MODIFY inter_total_table INDEX tabix.
      ENDIF.

    ENDIF.                           "j_1bbranch-single = ' '
*... move line data to SAPScript ......................................*
* begin of modifications FDO230998
* If the NF has these CFOP's, it is a "NF de devolução".
*     if zsprnfauxi-subcfop eq '531'                          "RFS112002
    IF zsprnfauxi-subcfop EQ '5201'                         "RFS112002
*      or zsprnfauxi-subcfop eq '532'                         "RFS112002
     OR zsprnfauxi-subcfop EQ '5202'                        "RFS112002
*       or zsprnfauxi-subcfop eq '631'                        "RFS112002
      OR zsprnfauxi-subcfop EQ '6201'                       "RFS112002
*        or zsprnfauxi-subcfop eq '632'                       "RFS112002
       OR zsprnfauxi-subcfop EQ '6202'                      "RFS112002
*         or zsprnfauxi-subcfop eq '695'   "JANM 14071999     "RFS112002
        OR zsprnfauxi-subcfop EQ '6556'  "JANM 14071999     "RFS112002
*          or zsprnfauxi-subcfop eq '595'.                    "RFS112002
         OR zsprnfauxi-subcfop EQ '5556'.                   "RFS112002
      cfop_dev = 'X'.
    ELSE.
      cfop_dev = ''.
    ENDIF.
* end of modifications FDO230998
* Included by Sandro Delgado on 24th February 1999: begin
    IF c_ekit = '1'.
*
* RFS092003 begin of insertion
* This part of program was not changed because it is not used anymore.
* RFS092003 end of insertion
*
      SELECT * FROM zkit_mat
        WHERE matnr = j_1bprnfli-matnr.
      ENDSELECT.
      IF sy-subrc = 0.
        CASE zstkit-nfunt.
          WHEN 'CS '.
            zstkit-nfunt = 'CX'.
          WHEN 'PAL'.
            zstkit-nfunt = 'UN'.
          WHEN 'C31'.
            zstkit-nfunt = 'UN'.
          WHEN 'X8'.
            zstkit-nfunt = 'UN'.
        ENDCASE.

*        CALL FUNCTION 'WRITE_FORM'                          "FDO230998
*             EXPORTING                                      "FDO230998
*                  element = 'LINE_KIT'                      "FDO230998
*                  window  = 'MAIN'                          "FDO230998
*             EXCEPTIONS                                     "FDO230998
*                  OTHERS  = 01.                             "FDO230998
        c_ekit = '2'.
        zstkit-ind_kit = 'X'.
*        clear: j_1bprnfli-matnr, j_1bprnfli-cfop, j_1bprnfli-nfqty.
        CLEAR: j_1bprnfli-matnr, zsprnfauxi-subcfop2, j_1bprnfli-nfqty.
        zsprnfauxi-nfunt = 'UN'.
      ENDIF.
    ELSEIF c_ekit = '2'.
      SELECT * FROM zkit_mat
        WHERE matnr = j_1bprnfli-matnr.
      ENDSELECT.
      IF sy-subrc <> 0 AND j_1bprnfli-matnr <> space.
        c_ekit = '3'.
        zstkit-ind_kit = ' '.
      ELSE.
*       clear: j_1bprnfli-matnr, j_1bprnfli-cfop, j_1bprnfli-nfqty.
        CLEAR: j_1bprnfli-matnr, zsprnfauxi-subcfop2, j_1bprnfli-nfqty.
        zsprnfauxi-nfunt = 'UN'.
*" EDR0307
*       j_1bprnfhd-anzpk = j_1bprnfhd-anzpk - j_1bprnfli-menge.
      ENDIF.
    ENDIF.

* Included by Sandro Delgado on 24th February 1999: end
    IF zfac_export IS INITIAL.                              "CVS230698
      IF batch_item IS INITIAL.                             "CVS310798
        IF cfop_dev EQ 'X'.                                 "FDO230998
***          CALL FUNCTION 'WRITE_FORM'                        "FDO230998
***               EXPORTING                                    "FDO230998
***                    element = 'LINE_DEV'                    "FDO230998
***                    window  = 'MAIN'                        "FDO230998
***               EXCEPTIONS                                   "FDO230998
***                    OTHERS  = 01.                           "FDO230998
        ELSE.                                               "FDO230998
*********************************************** BEGIN INCLUDE RCS091999
          IF cst_control-kit_header_or_items = 'H'.
            zstkit-cd_kit   = wk_item-matnr.
            zstkit-desc_kit = wk_item-maktx.
            zstkit-embal    = zsprnfauxi-embal.
            zstkit-matorg   = ''. "wk_item-matorg.
            zstkit-taxsit   = ''. "wk_item-taxsit.
            zstkit-nfunt    = zsprnfauxi-nfunt.
            zstkit-qtde     = wk_item-menge.
            tmp_menge = wk_item-menge.
*
* RFS092003 begin of insertion
            IF wl_hc_batch_item_kit = 'H'.
* It is a health care product with more than one batch number:
* Don't print kit header now and store data to print it later on.
* It will be printed one header for each batch number.
              CLEAR w_kit_header.
              w_kit_header-dun14    = zsprnfauxi-dun14.
              w_kit_header-cd_kit   = zstkit-cd_kit.
              w_kit_header-desc_kit = zstkit-desc_kit.
              w_kit_header-embal    = zstkit-embal.
              w_kit_header-subcfop2 = zsprnfauxi-subcfop2.
              w_kit_header-nbm      = j_1bprnfli-nbm.
              w_kit_header-matorg   = zstkit-matorg.
              w_kit_header-taxsit   = zstkit-taxsit.
              w_kit_header-nfunt    = zstkit-nfunt.
              w_kit_header-qtde     = zstkit-qtde.
            ELSE.
* RFS092003 end of insertion
*
***              CALL FUNCTION 'WRITE_FORM'
***                EXPORTING
***                  element = 'LINE_KIT'
***                  window  = 'MAIN'
***                EXCEPTIONS
***                  OTHERS  = 01.
            ENDIF.                                          "RFS092003
          ELSE.
            zstkit-ind_kit = ' '.
            IF cst_control-kit_header_or_items = 'I'.
              DATA: wl_matnr LIKE j_1bprnfli-matnr.         "RFS042004
              MOVE j_1bprnfli-matnr TO wl_matnr.            "RFS042004
              CLEAR: j_1bprnfli-matnr,
* Início alteração Aline Marinho - 31/07/06
                      j_1bprnfli-cfop,
***                     zsprnfauxi-subcfop2,
* Fim alteração Aline Marinho - 31/07/06
                      j_1bprnfli-nfqty.
              IF tmp_menge NE 0.     " CSL_UPG46_WLS20030814
                j_1bprnfli-nfpri = j_1bprnfli-nfnet / tmp_menge. "012000
              ELSE.
                j_1bprnfli-nfpri = 0.  " CSL_UPG46_WLS20030814
              ENDIF.                 " CSL_UPG46_WLS20030814
              zsprnfauxi-nfunt = 'UN'.
*"  EDR0307
*             j_1bprnfhd-anzpk = j_1bprnfhd-anzpk - j_1bprnfli-menge.

              zstkit-ind_kit = 'X'.   "This is read in the layout set
* RFS092003 begin of insertion
              IF  wl_hc_batch_item_kit <> 'H'.
* It is a kit but it is not a HC product with more than one batch number
***                CALL FUNCTION 'WRITE_FORM'
***                  EXPORTING
***                    element = 'LINE'
***                    window  = 'MAIN'
***                  EXCEPTIONS
***                    OTHERS  = 01.
*
* RFS042004 begin of insertion
                READ TABLE w_pmc_table WITH KEY matnr = wl_matnr.
* Find PMC for this kit component
                IF sy-subrc = 0. "There is PMC
* Write PMC (maximum consumer price) after each kit component
                  MOVE w_pmc_table-maktx TO j_1bprnfli-maktx.
***                  CALL FUNCTION 'WRITE_FORM'
***                    EXPORTING
***                      element = 'BTCH'
***                      window  = 'MAIN'
***                    EXCEPTIONS
***                      OTHERS  = 01.
                ENDIF.
* RFS042004 end of insertion
*
              ELSE.
* It is a kit and it is a HC product with more than one batch number.
* Don't print kit components now and store data to print it later on.
* It will be printed one set of components for each batch number. The
* components values will be printed according to each batch quantity.
                CLEAR w_kit_components.
                MOVE zsprnfauxi-dun14    TO w_kit_components-dun14.
                MOVE j_1bprnfli-matnr    TO w_kit_components-matnr.
                MOVE wl_matnr    TO w_kit_components-matnr2. "RFS042004
                MOVE j_1bprnfli-maktx    TO w_kit_components-maktx.
                MOVE zsprnfauxi-embal    TO w_kit_components-embal.
                MOVE zsprnfauxi-subcfop2 TO w_kit_components-subcfop2.
                MOVE j_1bprnfli-nbm      TO w_kit_components-nbm.
                MOVE j_1bprnfli-matorg   TO w_kit_components-matorg.
                MOVE j_1bprnfli-taxsit   TO w_kit_components-taxsit.
                MOVE zsprnfauxi-nfunt    TO w_kit_components-nfunt.
                MOVE zstkit-ind_kit      TO w_kit_components-ind_kit.
                MOVE j_1bprnfli-nfqty    TO w_kit_components-nfqty.
                MOVE j_1bprnfli-nfpri    TO w_kit_components-nfpri.
                MOVE j_1bprnfli-nfnet    TO w_kit_components-nfnet.
                MOVE j_1bprnfli-icmsrate TO w_kit_components-icmsrate.
                MOVE j_1bprnfli-ipirate  TO w_kit_components-ipirate.
                MOVE j_1bprnfli-ipival   TO w_kit_components-ipival.
                APPEND w_kit_components.
              ENDIF.
* RFS092003 end of insertion
*             ENDIF.                                        RFS092003
            ELSE.                                           "RFS092003
* It is not a kit                                           RFS092003
*********************************************** END INCLUDE RCS091999
* RFS092003 begin of insertion
              IF  wl_hc_batch_item <> 'H'.
* It is not a HC product with more than one batch number
* RFS092003 end of insertion
***                CALL FUNCTION 'WRITE_FORM'
***                  EXPORTING
***                    element = 'LINE'
***                    window  = 'MAIN'
***                  EXCEPTIONS
***                    OTHERS  = 01.
* Modify to Nota Fiscal                                                                 "BUSSGB070723
                IF  zflg_nf EQ 'X'.                                                     "BUSSGB070723
                  PERFORM code_dcre.                                                    "BUSSGB070723
***                  CALL FUNCTION 'WRITE_FORM'                                            "BUSSGB070723
***                       EXPORTING                                                        "BUSSGB070723
***                            element = 'LINE2'                                           "BUSSGB070723
***                            window  = 'MAIN'                                            "BUSSGB070723
***                       EXCEPTIONS                                                       "BUSSGB070723
***                            OTHERS  = 01.                                               "BUSSGB070723
                ENDIF.                                                                  "BUSSGB070723
* RFS092003 begin of insertion
              ELSE.
* It not a HC product with more than one batch number
***                CALL FUNCTION 'WRITE_FORM'
***                  EXPORTING
***                    element = 'LIHC'
***                    window  = 'MAIN'
***                  EXCEPTIONS
***                    OTHERS  = 01.
                wl_qty = j_1bprnfli-nfqty.
                wl_val = j_1bprnfli-nfnet.
                wl_ipi = j_1bprnfli-ipival.
              ENDIF.
            ENDIF.
* RFS092003 end of insertion
          ENDIF.                                            "RCS091999
        ENDIF.
*--------------> Begin of modification CVS310798
      ELSE.
* RFS092003 begin of insertion
        IF wl_hc_batch_item <> 'H'.
* It is not a HC product with more than one batch number
* RFS092003 end of insertion
*********************************************** BEGIN INCLUDE RCS091999
          IF cst_control-member_of_kit = 'K'.
            kit_batch_control-matnr = j_1bprnfli-matnr.
            kit_batch_control-maktx = j_1bprnfli-maktx.
            kit_batch_control-nfqty = wk_item-menge.        "RFS092003
            APPEND kit_batch_control.
          ELSE.
*********************************************** END INCLUDE RCS091999
***            CALL FUNCTION 'WRITE_FORM'
***              EXPORTING
***                element = 'BTCH'
***                window  = 'MAIN'
***              EXCEPTIONS
***                OTHERS  = 01.
          ENDIF.                                            "RCS091999
* RFS092003 begin of insertion
        ELSE.
* It is a HC produtc with more than one batch number
*
          IF cst_control-member_of_kit = 'K'.
            kit_batch_control-matnr = j_1bprnfli-matnr.
            kit_batch_control-maktx = j_1bprnfli-maktx.
            kit_batch_control-nfqty = wk_item-menge.        "RFS092003
            APPEND kit_batch_control.
          ELSE.
*
            MOVE: j_1bprnfli-nfqty  TO wl_nfqty,
                  j_1bprnfli-nfnet  TO wl_nfnet,
                  j_1bprnfli-ipival TO wl_ipival.
            MOVE wk_item-menge TO j_1bprnfli-nfqty.
            IF wl_last <> wk_item-itmnum.
              IF wl_qty <> 0.
                j_1bprnfli-nfnet  = wl_val / wl_qty * wk_item-menge.
                j_1bprnfli-ipival = wl_ipi / wl_qty * wk_item-menge.
              ENDIF.
            ELSE.
              j_1bprnfli-nfnet = wl_val - wl_tval.
              j_1bprnfli-ipival = wl_ipi - wl_tipi.
            ENDIF.
***            CALL FUNCTION 'WRITE_FORM'
***              EXPORTING
***                element = 'BTHC'
***                window  = 'MAIN'
***              EXCEPTIONS
***                OTHERS  = 01.
            ADD j_1bprnfli-nfnet  TO wl_tval.
            ADD j_1bprnfli-ipival TO wl_tipi.
            MOVE: wl_nfqty  TO j_1bprnfli-nfqty,
                  wl_nfnet  TO j_1bprnfli-nfnet,
                  wl_ipival TO j_1bprnfli-ipival.
          ENDIF.
        ENDIF.
* RFS092003 end of insertion
      ENDIF.
*--------------> End   of modification CVS310798
    ELSE.                                                   "CVS230698B
      IF NOT j_1bprnfli-maktx CS 'Lote'.                    "RFS102003
***        CALL FUNCTION 'WRITE_FORM'
***          EXPORTING
***            element = 'LIEX'  " Line export
***            window  = 'MAIN'
***          EXCEPTIONS
***            OTHERS  = 01.
* RFS102003 begin of insertion
      ELSE.
***        CALL FUNCTION 'WRITE_FORM'
***          EXPORTING
***            element = 'BTCH'  " batch
***            window  = 'MAIN'
***          EXCEPTIONS
***            OTHERS  = 01.
      ENDIF.
* RFS102003 end of insertion
    ENDIF.                                                  "CVS230698E
*... add subtotals (begin of page) ....................................*

* begin change 21.07.97: statistical IPI
    IF j_1bprnfli-ipistat = ' '.
      j_1bprnfst-ipival    = j_1bprnfst-ipival + j_1bprnfli-ipival.
    ENDIF.
* end change 21.07.97: statistical IPI
    j_1bprnfst-nfnett    = j_1bprnfst-nfnett  + j_1bprnfli-nfnett.

*... check the sy-subrc ...............................................*
*     perform check_error.
*     check retcode is initial.

  ENDLOOP.

* RFS042004 begin of insertion
  IF NOT wl_matnr_pmc IS INITIAL. "It's not a Kit
    READ TABLE w_pmc_table WITH KEY matnr = wl_matnr_pmc.
    IF sy-subrc = 0. "There is PMC
* Write PMC (maximum consumer price) as the last line of product (after
* batch numbers).
      MOVE w_pmc_table-maktx TO j_1bprnfli-maktx.
***      CALL FUNCTION 'WRITE_FORM'
***        EXPORTING
***          element = 'BTCH'
***          window  = 'MAIN'
***        EXCEPTIONS
***          OTHERS  = 01.
    ENDIF.
  ENDIF.
* RFS042004 end of insertion

* --------------> Begin of inserted code CVS060698
  subipival = subipival + wk_item_add-ipival.
  subnfnet  = subnfnet  + wk_item_add-nfnet.
  CLEAR subt_icmsrate.                                      "CVS160798

* --------------> Begin of inserted code CVS160798
*... move line data to SAPScript ......................................*
  AT END OF icms_rate.
********************************************** BEGIN INCLUDE RCS091999
    IF cst_control-member_of_kit <> 'K' OR
      ( cst_control-member_of_kit = 'K' AND
      cst_control-type_of_next <> 'I' ).
********************************************** END INCLUDE RCS091999
      subt_icmsrate = 'X'.
* Don´t erase whole WA. Lost of refkey and other info is commited.!!!!!!
      MOVE j_1bprnfli TO tmpj_1bprnfli.
      CLEAR j_1bprnfli.
* JUP060698.............................................................
      MOVE-CORRESPONDING zsprnfauxi TO tmpzsprnfauxi.
      CLEAR zsprnfauxi.
      j_1bprnfli-maktx  = text-m01.
      j_1bprnfli-matorg = cst_control-cst(1).
      j_1bprnfli-taxsit = cst_control-cst+1(1).
      j_1bprnfli-ipival = subipival.
      j_1bprnfli-nfnet = subnfnet.
      j_1bprnfli-icmsrate = cst_control-icms_rate.          "CVS160798
      j_1bprnfli-refkey = tmpj_1bprnfli-refkey.
      IF cfop_dev EQ 'X'.                                   "FDO230998
***        CALL FUNCTION 'WRITE_FORM'                          "FDO230998
***             EXPORTING                                      "FDO230998
***                  element = 'SUBT_DEV'                      "FDO230998
***                  window  = 'MAIN'                          "FDO230998
***             EXCEPTIONS                                     "FDO230998
***                  OTHERS  = 01.                             "FDO230998
      ELSE.                                                 "FDO230998
*********************************************** BEGIN INCLUDE RCS091999
        IF cst_control-kit_header_or_items = 'I'
           AND cst_control-type_of_next <> 'I'.
          tmp_matnr = j_1bprnfli-matnr.
          tmp_maktx = j_1bprnfli-maktx.
* RFS092003 begin of insertion
          CLEAR: wl_last_rec.
* RFS092003 end of insertion
          LOOP AT kit_batch_control.
*
* RFS092003 begin of insertion
            AT LAST. MOVE 'X' TO wl_last_rec. ENDAT.
            IF wl_hc_batch_item_kit = 'H'.
* It is a health care product with more than one batch number:
* Print kit components values according to batch quantity.
              PERFORM kit_compvalues_acc_batch_quant
                    USING wl_last_rec.
            ENDIF.
* RFS092003 end of insertion
*
            j_1bprnfli-matnr = kit_batch_control-matnr.
            j_1bprnfli-maktx = kit_batch_control-maktx.
***            CALL FUNCTION 'WRITE_FORM'
***              EXPORTING
***                element = 'BTCH'
***                window  = 'MAIN'
***              EXCEPTIONS
***                OTHERS  = 01.
          ENDLOOP.
          j_1bprnfli-matnr = tmp_matnr.
          j_1bprnfli-maktx = tmp_maktx.
* RFS092003 begin of insertion
          j_1bprnfli-matorg = cst_control-cst(1).
          j_1bprnfli-taxsit = cst_control-cst+1(1).
          j_1bprnfli-ipival = subipival.
          j_1bprnfli-nfnet = subnfnet.
          j_1bprnfli-icmsrate = cst_control-icms_rate.
          j_1bprnfli-refkey = tmpj_1bprnfli-refkey.
* RFS092003 end of insertion
          CLEAR kit_batch_control.
          REFRESH kit_batch_control.
* RFS092003 begin of insertion
          REFRESH w_kit_components.
          CLEAR   w_kit_header.
          wl_clear_kit_control = 'X'.
* RFS092003 end of insertion
        ENDIF.
*********************************************** END INCLUDE RCS091999
***        CALL FUNCTION 'WRITE_FORM'
***          EXPORTING
***            element = 'SUBT'
***            window  = 'MAIN'
***          EXCEPTIONS
***            OTHERS  = 01.
      ENDIF.
      CLEAR subipival.
      CLEAR subnfnet.
      CLEAR zsprnfauxi.
      CLEAR j_1bprnfli.
      MOVE tmpj_1bprnfli TO j_1bprnfli.
*... add subtotals (begin of page) ....................................*

* begin change 21.07.97: statistical IPI
      IF j_1bprnfli-ipistat = ' '.
        j_1bprnfst-ipival    = j_1bprnfst-ipival + j_1bprnfli-ipival.
      ENDIF.
* end change 21.07.97: statistical IPI
      j_1bprnfst-nfnett    = j_1bprnfst-nfnett  + j_1bprnfli-nfnett.
      MOVE-CORRESPONDING tmpzsprnfauxi TO zsprnfauxi.
      CLEAR tmpzsprnfauxi.
    ENDIF.
  ENDAT.
* --------------> End of inserted code CVS160798
*... move line data to SAPScript ......................................*
  IF subt_icmsrate IS INITIAL.
    AT END OF cst.
********************************************** BEGIN INCLUDE RCS091999
      IF cst_control-member_of_kit <> 'K' OR
        ( cst_control-member_of_kit = 'K' AND
        cst_control-type_of_next <> 'I' ).
********************************************** END INCLUDE RCS091999
* Don´t erase whole WA. Lost of refkey and other info is commited.!!!!!!
        MOVE j_1bprnfli TO tmpj_1bprnfli.
        CLEAR j_1bprnfli.
* JUP060698.............................................................
        MOVE-CORRESPONDING zsprnfauxi TO tmpzsprnfauxi.
        CLEAR zsprnfauxi.
        j_1bprnfli-maktx  = text-m01.
        j_1bprnfli-matorg = cst_control-cst(1).
        j_1bprnfli-taxsit = cst_control-cst+1(1).
        j_1bprnfli-ipival = subipival.
        j_1bprnfli-nfnet = subnfnet.
        j_1bprnfli-icmsrate = cst_control-icms_rate.        "CVS160798
        j_1bprnfli-refkey = tmpj_1bprnfli-refkey.
        IF cfop_dev EQ 'X'.                                 "FDO230998
***          CALL FUNCTION 'WRITE_FORM'                        "FDO230998
***               EXPORTING                                    "FDO230998
***                    element = 'SUBT_DEV'                    "FDO230998
***                    window  = 'MAIN'                        "FDO230998
***               EXCEPTIONS                                   "FDO230998
***                    OTHERS  = 01.                           "FDO230998
        ELSE.                                               "FDO230998
*********************************************** BEGIN INCLUDE RCS091999
          IF cst_control-kit_header_or_items = 'I'
             AND cst_control-type_of_next <> 'I'.
            tmp_matnr = j_1bprnfli-matnr.
            tmp_maktx = j_1bprnfli-maktx.
* RFS092003 begin of insertion
            CLEAR: wl_last_rec.
* RFS092003 end of insertion
            LOOP AT kit_batch_control.
*
* RFS092003 begin of insertion
              AT LAST. MOVE 'X' TO wl_last_rec. ENDAT.
              IF wl_hc_batch_item_kit = 'H'.
* It is a health care product with more than one batch number:
* Print kit components values according to batch quantity.
                PERFORM kit_compvalues_acc_batch_quant
                      USING wl_last_rec.
              ENDIF.
* RFS092003 end of insertion
*
              j_1bprnfli-matnr = kit_batch_control-matnr.
              j_1bprnfli-maktx = kit_batch_control-maktx.
***              CALL FUNCTION 'WRITE_FORM'
***                EXPORTING
***                  element = 'BTCH'
***                  window  = 'MAIN'
***                EXCEPTIONS
***                  OTHERS  = 01.
            ENDLOOP.
            j_1bprnfli-matnr = tmp_matnr.
            j_1bprnfli-maktx = tmp_maktx.
* RFS092003 begin of insertion
            j_1bprnfli-matorg = cst_control-cst(1).
            j_1bprnfli-taxsit = cst_control-cst+1(1).
            j_1bprnfli-ipival = subipival.
            j_1bprnfli-nfnet = subnfnet.
            j_1bprnfli-icmsrate = cst_control-icms_rate.
            j_1bprnfli-refkey = tmpj_1bprnfli-refkey.
* RFS092003 end of insertion
            CLEAR kit_batch_control.
            REFRESH kit_batch_control.
* RFS092003 begin of insertion
            REFRESH w_kit_components.
            CLEAR   w_kit_header.
            wl_clear_kit_control = 'X'.
* RFS092003 end of insertion
          ENDIF.
*********************************************** END INCLUDE RCS091999
***          CALL FUNCTION 'WRITE_FORM'
***            EXPORTING
***              element = 'SUBT'
***              window  = 'MAIN'
***            EXCEPTIONS
***              OTHERS  = 01.
        ENDIF.
        CLEAR subipival.
        CLEAR subnfnet.
        CLEAR zsprnfauxi.
        CLEAR j_1bprnfli.
        MOVE tmpj_1bprnfli TO j_1bprnfli.
*... add subtotals (begin of page) ....................................*

* begin change 21.07.97: statistical IPI
        IF j_1bprnfli-ipistat = ' '.
          j_1bprnfst-ipival    = j_1bprnfst-ipival + j_1bprnfli-ipival.
        ENDIF.
* end change 21.07.97: statistical IPI
        j_1bprnfst-nfnett    = j_1bprnfst-nfnett  + j_1bprnfli-nfnett.
        MOVE-CORRESPONDING tmpzsprnfauxi TO zsprnfauxi.
        CLEAR tmpzsprnfauxi.
      ENDIF.
    ENDAT.
  ENDIF.
ENDLOOP.                                                    "CVS060698
CHECK retcode IS INITIAL.

*----------------------------------------------------------------------*
* fill main window up with totals per ICMS taxrate and taxsituation if
* - the branch is allowed to print NF's consisting of more than one page
* - there are different lines on the NF with the same taxsituation and/
*   or ICMS taxrate
* - there is more than one combination of ICMS taxrate and taxsituation
*   on this NF
*----------------------------------------------------------------------*

IF j_1bbranch-single = ' '.          "more than one page allowed
  DESCRIBE TABLE inter_total_table LINES totlines.
  IF totlines > 1.                   "more than one taxsituation or
    "icms rate on the NF

    LOOP AT inter_total_table.
      IF inter_total_table-condensed = 'X'.
        MOVE-CORRESPONDING inter_total_table TO j_1bprnfli.
      ENDIF.                      "inter_total_table-condensed = 'X'
    ENDLOOP.                         "at inter_total_table

  ENDIF.
ENDIF.                               "j_1bbranch-single = ' '

*----------------------------------------------------------------------*
*    fill main window up with remaining text lines                     *
*----------------------------------------------------------------------*

istart = istart + 1.
CLEAR: old_seqnum,
     j_1bprnftx-seqnum_cha.
LOOP AT wk_header_msg FROM istart.

*... fill communication structure .....................................*

  j_1bprnftx-seqnum  = wk_header_msg-seqnum.
  j_1bprnftx-message = wk_header_msg-message.
  IF old_seqnum <> wk_header_msg-seqnum.
    old_seqnum = wk_header_msg-seqnum.
    j_1bprnftx-seqnum_cha = wk_header_msg-seqnum.
  ELSE.
    CLEAR j_1bprnftx-seqnum_cha.
  ENDIF.

ENDLOOP.

*----------------------------------------------------------------------*
*    fill totals into communication structure (only printed on         *
*    last page, therefore filled at the end after the last print)      *
*----------------------------------------------------------------------*

MOVE-CORRESPONDING wk_header_add TO j_1bprnfhd.

*----------------------------------------------------------------------*
*    read tax type 'ICZF' - Zona Franca                                *
*----------------------------------------------------------------------*

*----------> RFS060199 Begin of inserction
CLEAR : zsprnfauxi-icms07,
      zsprnfauxi-icms12,
      zsprnfauxi-icms17,
      zsprnfauxi-icms18,
      zsprnfauxi-icms25.

* Inicio - Janete - 08/08/08 - Tratar ZF
CLEAR:  zsprnfauxi-valiczf,
        zsprnfauxi-valips3,
        zsprnfauxi-valicn3.
* Fim - Janete - 08/08/08 - Tratar ZF

*----------> RFS060199 End of inserction
LOOP AT wk_item_tax.
*{Begin of BN8068-090128
*  IF wk_item_tax-taxtyp = 'ICZF'.
*    zsprnfauxi-valiczf = zsprnfauxi-valiczf + wk_item_tax-taxval.
*  ENDIF.
*{End of BN8068-090128

* Inicio - Janete - 08/08/08 - Ler KNVI p/msg ZF
  IF wk_item_tax-taxtyp = 'IPS3'.
    zsprnfauxi-valips3 = zsprnfauxi-valips3 + wk_item_tax-taxval.
  ENDIF.
  IF wk_item_tax-taxtyp = 'ICN3'.
    zsprnfauxi-valicn3 = zsprnfauxi-valicn3 + wk_item_tax-taxval.
  ENDIF.
* Não imprime valor negativo para ICZF
*{Begin of BN8068-090128
*  zsprnfauxi-valiczf_1 = zsprnfauxi-valiczf.
*  IF zsprnfauxi-valiczf_1 LT 0.
*    zsprnfauxi-valiczf_1 = zsprnfauxi-valiczf_1 * -1.
*  ENDIF.
*{End of BN8068-090128
* Fim - janete - 08/08/08 - ler knvi p/msg zf

*   IF WK_ITEM_TAX-TAXTYP = 'ICM3'.                        "RS1906698B
*     ZSPRNFAUXI-ICMSBASE = ZSPRNFAUXI-ICMSBASE +          "RS1906698B
*                           WK_ITEM_TAX-BASE +             "RS1906698B
*                           WK_ITEM_TAX-EXCBAS +           "RS1906698B
*                           WK_ITEM_TAX-OTHBAS.            "RS1906698B
*   ENDIF
  IF wk_item_tax-taxtyp = 'ICM3'.                           "CVS100798
    zsprnfauxi-icmsbase = zsprnfauxi-icmsbase +             "CVS100798
                          wk_item_tax-base.                 "CVS100798
    zsprnfauxi-icmsexcbas = zsprnfauxi-icmsexcbas +         "CVS100798
                            wk_item_tax-excbas.             "CVS100798
    zsprnfauxi-icmsothbas = zsprnfauxi-icmsothbas +         "CVS100798
                            wk_item_tax-othbas.             "CVS100798
  ENDIF.                                                    "CVS100798
* begin of modification FDO230998
  IF wk_item_tax-taxtyp = 'ICM1'.
    zsprnfauxi-icmsbase = zsprnfauxi-icmsbase +
                          wk_item_tax-base.
    zsprnfauxi-icmsexcbas = zsprnfauxi-icmsexcbas +
                            wk_item_tax-excbas.
    zsprnfauxi-icmsothbas = zsprnfauxi-icmsothbas +
                            wk_item_tax-othbas.
  ENDIF.
* end of modification FDO230998
  IF wk_item_tax-taxtyp = 'IPI3'.                           "CVS100798
    zsprnfauxi-ipibase = zsprnfauxi-ipibase +               "CVS100798
                         wk_item_tax-base.                  "CVS100798
    zsprnfauxi-ipiexcbas = zsprnfauxi-ipiexcbas +           "CVS100798
                           wk_item_tax-excbas.              "CVS100798
    zsprnfauxi-ipiothbas = zsprnfauxi-ipiothbas +           "CVS100798
                           wk_item_tax-othbas.              "CVS100798
  ENDIF.                                                    "CVS100798
  IF wk_item_tax-taxtyp = 'ICS3'.                           "CVS100798
    zsprnfauxi-stbase = zsprnfauxi-stbase +                 "CVS100798
                        wk_item_tax-base.                   "CVS100798
    zsprnfauxi-stexcbas = zsprnfauxi-stexcbas +             "CVS100798
                          wk_item_tax-excbas.               "CVS100798
    zsprnfauxi-stothbas = zsprnfauxi-stothbas +             "CVS100798
                          wk_item_tax-othbas.               "CVS100798
  ENDIF.                                                    "CVS100798
*----------> RFS060199 Begin of inserction
  CLEAR tax_types.
  READ TABLE tax_types WITH KEY taxtyp = wk_item_tax-taxtyp
                    BINARY SEARCH.
  IF sy-subrc EQ 0.
    IF tax_types-taxgrp = 'ICMS'.
      IF wk_item_tax-rate = 7.
        zsprnfauxi-icms07 = zsprnfauxi-icms07 + wk_item_tax-taxval.
      ELSE.
        IF wk_item_tax-rate = 12.
          zsprnfauxi-icms12 = zsprnfauxi-icms12 + wk_item_tax-taxval.
        ELSE.
          IF wk_item_tax-rate = 17.
            zsprnfauxi-icms17 = zsprnfauxi-icms17 + wk_item_tax-taxval.
          ELSE.
            IF wk_item_tax-rate = 18.
              zsprnfauxi-icms18 = zsprnfauxi-icms18 + wk_item_tax-taxval.
            ELSE.
              IF wk_item_tax-rate = 25.
                zsprnfauxi-icms25 = zsprnfauxi-icms25 + wk_item_tax-taxval.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.
*----------> RFS060199 End of inserction
ENDLOOP.
*j_1bprnfhd-nftot = j_1bprnfhd-nftot + zsprnfauxi-valiczf.
*{Begin of BN8068-090128
*j_1bprnfhd-nftot = j_1bprnfhd-nftot - zsprnfauxi-valiczf.
*{End of BN8068-090128
* Inicio - Janete - 08/08/08 - Ler KNVI p/msg ZF
*j_1bprnfhd-nftot = j_1bprnfhd-nftot + w_piscofins_value.    "RFS072005
IF knvi-taxkd = c_2.
  j_1bprnfhd-nftot = j_1bprnfhd-nftot - w_piscofins_value.
ELSE.
  j_1bprnfhd-nftot = j_1bprnfhd-nftot + w_piscofins_value.
ENDIF.
* Fim - Janete - 08/08/08 - Ler KNVI p/msg ZF
*
* RFS062003 begin of insertion
IF NOT zsprnfauxi-percdesc1 IS INITIAL.
  zsprnfauxi-valdesc1 = j_1bprnfhd-nftot * zsprnfauxi-percdesc1 / 100.
  zsprnfauxi-netwodesc1 = j_1bprnfhd-nftot - zsprnfauxi-valdesc1.
ENDIF.
IF NOT zsprnfauxi-percdesc2 IS INITIAL.
  zsprnfauxi-valdesc2 = j_1bprnfhd-nftot * zsprnfauxi-percdesc2 / 100.
  zsprnfauxi-netwodesc2 = j_1bprnfhd-nftot - zsprnfauxi-valdesc2.
ENDIF.

*** Begin DDN012008
v_total = j_1bprnfhd-nftot.
*** End DDN012008
* RFS062003 end of insertion
*
*** BEGIN INCLUDE RCS062001 - Include freight in exports invoices
j_1bprnfhd-nfnett = j_1bprnfhd-nfnett - j_1bprnfhd-nffre.
v_kwert1 = j_1bprnfhd-nffre.
*** END INCLUDE RCS062001
* J_1BPRNFHD-ICMSBASE = ZSPRNFAUXI-ICMSBASE.               "RS1906698B
j_1bprnfhd-icmsbase = zsprnfauxi-icmsbase. "+            "CVS130798
* Do not need to print the total IPI value.
* if zsprnfauxi-subcfop eq '531'                              "RFS112002
IF zsprnfauxi-subcfop EQ '5201'                             "RFS112002
*  or zsprnfauxi-subcfop eq '532'                             "RFS112002
OR zsprnfauxi-subcfop EQ '5202'                             "RFS112002
*  or zsprnfauxi-subcfop eq '631'                             "RFS112002
OR zsprnfauxi-subcfop EQ '6201'                             "RFS112002
*  or zsprnfauxi-subcfop eq '632'                             "RFS112002
OR zsprnfauxi-subcfop EQ '6202'                             "RFS112002
*  or zsprnfauxi-subcfop eq '695'     "JANM 26091999          "RFS112002
OR zsprnfauxi-subcfop EQ '6556'    "JANM 26091999          "RFS112002
*  or zsprnfauxi-subcfop eq '595'.                            "RFS112002
OR zsprnfauxi-subcfop EQ '5556'.                            "RFS112002
  CLEAR j_1bprnfhd-ipival.
ENDIF.
* RS180898 : Do not show ICMS base when ICMS not calculated.
*            I commented the next two lines.
*                       ZSPRNFAUXI-ICMSEXCBAS +            "CVS130798
*                       ZSPRNFAUXI-ICMSOTHBAS.             "CVS130798

*----------------------------------------------------------------------*
*    write texts to TEXTS window                                       *
*----------------------------------------------------------------------*

LOOP AT wk_header_msg.
  indmsg = wk_header_msg-seqnum.
ENDLOOP.
*   istart = j_1bb2-totlih.
PERFORM read_tables_msg.
IF proctype NE 'ST'.
  IF vbak-bstnk(8) = 'WELLAPRO'.                               "WELLAPRO
    zsprnfauxi-bstnk = vbak-bstnk+9(11).                       "WELLAPRO
  ELSE.                                                        "WELLAPRO
    zsprnfauxi-bstnk = vbak-bstnk.
  ENDIF.                                                       "WELLAPRO
ENDIF.
*{ ICSTO development
IF proctype EQ 'IS'.
  READ TABLE f_ekko INDEX 1.
  IF sy-subrc EQ 0.
    zsprnfauxi-bstnk = f_ekko-ebeln.
  ELSE.
    LOOP AT f_lips WHERE vgpos EQ 'V'.
      IF f_lips-vgbel NE space.
        zsprnfauxi-bstnk = f_lips-vgbel.
        EXIT.
      ENDIF.
    ENDLOOP.
  ENDIF.
* Fill F_EKPO to extract Shipping instructions
  CLEAR f_ekpo.
  LOOP AT f_ekpo WHERE evers NE space.
    EXIT.
  ENDLOOP.
* Determine number of pallets and store in PALNUM_TXT
  PERFORM spell_pallets CHANGING zsprnfauxi-palnum_txt
                                 icsto_palnum.
*----------> RFS022002 begin of insertion
*LSEIF w_auart = 'ZICS'
ELSEIF vbrk-vtweg EQ '02'. "Intercompany or exports
  PERFORM spell_pallets CHANGING zsprnfauxi-palnum_txt
                                 icsto_palnum.
*----------> RFS022002 end   of insertion
ENDIF.
*}
*** Begin DDN240907
SELECT SINGLE * INTO ztxxctatvs FROM ztxxctatvs
   WHERE
    kunnr EQ kna1-kunnr AND
    vkorg EQ vbak-vkorg AND
    vtweg EQ vbak-vtweg AND
    spart EQ vbak-spart AND
    zatrnr EQ '32'.
*** End DDN240907
CASE proctype.
  WHEN 'IM'.
    SELECT * FROM  zstxtdetim
           WHERE  bwart       = mseg-bwart.
      MOVE-CORRESPONDING zstxtdetim TO wk_zstxtdeter.
      PERFORM message_verify.
    ENDSELECT.
  WHEN 'ST'.
* BEGIN OF CCV102005
    IF vbak-auart EQ 'ZAP1'.
      SELECT SINGLE bstyp
                    bsart
         INTO (ekko-bstyp,
               ekko-bsart)
         FROM ekko
         WHERE ebeln EQ vbak-bstnk.
      MOVE lips-vbeln TO vbrp-vgbel.
    ENDIF.
* END OF CCV102005
    SELECT * FROM  zstxtdesto
           WHERE  bstyp       = ekko-bstyp
           AND    bsart       = ekko-bsart
           AND    regio       = shipfrom.
      wk_zstxtdeter = zstxtdesto.
      PERFORM message_verify.
    ENDSELECT.
  WHEN OTHERS.
*
* RFS072004 begin of insertion
    DATA: wl_nbm LIKE j_1bnflin-nbm.
    CLEAR znbm.
* Check table ZNBM to determine if the value and base value of
* Substituição Tributária must be printed as observations.
* The field ZNBM-ZSUBTASOBS and table ZSTXTDETER will define the message
* to be printed and the field ZNBM-ZSUBTASOBS will be used later on to
* determine that the value and base value of Substituição Tributária
* must be printed as observations.
    LOOP AT wk_item.
      CLEAR wl_nbm.
      SELECT SINGLE nbm INTO wl_nbm FROM  j_1bnflin
         WHERE  docnum      = wk_item-docnum
         AND    itmnum      = wk_item-itmnum.
      CHECK sy-subrc = 0.
      CLEAR znbm.
      SELECT SINGLE * FROM  znbm
         WHERE  vbtyp       = vbak-vbtyp "Document category
         AND    auart       = vbak-auart "Document type
         AND    regio_from  = shipfrom   "State from
         AND    regio_to    = kna1-regio "State to
         AND    steuc       = wl_nbm.    "NBM code
      IF sy-subrc = 0
      AND znbm-zsubtasobs EQ 'X'.
* Write Sub.Trib. as observation
        EXIT.
      ENDIF.
    ENDLOOP.
* RFS072004 end of insertion
*
    SELECT * FROM  zstxtdeter
           WHERE  vbtyp       = vbak-vbtyp
           AND    auart       = vbak-auart
           AND    regio       = shipfrom.
      wk_zstxtdeter = zstxtdeter.

*" Mensagem PIS/COFINS
      IF wk_zstxtdeter-campo1 = 'KSCHL'.

        PERFORM f_message_verify_pricing.

      ELSE.
*} End of BN8068-081119

        PERFORM message_verify.

      ENDIF.

    ENDSELECT.
ENDCASE.

*    if istart > 15.   "maximum number of fields in J_1BPRNFTX
istart = 15.                                                " RCS050898
*    endif.

*... fill fields in communication structure J_1BPRNFTX ................*

*   do istart times varying seqnum  from j_1bprnftx-seqnum01
*                                   next j_1bprnftx-seqnum02
*                   varying message from j_1bprnftx-message01
*                                   next j_1bprnftx-message02.
*
*     read table wk_header_msg index sy-index.
*     if sy-subrc <> 0.
*       exit.
*     endif.
*     seqnum  = wk_header_msg-seqnum.
*     message = wk_header_msg-message.
*
*   enddo.

*----------------------------------------------------------------------*
*    Clear ICMSBASE and ICMSVAL when ICSTVAL ne 0
*----------------------------------------------------------------------*

IF j_1bprnfhd-icstval NE 0.
*
* RFS072004 begin of insertion
  IF proctype NE 'IM' AND proctype NE 'ST'.
    IF znbm-zsubtasobs NE 'X'. "Don't write Subst.Trib. as obs.
* RFS072004 end of insertion
*
      CLEAR j_1bprnfhd-icmsbase.
      CLEAR j_1bprnfhd-icmsval.
*
* RFS072004 begin of insertion
    ELSE.
* Write Substituição Tributária as observation
      CLEAR j_1bprnfhd-icstval.
      CLEAR j_1bprnfhd-icstbase.
    ENDIF.
  ELSE.
    CLEAR j_1bprnfhd-icmsbase.
    CLEAR j_1bprnfhd-icmsval.
  ENDIF.
* RFS072004 end of insertion
*
ENDIF.

*----------------------------------------------------------------------*
seqnum = 0.
DO istart TIMES.

  READ TABLE wk_header_msg INDEX sy-index.
  IF sy-subrc <> 0.
    EXIT.
  ENDIF.
  CLEAR: seqxxx, msgxxx.
  msgp1 = wk_header_msg-message.
*   msgp2 = wk_header_msg-message+47(25).
  IF msgp1 NE space.
    seqnum = seqnum + 01.
    IF seqnum GT 15.                                        " RCS050898
      PERFORM pclog USING 'I' text-015 space space
                                       space space.
      "There are more texts in NF. Don´t fit in NF form
      EXIT.
    ENDIF.
    CONCATENATE 'J_1BPRNFTX-SEQNUM' seqnum INTO seqxxx.
    CONCATENATE 'J_1BPRNFTX-MESSAGE' seqnum INTO msgxxx.
    ASSIGN (seqxxx) TO <tx>.
    ASSIGN (msgxxx) TO <tz>.
    MOVE wk_header_msg-seqnum TO <tx>.
    MOVE msgp1 TO <tz>.
  ENDIF.
*   if msgp2 ne space.
*     seqnum = seqnum + 01.
*     if seqnum gt 15.                                      " RCS050898
*       perform pclog using 'I' text-015 space space
*                                        space space.
*       "There are more texts in NF. Don´t fit in NF form
*       exit.
*     endif.
*     concatenate 'J_1BPRNFTX-SEQNUM' seqnum into seqxxx.
*     concatenate 'J_1BPRNFTX-MESSAGE' seqnum into msgxxx.
*     assign (seqxxx) to <tx>.
*     assign (msgxxx) to <tz>.
*     move wk_header_msg-seqnum to <tx>.
*     move msgp2 to <tz>.
*   endif.
ENDDO.

DELETE wk_header_msg WHERE message IS INITIAL.
DELETE ADJACENT DUPLICATES FROM wk_header_msg COMPARING message.

ENDFORM.                                              "print_nota_fiscal
*----------------------------------------------------------------------*
FORM message_verify.

  SELECT SINGLE * FROM  zstxtlegal
         WHERE   codmsg      = wk_zstxtdeter-codmsg AND
             NOT codmsg      IN r_codmsg.
* Início alteração Francis Souza - 03/08/2008
  IF sy-subrc = 0.
* Fim alteração Francis Souza - 03/08/2008
    IF wk_zstxtdeter-item1 EQ 'X' OR
       wk_zstxtdeter-item2 EQ 'X' OR
       wk_zstxtdeter-item3 EQ 'X' OR
       wk_zstxtdeter-item4 EQ 'X' OR
       wk_zstxtdeter-item5 EQ 'X'.
      LOOP AT wk_item.
        PERFORM read_tables_msg_item.
        PERFORM determinate_message.
      ENDLOOP.
    ELSE.
* Início - Diogo A Oliveira - 09/08/08 - Tratar ZF
* Não imprimir valor da msg 995 para ZF
      IF wk_zstxtdeter-codmsg = '0995'.
        IF knvi-taxkd = c_2.
          REPLACE c_txt_zf IN zstxtlegal-linha1 WITH space.
        ENDIF.
      ENDIF.
* Fim - Diogo A Oliveira - 09/08/08 - Tratar ZF
*     PERFORM determinate_message. " JANETE 09/08/2008 17:30
      PERFORM determinate_message.
    ENDIF.
* Início alteração Francis Souza - 03/08/2008
  ENDIF.
* Fim alteração Francis Souza - 03/08/2008

ENDFORM.                               " MESSAGE_VERIFY
*----------------------------------------------------------------------*
FORM determinate_message.

  msgprint = 'Y'.
  IF wk_zstxtdeter-campo1 NE ' '.
    ASSIGN (wk_zstxtdeter-campo1) TO <s1>.
    IF wk_zstxtdeter-oper1 EQ 'NE'.
      IF <s1> EQ wk_zstxtdeter-valor1.
        msgprint = 'N'.
      ENDIF.
      IF <s1> IS INITIAL.
        msgprint = 'N'.
      ENDIF.
    ELSE.
      IF <s1> NE wk_zstxtdeter-valor1.
        msgprint = 'N'.
      ENDIF.
    ENDIF.
  ENDIF.
  IF wk_zstxtdeter-campo2 NE ' '.
    ASSIGN (wk_zstxtdeter-campo2) TO <s1>.
    IF wk_zstxtdeter-oper2 EQ 'NE'.
      IF <s1> EQ wk_zstxtdeter-valor2.
        msgprint = 'N'.
      ENDIF.
      IF <s1> IS INITIAL.
        msgprint = 'N'.
      ENDIF.
    ELSE.
      IF <s1> NE wk_zstxtdeter-valor2.
        msgprint = 'N'.
      ENDIF.
    ENDIF.
  ENDIF.
  IF wk_zstxtdeter-campo3 NE ' '.
    ASSIGN (wk_zstxtdeter-campo3) TO <s1>.
    IF wk_zstxtdeter-oper3 EQ 'NE'.
      IF <s1> EQ wk_zstxtdeter-valor3.
        msgprint = 'N'.
      ENDIF.
      IF <s1> IS INITIAL.
        msgprint = 'N'.
      ENDIF.
    ELSE.
      IF <s1> NE wk_zstxtdeter-valor3.
        msgprint = 'N'.
      ENDIF.
    ENDIF.
  ENDIF.
  IF wk_zstxtdeter-campo4 NE ' '.
    ASSIGN (wk_zstxtdeter-campo4) TO <s1>.
    IF wk_zstxtdeter-oper4 EQ 'NE'.
      IF <s1> EQ wk_zstxtdeter-valor4.
        msgprint = 'N'.
      ENDIF.
      IF <s1> IS INITIAL.
        msgprint = 'N'.
      ENDIF.
    ELSE.
      IF <s1> NE wk_zstxtdeter-valor4.
        msgprint = 'N'.
      ENDIF.
    ENDIF.
  ENDIF.
  IF wk_zstxtdeter-campo5 NE ' '.
    ASSIGN (wk_zstxtdeter-campo5) TO <s1>.
    IF wk_zstxtdeter-oper5 EQ 'NE'.
      IF <s1> EQ wk_zstxtdeter-valor5.
        msgprint = 'N'.
      ENDIF.
      IF <s1> IS INITIAL.
        msgprint = 'N'.
      ENDIF.
    ELSE.
      IF <s1> NE wk_zstxtdeter-valor5.
        msgprint = 'N'.
      ENDIF.
    ENDIF.
  ENDIF.
  IF msgprint EQ 'Y'.
    PERFORM create_message.
  ENDIF.

ENDFORM.                               " DETERMINATE_MESSAGE
*----------------------------------------------------------------------*
FORM create_message.

  CLEAR: wk_header_msg.
  wk_header_msg-mandt = sy-mandt.
  wk_header_msg-docnum = wk_header-docnum.
  wk_header_msg-linnum = 01.
  ASSIGN (zstxtlegal-param1) TO <ty>.
  DESCRIBE FIELD <ty> TYPE par1type.
*   write: / zstxtlegal-param1, <ty>, par1type.
  ASSIGN (zstxtlegal-param2) TO <tz>.
  DESCRIBE FIELD <tz> TYPE par2type.
*   write: / zstxtlegal-param2, <tz>, par2type.
  MOVE zstxtlegal-linha1 TO msgaux.
  MOVE <ty> TO valparam1.
  IF par1type = 'P'.
    TRANSLATE valparam1 USING '.,'.
  ENDIF.
  REPLACE '&1' WITH valparam1 INTO msgaux.
  MOVE <tz> TO valparam2.
  IF par2type = 'P'.
    TRANSLATE valparam2 USING '.,'.
  ENDIF.
  REPLACE '&2' WITH valparam2 INTO msgaux.
  CONDENSE msgaux.
  wk_header_msg-message = msgaux.
  indmsg = indmsg + 1.
  wk_header_msg-seqnum = indmsg.
  APPEND wk_header_msg.

  IF NOT zstxtlegal-codmsg EQ '3000' AND
     NOT zstxtlegal-codmsg EQ '3001'.
    e_codmsg-sign   = c_i.
    e_codmsg-option = c_eq.
    e_codmsg-low    = zstxtlegal-codmsg.
    APPEND e_codmsg TO r_codmsg.
  ENDIF.

  IF zstxtlegal-linha2 NE ' '.
    MOVE zstxtlegal-linha2 TO msgaux.
    REPLACE '&1' WITH valparam1 INTO msgaux.
    REPLACE '&2' WITH valparam2 INTO msgaux.
    CONDENSE msgaux.
    wk_header_msg-message = msgaux.
    indmsg = indmsg + 1.
    wk_header_msg-seqnum = indmsg.
    APPEND wk_header_msg.
  ENDIF.

  IF zstxtlegal-linha3 NE ' '.
    MOVE zstxtlegal-linha3 TO msgaux.
    REPLACE '&1' WITH valparam1 INTO msgaux.
    REPLACE '&2' WITH valparam2 INTO msgaux.
    CONDENSE msgaux.
    wk_header_msg-message = msgaux.
    indmsg = indmsg + 1.
    wk_header_msg-seqnum = indmsg.
    APPEND wk_header_msg.
  ENDIF.

ENDFORM.                               " CREATE_MESSAGE
*&---------------------------------------------------------------------*
FORM read_tables_msg.

  SELECT SINGLE * FROM kna1
         WHERE  kunnr       = j_1bprnfhd-parid.
  IF sy-subrc NE 0.
    CLEAR kna1.
  ENDIF.

*> ---------------> Begin of inserted code CVS060698
*----------------------------------------------------------------------*
*    Check frete por conta                                             *
*----------------------------------------------------------------------*
  IF kna1-name3 EQ 'X'.
    zsprnfauxi-frecont = '2'.
  ELSE.
    zsprnfauxi-frecont = '1'.
  ENDIF.
*> ---------------> End of inserted code CVS060698

*&---------------------------------------------------------------------*
  READ TABLE wk_item INDEX 1.
  MOVE wk_item-refkey TO key_vbrk.
  IF proctype NE 'IM'.
    SELECT SINGLE * FROM  vbrk
           WHERE  vbeln       = key_vbrk-vbeln.
    IF sy-subrc NE 0.
      CLEAR vbrk.
    ENDIF.

    SELECT SINGLE * FROM  vbrp
           WHERE  vbeln       = key_vbrk-vbeln
           AND    posnr       = wk_item-refitm.
    IF sy-subrc NE 0.
      CLEAR vbrp.
    ENDIF.

    IF proctype NE 'ST' AND
*{ ICSTO development
       proctype NE 'IS'.
*}
      SELECT SINGLE * FROM  vbak
             WHERE  vbeln       = vbrp-aubel.
      IF sy-subrc NE 0.
        CLEAR vbak.
      ENDIF.
    ELSE.
      SELECT SINGLE * FROM  ekko
             WHERE  ebeln       = vbrp-aubel.
      IF sy-subrc NE 0.
        CLEAR ekko.
      ENDIF.
    ENDIF.
  ELSE.
    SELECT SINGLE * FROM  mkpf
           WHERE  mblnr       = wk_item-refkey(10)
           AND    mjahr       = wk_item-refkey+10(04).
    IF sy-subrc NE 0.
      CLEAR mkpf.
    ENDIF.
    SELECT        * FROM  mseg
           WHERE  mblnr       = mkpf-mblnr
           AND    mjahr       = mkpf-mjahr.
      EXIT.
    ENDSELECT.
    IF sy-subrc NE 0.
      CLEAR mseg.
    ENDIF.
  ENDIF.

ENDFORM.                               " READ_TABLES_MSG
*&---------------------------------------------------------------------*
FORM read_tables_msg_item.

  READ TABLE wk_item_add WITH KEY docnum = wk_item-docnum
                            itmnum = wk_item-itmnum.

  SELECT SINGLE * FROM  j_1bnflin
         WHERE  docnum      = wk_item-docnum
         AND    itmnum      = wk_item-itmnum.
  IF sy-subrc NE 0.
    CLEAR j_1bnflin.
  ENDIF.
  IF j_1bnflin-maktx IS INITIAL.
    SELECT SINGLE maktx INTO (j_1bnflin-maktx)
                        FROM makt
                        WHERE matnr EQ j_1bnflin-matnr AND
                              spras EQ sy-langu.
  ENDIF.
  IF proctype NE 'IM'.
    MOVE wk_item-refkey TO key_vbrk.
    SELECT SINGLE * FROM  vbrp
           WHERE  vbeln       = key_vbrk-vbeln
           AND    posnr       = wk_item-refitm.
    IF sy-subrc NE 0.
      CLEAR vbrp.
    ENDIF.
* Begin AM022008
    CLEAR: wk_item_lips, wk_item_lips[].
    wk_item_lips[] = wk_item[].
    DESCRIBE TABLE wk_item_lips LINES v_lips1.
    READ TABLE wk_item_lips WITH KEY docnum = wk_item-docnum
                                     itmnum = wk_item-itmnum.
    v_lips2 = sy-tabix.
    IF v_lips1 EQ v_lips2.
      IF wk_zstxtdeter-campo1 EQ 'LIPS-PSTYV'.
        SELECT SINGLE * FROM  lips
               WHERE vbeln        = vbrp-vgbel
               AND   pstyv        = c_pallet_pstyv.
        IF NOT sy-subrc IS INITIAL.
          CLEAR lips.
        ENDIF.
      ENDIF.
    ENDIF.
* End AM022008
    IF proctype NE 'ST'
*{ ICSTO developments
   AND proctype NE 'IS'.
*}
      SELECT SINGLE * FROM  vbap
             WHERE  vbeln       = vbrp-aubel
             AND    posnr       = vbrp-aupos.
      IF sy-subrc NE 0.
        CLEAR vbap.
      ENDIF.
    ELSE.
      SELECT SINGLE * FROM  ekpo
             WHERE  ebeln       = vbrp-aubel
             AND    ebelp       = vbrp-aupos.
      IF sy-subrc NE 0.
        CLEAR ekpo.
      ENDIF.
    ENDIF.
  ELSE.

    SELECT        * FROM  mseg
           WHERE  mblnr       = mkpf-mblnr
           AND    mjahr       = mkpf-mjahr
           AND    matnr       = wk_item-matnr.
    ENDSELECT.
    IF sy-subrc NE 0.
      CLEAR mseg.
    ENDIF.
  ENDIF.

ENDFORM.                               " READ_TABLES_MSG_ITEM
*&---------------------------------------------------------------------*
*&      Form  READ_ICSTO
*&---------------------------------------------------------------------*
*       ICSTO data                                                     *
*----------------------------------------------------------------------*
*  -->  ICSTO_NUM        ICSTO Number
*----------------------------------------------------------------------*
FORM read_icsto USING value(ord_pa) LIKE ekko-ebeln.
  CLEAR:  f_ekko,     f_ekpo,       f_eket,    f_ekpv,
          f_ekbe,     f_ekbes,      f_likp,    f_lips.

  REFRESH: f_ekko,     f_ekpo,       f_eket,    f_ekpv,
           f_ekbe,     f_ekbes,      f_likp,    f_lips.

  PERFORM ekko_lessen USING ord_pa CHANGING f_ekko.
  SORT f_ekko.
  DELETE ADJACENT DUPLICATES FROM f_ekko.
*- Positionen lesen ---------------------------------------------------*
  if_lines> f_ekko.
  SELECT * FROM ekpo INTO TABLE f_ekpo
         FOR ALL ENTRIES IN f_ekko
         WHERE ebeln EQ f_ekko-ebeln
         ORDER BY PRIMARY KEY.
  IF sy-dbcnt LE 0.
    PERFORM pclog USING 'W' 'Purchase order &1 without items'(020)
                            f_ekko-ebeln space space space.
  ENDIF.
*- Einteilungen lesen -------------------------------------------------*
  SELECT * FROM eket INTO TABLE f_eket
         FOR ALL ENTRIES IN f_ekko
         WHERE ebeln EQ f_ekko-ebeln
         ORDER BY PRIMARY KEY.
  IF sy-dbcnt LE 0.
    PERFORM pclog USING 'W' 'PO &1 without delivery Schedule'(023)
                            f_ekko-ebeln space space space.
  ENDIF.
*- Shipping data ------------------------------------------------------*
  SELECT * FROM ekpv INTO TABLE f_ekpv
         FOR ALL ENTRIES IN f_ekko
         WHERE ebeln EQ f_ekko-ebeln
        ORDER BY PRIMARY KEY.
  IF sy-dbcnt LE 0.
    PERFORM pclog USING 'W' 'PO &1 without shipping info'(024)
                            f_ekko-ebeln space space space.
  ENDIF.
*- Customizing snap shot ----------------------------------------------*
ELSE.
  PERFORM pclog USING 'E'
  'No purchase orders to be printed'(025)
                     space space space space.
  retcode = 1.
  CHECK 1 EQ 2.
ENDIF.
ENDFORM.                    " READ_ICSTO
*&---------------------------------------------------------------------*
*&      Form  EKKO_LESSEN
*&---------------------------------------------------------------------*
*  -->  P_EBELN   PO number
*  <--  P_EKKO    Data
*----------------------------------------------------------------------*
FORM ekko_lessen USING value(p_ebeln) LIKE ekko-ebeln
                    CHANGING p_ekko STRUCTURE ekko.

*Begin CSL_UPG46RFH20030214
* CALL FUNCTION 'ME_READ_HEADER_SINGLE'
*      EXPORTING
*           I_EBELN            = P_EBELN
*      IMPORTING
*           E_EKKO             = P_EKKO
*      EXCEPTIONS
*           OTHERS             = 2.

  CALL FUNCTION 'ME_EKKO_SINGLE_READ'
    EXPORTING
      pi_ebeln                  = p_ebeln
*   PI_BYPASSING_BUFFER       =
*   PI_REFRESH_BUFFER         =
    IMPORTING
      po_ekko                   = p_ekko
    EXCEPTIONS
      no_records_found          = 1
      OTHERS                    = 2.

*End CSL_UPG46RFH20030214
  IF sy-subrc EQ 0 AND NOT p_ekko IS INITIAL.
    APPEND p_ekko TO f_ekko.
  ELSE.
    CLEAR p_ekko.
  ENDIF.
ENDFORM.                    " EKKO_LESSEN
*&---------------------------------------------------------------------*
*&      Form  READ_PO_HISTORY
*&---------------------------------------------------------------------*
FORM read_po_history.

* Support for append lines of
  DATA: hlp_ekbe  LIKE  ekbe  OCCURS 10 WITH HEADER LINE,
        hlp_ekbes LIKE  ekbes OCCURS 10 WITH HEADER LINE,
        hlp_ekbez LIKE  ekbez OCCURS 10 WITH HEADER LINE,
        hlp_ekbnk LIKE  ekbnk OCCURS 10 WITH HEADER LINE,
        hlp_ekbz  LIKE  ekbz  OCCURS 10 WITH HEADER LINE.

  LOOP AT f_ekpo.
    REFRESH: hlp_ekbe, hlp_ekbes, hlp_ekbez, hlp_ekbnk, hlp_ekbz.
    CALL FUNCTION 'ME_READ_HISTORY'
      EXPORTING
        ebeln  = f_ekpo-ebeln
        ebelp  = f_ekpo-ebelp
        webre  = f_ekpo-webre
      TABLES
        xekbe  = hlp_ekbe
        xekbes = hlp_ekbes
        xekbez = hlp_ekbez
        xekbnk = hlp_ekbnk
        xekbz  = hlp_ekbz
      EXCEPTIONS
        OTHERS = 1.
    APPEND LINES OF: hlp_ekbe  TO f_ekbe,   hlp_ekbes TO f_ekbes,
                     hlp_ekbez TO f_ekbez,  hlp_ekbnk TO f_ekbnk,
                     hlp_ekbz  TO f_ekbz.
  ENDLOOP.
  SORT: f_ekbe,   f_ekbes,   f_ekbez,   f_ekbes,   f_ekbz.
  FREE: hlp_ekbe, hlp_ekbes, hlp_ekbez, hlp_ekbnk, hlp_ekbz.

ENDFORM.                    " READ_PO_HISTORY
*&---------------------------------------------------------------------*
*&      Form  CONSTRUCT_BELEGFLUB
*&---------------------------------------------------------------------*
FORM construct_belegflub.

  LOOP AT f_ekbe WHERE vgabe EQ delivery_sto AND
                       bewtp EQ dlnt.
    MOVE: f_ekbe-belnr TO delivery-vbeln,
          f_ekbe-gjahr+2(2) TO delivery-posnr+0(2), "Weird behavior!!!
          f_ekbe-buzei      TO delivery-posnr+2(4), "Weird behavior!!!
          f_ekbe-ebeln TO delivery-ebeln,
          f_ekbe-ebelp TO delivery-ebelp,
          f_ekbe-belnr TO query-vbeln.
    COLLECT: delivery,  query.
  ENDLOOP.
  SORT: delivery, query.

ENDFORM.                    " CONSTRUCT_BELEGFLUB
*&---------------------------------------------------------------------*
*&      Form  READ_DELIVERY_NOTE
*&---------------------------------------------------------------------*
*       text                                                           *
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM read_delivery_note.

* Header
  SELECT DISTINCT * FROM likp INTO TABLE f_likp
     FOR ALL ENTRIES IN query
     WHERE vbeln EQ query-vbeln
     ORDER BY PRIMARY KEY.

  CHECK sy-dbcnt GT 0.

* Item
  SELECT DISTINCT * FROM lips INTO TABLE f_lips
     FOR ALL ENTRIES IN query
     WHERE vbeln EQ query-vbeln
     ORDER BY PRIMARY KEY.

* Include the pallets (lost items with no PO links).
  PERFORM embed_or_item.

ENDFORM.                    " READ_DELIVERY_NOTE

*&---------------------------------------------------------------------*
*&      Form  EMBED_OR_ITEM
*&---------------------------------------------------------------------*
FORM embed_or_item.

* Some items in LIPS are not recorded in DELIVERY table because they
* were created as "Items w/o reference" in the delvry note
  DATA: i_delivery LIKE delivery OCCURS 10 WITH HEADER LINE.
  REFRESH i_delivery.
  LOOP AT f_lips.
    READ TABLE delivery WITH KEY vbeln = f_lips-vbeln
                                 posnr = f_lips-posnr.
    IF sy-subrc NE 0.
      LOOP AT delivery WHERE vbeln EQ f_lips-vbeln AND
                         NOT ebeln IS INITIAL.
        MOVE: delivery-ebeln  TO i_delivery-ebeln,
              f_lips-vbeln    TO i_delivery-vbeln,
              f_lips-posnr    TO i_delivery-posnr,
* Items w/o reference are pointing to item # 000000
              '000000'        TO i_delivery-ebelp.
        APPEND i_delivery.
        EXIT.
      ENDLOOP.
    ENDIF.
  ENDLOOP.
  IF sy-subrc EQ 0.
    APPEND LINES OF i_delivery TO delivery.
    SORT delivery.
    DELETE ADJACENT DUPLICATES FROM delivery.
  ENDIF.

ENDFORM.                    " EMBED_OR_ITEM
*&---------------------------------------------------------------------*
*&      Form  SPELL_PALLETS
*&---------------------------------------------------------------------*
FORM spell_pallets CHANGING b_texts1   TYPE c
                            pallet_qty LIKE lips-lgmng.
  DATA: pallet_qty_text(128),
        spell_amount    LIKE spell.

*data: w_regio type kna1-regio.

  SELECT SINGLE regio INTO w_regio FROM kna1 WHERE kunnr EQ vbak-kunnr.
*
*  IF w_auart = 'ZICS'.                                      "RFS022002
*    c_pallet_pstyv = c_pallet_pstyv2.                       "RFS022002
*  ENDIF.                                                    "RFS022002
*
  IF w_regio NE 'BR'.
*    c_pallet_pstyv = 'ZPAL'.
    c_pallet_pstyv = 'ZPL8'.
  ENDIF.

  CLEAR pallet_qty.                                         "RFS022002
  LOOP AT f_lips
  WHERE pstyv EQ c_pallet_pstyv.
    ADD f_lips-lgmng TO pallet_qty.
  ENDLOOP.
  IF sy-subrc EQ 0.
    WRITE pallet_qty TO pallet_qty_text UNIT f_lips-meins.
  ELSE.
    pallet_qty_text = '0'.
  ENDIF.
  CALL FUNCTION 'SPELL_AMOUNT'
    EXPORTING
      amount    = pallet_qty_text
      language  = 'P'  " Only in Portuguese
    IMPORTING
      in_words  = spell_amount
    EXCEPTIONS
      not_found = 1
      too_large = 2
      OTHERS    = 3.
  IF sy-subrc EQ 0.
    sy-tfill = STRLEN( spell_amount-word ).
    FIELD-SYMBOLS:<fs>.
    ASSIGN spell_amount-word(sy-tfill) TO <fs>.
    b_texts1 = <fs> .
  ELSE.
    MOVE 'Zero'(005) TO b_texts1.
  ENDIF.
ENDFORM.                    " SPELL_PALLETS
* RFS022002 begin of insertion
*&---------------------------------------------------------------------*
*&      Form  GET_PALLETS_WEIGHT
*&---------------------------------------------------------------------*
FORM get_pallets_weight.
*
*  IF w_auart = 'ZICS'.
*    c_pallet_pstyv = c_pallet_pstyv2.
*  ENDIF.
*
*data: w_regio  type kna1-regio.

  SELECT SINGLE regio INTO w_regio FROM kna1 WHERE kunnr EQ vbak-kunnr.

  IF w_regio NE 'BR'.
*    c_pallet_pstyv = 'ZPAL'.
    c_pallet_pstyv = 'ZPL8'.
  ENDIF.

  CLEAR w_pallets_brgew.
  LOOP AT f_lips
  WHERE pstyv EQ c_pallet_pstyv.
    CLEAR mara.
    SELECT SINGLE brgew INTO mara-brgew FROM mara
                    WHERE matnr EQ f_lips-matnr.
    w_pallets_brgew = w_pallets_brgew + mara-brgew *
                      f_lips-lgmng.
  ENDLOOP.
*
ENDFORM.                    " GET_PALLETS_WEIGHT
*&---------------------------------------------------------------------*
*&      Form  FILL_F_LIPS
*&---------------------------------------------------------------------*
*       text                                                           *
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM fill_f_lips.
* Query Express
  DATA: BEGIN OF wl_query OCCURS 10,
       vgbel LIKE vbrp-vgbel.
  DATA: END   OF wl_query.
  DATA: wl_lines TYPE i.

*
  REFRESH f_lips.
  CLEAR f_lips.
  LOOP AT wk_item.
    REFRESH wl_query. CLEAR wl_query.
    SELECT vgbel FROM vbrp INTO CORRESPONDING FIELDS OF TABLE wl_query
                       WHERE vbeln EQ wk_item-refkey AND
                             posnr EQ wk_item-itmnum.
*
    IF sy-subrc NE 0.
      SELECT vgbel UP TO 1 ROWS
                         FROM vbrp INTO CORRESPONDING FIELDS OF TABLE wl_query
                         WHERE vbeln EQ wk_item-refkey.
    ENDIF.

    SELECT DISTINCT * FROM lips
       APPENDING CORRESPONDING FIELDS OF TABLE f_lips
       FOR ALL ENTRIES IN wl_query
       WHERE vbeln EQ wl_query-vgbel
       ORDER BY PRIMARY KEY.
  ENDLOOP.
*
  CLEAR wl_lines.
  DESCRIBE TABLE f_lips LINES wl_lines.
  CHECK wl_lines <> 0.
  SORT f_lips BY vbeln posnr.
  DELETE ADJACENT DUPLICATES FROM f_lips COMPARING vbeln posnr.
*
ENDFORM.                    " FILL_F_LIPS
* RFS022002 end of insertion
*
* RFS092003 begin of insertion
*&---------------------------------------------------------------------*
*&      Form  KIT_COMPVALUES_ACC_BATCH_QUANT
*&---------------------------------------------------------------------*
FORM kit_compvalues_acc_batch_quant
     USING wl_last_rec.
*
  DATA: wl_ipi LIKE j_1bprnfli-ipival,
        wl_qty LIKE j_1bprnfli-nfqty,
        wl_val LIKE j_1bprnfli-nfnet,
        wl_tabix LIKE sy-tabix.
*
* Print header of kit
  zsprnfauxi-dun14    = w_kit_header-dun14.
  zstkit-cd_kit       = w_kit_header-cd_kit.
  zstkit-desc_kit     = w_kit_header-desc_kit.
  zstkit-embal        = w_kit_header-embal.
  zsprnfauxi-subcfop2 = w_kit_header-subcfop2.
*** Begin DDN122007
*  j_1bprnfli-nbm      = w_kit_header-nbm.
  PACK   w_kit_header-nbm TO j_1bprnfli-nbm.
  CONDENSE j_1bprnfli-nbm NO-GAPS.
*** End DDN122007
  zstkit-matorg       = w_kit_header-matorg.
  zstkit-taxsit       = w_kit_header-taxsit.
  zstkit-nfunt        = w_kit_header-nfunt.
  zstkit-qtde         = kit_batch_control-nfqty.
***  CALL FUNCTION 'WRITE_FORM'
***    EXPORTING
***      element = 'LINE_KIT'
***      window  = 'MAIN'
***    EXCEPTIONS
***      OTHERS  = 01.
*
* Print kit components
  LOOP AT w_kit_components.
    wl_tabix = sy-tabix.
    zsprnfauxi-dun14    = w_kit_components-dun14.
    j_1bprnfli-matnr    = w_kit_components-matnr.
    j_1bprnfli-maktx    = w_kit_components-maktx.
    zsprnfauxi-embal    = w_kit_components-embal.
    zsprnfauxi-subcfop2 = w_kit_components-subcfop2.
*** Begin DDN122007
*    j_1bprnfli-nbm      = w_kit_components-nbm.
    PACK   w_kit_components-nbm TO j_1bprnfli-nbm.
    CONDENSE j_1bprnfli-nbm NO-GAPS.
*** End DDN122007

    j_1bprnfli-matorg   = w_kit_components-matorg.
    j_1bprnfli-taxsit   = w_kit_components-taxsit.
    zsprnfauxi-nfunt    = w_kit_components-nfunt.
    zstkit-ind_kit      = w_kit_components-ind_kit.
    j_1bprnfli-nfqty    = w_kit_components-nfqty.
    j_1bprnfli-nfpri    = w_kit_components-nfpri.
    j_1bprnfli-nfnet    = w_kit_components-nfnet.
    j_1bprnfli-icmsrate = w_kit_components-icmsrate.
    j_1bprnfli-ipirate  = w_kit_components-ipirate.
    j_1bprnfli-ipival   = w_kit_components-ipival.
*
    wl_qty   = j_1bprnfli-nfqty.
    wl_val   = j_1bprnfli-nfnet.
    wl_ipi   = j_1bprnfli-ipival.
    CLEAR: j_1bprnfli-nfnet,
           j_1bprnfli-nfqty,
           j_1bprnfli-ipival.
    IF wl_last_rec <> 'X'.
      IF w_kit_header-qtde <> 0.
        j_1bprnfli-nfqty  = wl_qty / w_kit_header-qtde
                            * kit_batch_control-nfqty.
        j_1bprnfli-nfnet  = wl_val / w_kit_header-qtde
                            * kit_batch_control-nfqty.
        j_1bprnfli-ipival = wl_ipi / w_kit_header-qtde
                            * kit_batch_control-nfqty.
      ENDIF.
    ELSE.
      j_1bprnfli-nfqty  = wl_qty - w_kit_components-tqty.
      j_1bprnfli-nfnet  = wl_val - w_kit_components-tval.
      j_1bprnfli-ipival = wl_ipi - w_kit_components-tipi.
    ENDIF.
*
***    CALL FUNCTION 'WRITE_FORM'
***      EXPORTING
***        element = 'LINE'
***        window  = 'MAIN'
***      EXCEPTIONS
***        OTHERS  = 01.
    ADD: j_1bprnfli-ipival TO w_kit_components-tipi,
         j_1bprnfli-nfqty  TO w_kit_components-tqty,
         j_1bprnfli-nfnet  TO w_kit_components-tval.
    MODIFY w_kit_components INDEX wl_tabix.
*
* RFS042004 begin of insertion
* Find PMC for this kit component
    READ TABLE w_pmc_table WITH KEY matnr = w_kit_components-matnr2.
    IF sy-subrc = 0. "There is PMC
* Write PMC (maximum consumer price) after each kit component
      MOVE w_pmc_table-maktx TO j_1bprnfli-maktx.
***      CALL FUNCTION 'WRITE_FORM'
***        EXPORTING
***          element = 'BTCH'
***          window  = 'MAIN'
***        EXCEPTIONS
***          OTHERS  = 01.
    ENDIF.
* RFS042004 end of insertion
*
  ENDLOOP.
*
ENDFORM.                    " KIT_COMPVALUES_ACC_BATCH_QUANT
* RFS092003 end of insertion
*
*   RFS052005 begin of insertion
*&---------------------------------------------------------------------*
*&      Form  get_all_nfs
*&---------------------------------------------------------------------*
FORM get_all_nfs.
*
  DATA: BEGIN OF wl_wk_item.
          INCLUDE STRUCTURE wk_item.
  DATA: END OF wl_wk_item.
  DATA: BEGIN OF wl_vbrp.
          INCLUDE STRUCTURE vbrp.
  DATA: END OF wl_vbrp.
  DATA: BEGIN OF wl_key_vbrk,
          vbeln LIKE vbrk-vbeln,
        END OF wl_key_vbrk.
  DATA: wl_ref_doc LIKE vbrp-aubel,
        wl_res LIKE wk_res,
        wl_div LIKE wk_div,
        wl_factor1 LIKE w_factor1,
        wl_factor2 LIKE w_factor2,
        wl_tabix LIKE sy-tabix.
*
  READ TABLE wk_item INTO wl_wk_item INDEX 1.
  CHECK wl_wk_item-reftyp EQ 'BI'.
  MOVE wl_wk_item-refkey(10) TO wl_key_vbrk.
  MOVE wl_key_vbrk-vbeln TO wl_vbeln.
  CLEAR wl_vbrp.
  SELECT * FROM vbrp INTO wl_vbrp
                      WHERE vbeln = wl_key_vbrk-vbeln.
    MOVE vbrp-aubel TO wl_ref_doc.
    EXIT.
  ENDSELECT.
  REFRESH t_meins2.
  IF sy-subrc = 0.
    SELECT * FROM vbrp INTO wl_vbrp WHERE aubel EQ wl_ref_doc
                                    AND   meins EQ 'IT'.
      CLEAR: wl_res, wl_div.
      CALL FUNCTION 'Z_VSO_UNIT_CONVERT'
        EXPORTING
          uom1                 = 'IT'
          uom2                 = 'CS'
          wmatnr               = wl_vbrp-matnr
        IMPORTING
          w_factor1            = wl_factor1
          w_factor2            = wl_factor2
        EXCEPTIONS
          conversion_not_found = 1
          OTHERS               = 2.
      IF sy-subrc = 0.
        IF wl_factor1 NE 0.
          wl_div = ( wl_vbrp-fkimg * wl_factor2 ) DIV wl_factor1.
          wl_res = ( wl_vbrp-fkimg * wl_factor2 ) MOD wl_factor1.
          IF wl_res NE 0.
            SELECT SINGLE meins INTO t_meins2-meins
               FROM zbrmatcx WHERE matnr = wl_vbrp-matnr.
            IF sy-subrc EQ 0.
              MOVE wl_vbrp-matnr TO t_meins2-matnr.
              MOVE wl_vbrp-vbeln TO t_meins2-vbeln.
              MOVE wl_res        TO t_meins2-menge.
              COLLECT t_meins2.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDSELECT.
  ENDIF.
*
  LOOP AT t_meins2.
    CLEAR: wk_res, wk_div.
    CALL FUNCTION 'Z_VSO_UNIT_CONVERT'
      EXPORTING
        uom1                 = 'IT'
        uom2                 = 'CS'
        wmatnr               = t_meins2-matnr
      IMPORTING
        w_factor1            = w_factor1
        w_factor2            = w_factor2
      EXCEPTIONS
        conversion_not_found = 1
        OTHERS               = 2.
    IF sy-subrc = 0.
      IF w_factor1 NE 0.
        wk_div = ( t_meins2-menge * w_factor2 ) DIV w_factor1.
        wk_res = ( t_meins2-menge * w_factor2 ) MOD w_factor1.
        IF wk_res NE 0.
          SELECT SINGLE meins INTO zbrmatcx-meins
          FROM zbrmatcx WHERE matnr = t_meins2-matnr.
          IF sy-subrc EQ 0.
            MOVE t_meins2-vbeln TO wl_t_meins_all-vbeln.
            MOVE t_meins2-meins TO wl_t_meins_all-meins.
            MOVE wk_res TO wl_t_meins_all-menge.
            COLLECT wl_t_meins_all.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDLOOP.
*
  REFRESH t_meins3.
  SORT wl_t_meins_all.
  LOOP AT wl_t_meins_all WHERE vbeln LT wl_key_vbrk-vbeln.
    MOVE-CORRESPONDING wl_t_meins_all TO t_meins3.
    COLLECT t_meins3.
  ENDLOOP.
  LOOP AT t_meins3.
    LOOP AT t_meins WHERE meins = t_meins3-meins.
      wl_tabix = sy-tabix.
    ENDLOOP.
    IF sy-subrc = 0.
      CLEAR: wl_res, wl_div.
      SELECT SINGLE umrez INTO zbrcxty-umrez
        FROM zbrcxty WHERE meins = t_meins3-meins.
      IF sy-subrc EQ 0 AND zbrcxty-umrez GT 0.
        wl_div = t_meins3-menge / zbrcxty-umrez.
        wl_res = t_meins3-menge MOD zbrcxty-umrez.
        IF wl_res NE 0.
          t_meins-menge = t_meins-menge + wl_res.
          MODIFY t_meins INDEX wl_tabix.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDLOOP.
*
ENDFORM.                    " get_all_nfs
*&---------------------------------------------------------------------*
*&      Form  check_if_last_nf
*&---------------------------------------------------------------------*
FORM check_if_last_nf USING    p_t_meins_meins
                      CHANGING p_wl_last_nf.
*
  LOOP AT wl_t_meins_all WHERE vbeln GT wl_vbeln
                     AND   meins EQ p_t_meins_meins.
    CLEAR p_wl_last_nf.
    EXIT.
  ENDLOOP.
*
ENDFORM.                    " check_if_last_nf
* RFS052005 end of insertion
*
*&---------------------------------------------------------------------*
*&      Form  F_FILL_DANFE_TEXT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_fill_danfe_text .

  DATA: e_header_msg TYPE j_1bnfftx,
        e_tline      TYPE tline.

  LOOP AT wk_header_msg INTO e_header_msg.
    e_tline-tdline = e_header_msg-message.
    APPEND e_tline TO w_danfe-text1.
  ENDLOOP.

ENDFORM.                    " F_FILL_DANFE_TEXT
*&---------------------------------------------------------------------*
*&      Form  F_BATCH_SPLIT_SELECTION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_batch_split_selection .

  TYPES: BEGIN OF y_nota,
          refkey TYPE vbrp-vbeln,
          itmnum TYPE vbrp-posnr,
        END OF y_nota.

  DATA: t_nota TYPE TABLE OF y_nota,
        e_nota TYPE y_nota,
        e_item TYPE j_1bnflin.

  LOOP AT wk_item INTO e_item.
    e_nota-refkey = e_item-refkey.
    e_nota-itmnum = e_item-itmnum.
    APPEND e_nota TO t_nota.
  ENDLOOP.

  SELECT vbeln
         posnr
         vgbel
         vgpos
    FROM vbrp
    INTO TABLE t_bvbrp
    FOR ALL ENTRIES IN t_nota
    WHERE vbeln EQ t_nota-refkey
      AND posnr EQ t_nota-itmnum.

  IF sy-subrc EQ 0.

    SELECT vbeln
           posnr
           charg
           uecha
           lfimg
           vrkme
      FROM lips
      INTO TABLE t_blips
      FOR ALL ENTRIES IN t_bvbrp
      WHERE vbeln EQ t_bvbrp-vgbel
      AND   uecha EQ t_bvbrp-vgpos.

    IF sy-subrc EQ 0.
      SORT t_blips BY vbeln uecha.
    ENDIF.
  ENDIF.
ENDFORM.                    " F_BATCH_SPLIT_SELECTION

*&---------------------------------------------------------------------*
*&      Form  F_CHECA_CLIENTE
*&---------------------------------------------------------------------*
*     Checa se o cliente tem e-mail cadastrado, para enviar PDF da NF  *
*----------------------------------------------------------------------*
FORM f_checa_cliente.

  CLEAR: w_adrnr,
         w_consnumber,
         w_smtp_addr,
         w_teste.

*** Busca o endereço do cliente
  SELECT SINGLE adrnr
   FROM kna1
   INTO w_adrnr
  WHERE kunnr EQ wk_header-parid.

*** Se encontrar, acessa a tabela de textos para comunicação
  IF sy-subrc IS INITIAL.

    SELECT SINGLE consnumber
      FROM adrt
      INTO w_consnumber
     WHERE addrnumber EQ w_adrnr
       AND remark     EQ c_nf.

*** Se encontrou a comunicação 'NF', busca o e-mail do cliente
    IF sy-subrc IS INITIAL.

      SELECT SINGLE smtp_addr
        FROM adr6
        INTO w_smtp_addr
       WHERE addrnumber EQ w_adrnr
         AND consnumber EQ w_consnumber.

      IF sy-subrc IS NOT INITIAL.

        MOVE c_x TO w_teste.

      ENDIF.

    ELSE.

      MOVE c_x TO w_teste.

    ENDIF.

  ENDIF.

ENDFORM.                    " F_CHECA_CLIENTE

*&---------------------------------------------------------------------*
*&      Form  F_ENVIA_PDF
*&---------------------------------------------------------------------*
*         Envia e-mail para o cliente, com a nota fiscal formatada     *
*----------------------------------------------------------------------*
FORM f_envia_pdf.

  LOOP AT e_job_output_info-otfdata ASSIGNING <fs_itcoo>.

    wa_conttxt-line = <fs_itcoo>.

    APPEND wa_conttxt TO t_otfitab.

  ENDLOOP.

  READ TABLE t_conttxt INDEX sy-tabix INTO wa_conttxt.

  IF wa_conttxt-line(2) NE c_barra.

    CLEAR wa_conttxt-line.

    MOVE c_barra TO wa_conttxt-line.

    APPEND wa_conttxt TO t_conttxt.

  ENDIF.

  CALL FUNCTION 'CONVERT_OTF'
    EXPORTING
      format                = c_pdf
    IMPORTING
      bin_filesize          = v_length
    TABLES
      otf                   = t_otfitab
      lines                 = t_pdfitab
    EXCEPTIONS
      err_max_linewidth     = 1
      err_format            = 2
      err_conv_not_possible = 3
      OTHERS                = 4.

  MOVE: c_1     TO wa_objpack-head_start,

        c_traco TO  wa_objbin-line.

  APPEND wa_objbin TO t_objbin.

  DESCRIBE TABLE t_objbin LINES v_tab_lines.

  CALL FUNCTION 'QCE1_CONVERT'
    TABLES
      t_source_tab         = t_pdfitab
      t_target_tab         = t_objbin
    EXCEPTIONS
      convert_not_possible = 1
      OTHERS               = 2.

*** Texto do e-mail
  MOVE wk_header-nfenum TO w_numf.

  MOVE c_assunto1 TO wa_docdata-obj_name.

*** Assunto do e-mail
  CONCATENATE c_assunto2
              w_numf
         INTO wa_docdata-obj_descr SEPARATED BY space.

*** Mensagem no corpo do e-mail
  CONCATENATE c_corpo
              w_numf
         INTO t_objtxt SEPARATED BY space.
  APPEND t_objtxt.

  DESCRIBE TABLE t_objtxt LINES v_tab_lines.

  READ TABLE t_objtxt INDEX v_tab_lines INTO wa_objtxt.

  wa_docdata-doc_size = ( v_tab_lines - 1 ) * 255 + STRLEN( wa_objtxt ).

  CLEAR wa_objpack-transf_bin.

  MOVE: c_1         TO wa_objpack-head_start,
        c_0         TO wa_objpack-head_num,
        c_1         TO wa_objpack-body_start,
        v_tab_lines TO wa_objpack-body_num,
        c_raw       TO wa_objpack-doc_type.

  APPEND wa_objpack TO t_objpack.

*** Anexando o arquivo
  DESCRIBE TABLE t_objbin LINES v_tab_lines.

  READ TABLE t_objbin INDEX v_tab_lines INTO wa_objbin.

  wa_objpack-doc_size = ( v_tab_lines - 1 ) * 255 + STRLEN( wa_objbin ).

  MOVE: c_x                  TO wa_objpack-transf_bin,
        c_1                  TO wa_objpack-head_start,
        c_1                  TO wa_objpack-head_num,
        c_1                  TO wa_objpack-body_start,
        v_tab_lines          TO wa_objpack-body_num,
        c_pdf                TO wa_objpack-doc_type,
        wa_docdata-obj_name  TO wa_objpack-obj_name,
        wa_docdata-obj_descr TO wa_objpack-obj_descr.

  APPEND wa_objpack TO t_objpack.

*** Recebedor do e-mail
  SPLIT w_smtp_addr AT ',' INTO TABLE t_mail.

  LOOP AT t_mail.
    wa_reclist-receiver = t_mail-mail.  "<-- change address
    wa_reclist-express   = c_x.
    wa_reclist-rec_type = c_u.
    APPEND wa_reclist TO t_reclist.

  ENDLOOP.

  CALL FUNCTION 'SO_NEW_DOCUMENT_ATT_SEND_API1'
       EXPORTING
            document_data              = wa_docdata
            put_in_outbox              = c_x
            commit_work                = c_x
       TABLES
            packing_list               = t_objpack
            object_header              = t_objhead
            contents_bin               = t_objbin
            contents_txt               = t_objtxt
            receivers                  = t_reclist
       EXCEPTIONS
            too_many_receivers
            document_not_sent
            document_type_not_exist
            operation_no_authorization
            parameter_error
            x_error
            enqueue_error.

ENDFORM.                    " F_ENVIA_PDF
*" Begin of BN8068-080929
*&---------------------------------------------------------------------*
*&      Form  F_FILL_IE_SUBST_TRIB
*&---------------------------------------------------------------------*
*       Fill State Tax Number for Substituição Tributária
*----------------------------------------------------------------------*
FORM f_fill_ie_subst_trib .

  CONSTANTS:
        c_ics3(4)        TYPE c          VALUE 'ICS3',
        c_no_st(11)      TYPE c          VALUE 'INEXISTENTE',
        c_partner_we(2)  TYPE c          VALUE 'WE'.

  DATA: e_partner    TYPE j_1bnfnad_stru,
        w_state_insc TYPE j_1bstastv-state_insc,
        w_parid      TYPE j_1bnfdoc-parid,
        w_shipto     TYPE j_1bstast-txreg.

* Condition ICST verification
  IF wk_header_add-icstval IS NOT INITIAL.

    CLEAR e_partner.

*" Partner WE
    READ TABLE wk_partner INTO e_partner WITH KEY parvw = c_partner_we
                                                         BINARY SEARCH.

    IF sy-subrc IS INITIAL
    OR wk_header-parvw EQ c_partner_we.

      IF wk_header-parvw EQ c_partner_we.

        MOVE wk_header-parid TO w_parid.

      ELSE.

        MOVE wk_header-parid TO w_parid.

      ENDIF.

* Retriving SHIPTO
      CLEAR w_shipto.

      SELECT SINGLE txjcd
        FROM kna1
        INTO w_shipto
       WHERE kunnr EQ w_parid.

      IF sy-subrc IS INITIAL.

* Retriving State Tax Number for Substituição Tributária
        CLEAR w_state_insc.

        SELECT SINGLE state_insc
          FROM j_1bstast
          INTO w_state_insc
         WHERE bukrs  EQ wk_header-bukrs
           AND branch EQ wk_header-branch
           AND txreg  EQ w_shipto.

        IF  sy-subrc IS INITIAL
        AND ( w_state_insc IS NOT INITIAL
         OR   w_state_insc NE c_no_st ).

*State Tax Number for Substituição Tributária from Issuer identification
          MOVE w_state_insc TO w_danfe-issuer-state_insc.

        ENDIF. "State Insc existence

      ENDIF. "Shipto existence

    ENDIF. "WE partner existence

  ENDIF. "ICS3 TAX existence


ENDFORM.                    " F_FILL_IE_SUBST_TRIB
*" End of BN8068-080929

*" Begin of BN8068-081013
**&---------------------------------------------------------------------*
**&      Form  F_EXECUTA_VF31
**&---------------------------------------------------------------------*
FORM f_executa_vf31 .

  CLEAR: w_bdcdata.

  FREE: i_bdcdata,
        i_message,
        i_zsloginvocidoc.

  PERFORM f_insert_bdc USING:
      'X' 'SD70AV3A'             '1000',
      ' ' 'BDC_OKCODE'           '=ONLI',
      ' ' 'RG_KSCHL-LOW'         c_zbrn,
      ' ' 'PM_VERMO'             c_1,
      ' ' 'RG_VBELN-LOW'         vbrk-vbeln.

  PERFORM f_insert_bdc USING:
      'X' 'SAPMSSY0'             '0120',
      ' ' 'BDC_OKCODE'           '=&ALL'.

  PERFORM f_insert_bdc USING:
      'X' 'SAPMSSY0'             '0120',
      ' ' 'BDC_OKCODE'           '=PROC'.

  CLEAR w_mode.

  MOVE c_n TO w_mode.

  CALL TRANSACTION 'VF31' USING i_bdcdata
    MODE w_mode MESSAGES INTO i_message.

  READ TABLE i_message ASSIGNING <fs_message>
                       WITH KEY msgtyp = c_s
                                msgid  = c_vn
                                msgnr  = c_108.

  IF sy-subrc IS NOT INITIAL.

    CLEAR w_cont.

    UNASSIGN <fs_message>.

    LOOP AT i_message ASSIGNING <fs_message>
      WHERE msgtyp EQ c_e.

      CLEAR zsloginvocidoc.

      w_cont = w_cont + 1.

      MOVE: vbrk-vbeln TO zsloginvocidoc-vbeln,
            w_cont     TO zsloginvocidoc-sequ,
            sy-uname   TO zsloginvocidoc-uname,
            sy-datum   TO zsloginvocidoc-datum,
            sy-uzeit   TO zsloginvocidoc-uzeit.

      CALL FUNCTION 'MESSAGE_TEXT_BUILD'
        EXPORTING
          msgid               = <fs_message>-msgid
          msgnr               = <fs_message>-msgnr
          msgv1               = <fs_message>-msgv1
          msgv2               = <fs_message>-msgv2
          msgv3               = <fs_message>-msgv3
          msgv4               = <fs_message>-msgv4
        IMPORTING
          message_text_output = zsloginvocidoc-messa.

      IF sy-subrc IS INITIAL.

      ENDIF.

      APPEND zsloginvocidoc TO i_zsloginvocidoc.

    ENDLOOP.

    IF i_zsloginvocidoc[] IS NOT INITIAL.

      CALL FUNCTION 'ENQUEUE_EZSLOGINVOICDOC'
        EXPORTING
          mandt          = sy-mandt
          vbeln          = zsloginvocidoc-vbeln
          sequ           = zsloginvocidoc-sequ
          uname          = zsloginvocidoc-uname
          datum          = zsloginvocidoc-datum
          uzeit          = zsloginvocidoc-uzeit
        EXCEPTIONS
          foreign_lock   = 1
          system_failure = 2
          OTHERS         = 3.

      IF sy-subrc <> 0.

      ENDIF.

      INSERT zsloginvocidoc FROM TABLE i_zsloginvocidoc.

      CALL FUNCTION 'DEQUEUE_EZSLOGINVOICDOC'
        EXPORTING
          mandt = sy-mandt
          vbeln = zsloginvocidoc-vbeln
          sequ  = zsloginvocidoc-sequ
          uname = zsloginvocidoc-uname
          datum = zsloginvocidoc-datum
          uzeit = zsloginvocidoc-uzeit.

      IF sy-subrc IS INITIAL.

      ENDIF.

    ENDIF.

  ENDIF.

ENDFORM.                    " F_EXECUTA_VF31

**&---------------------------------------------------------------------*
**&      Form  f_insert_bdc
**&---------------------------------------------------------------------*
**       CARREAG TABELA T_BDCDATA
**----------------------------------------------------------------------*
FORM f_insert_bdc USING value(us_dynbegin)
                        value(us_valor1)
                        value(us_valor2).

  CLEAR: w_bdcdata.

  CASE us_dynbegin.

    WHEN c_x.

      MOVE: us_valor1 TO w_bdcdata-program,
            us_valor2 TO w_bdcdata-dynpro,
            c_x      TO w_bdcdata-dynbegin.

    WHEN OTHERS.

      MOVE: us_valor1 TO w_bdcdata-fnam,
            us_valor2 TO w_bdcdata-fval.

  ENDCASE.

  APPEND w_bdcdata TO i_bdcdata.

ENDFORM.                    " FINSERT_BDC
**" End of BN8068-081013
*{ Begin of BN8068-081119
*&---------------------------------------------------------------------*
*&      Form  F_MESSAGE_VERIFY_PRICING
*&---------------------------------------------------------------------*
*       Princing Messages
*----------------------------------------------------------------------*
FORM f_message_verify_pricing .

  SELECT SINGLE * FROM  zstxtlegal
         WHERE  codmsg EQ wk_zstxtdeter-codmsg.

  IF sy-subrc = 0.

* Calculate Zona Franca Pricing
    PERFORM f_read_konv.

  ENDIF.

ENDFORM.                    " F_MESSAGE_VERIFY_PRICING
*&---------------------------------------------------------------------*
*&      Form  F_READ_KONV
*&---------------------------------------------------------------------*
*       Read KONV conditions
*----------------------------------------------------------------------*
FORM f_read_konv .

  CONSTANTS:
    c_i           TYPE char1  VALUE 'I',
    c_eq          TYPE char2  VALUE 'EQ',
    c_valor_deter TYPE char19 VALUE 'WK_ZSTXTDETER-VALOR'.

  DATA: i_kwert TYPE STANDARD TABLE OF kwert,
        w_kwert TYPE kwert.

  DATA:
    r_kschl  TYPE RANGE OF konv-kschl,
    r_lkschl LIKE LINE OF r_kschl,
    w_index  TYPE n,
    w_campo(20) TYPE c.

  FIELD-SYMBOLS: <fs_value> TYPE ANY.

  REFRESH r_kschl.

  CLEAR: w_kwert,
         r_lkschl,
         valparam1,
         value.
  MOVE:
    c_i  TO r_lkschl-sign,
    c_eq TO r_lkschl-option.

* Mount KSCHL range
  DO 5 TIMES.

    CLEAR: w_campo,
           w_index.

    UNASSIGN <fs_value>.

    MOVE sy-index TO w_index.

    CONCATENATE c_valor_deter w_index INTO w_campo.

    ASSIGN (w_campo) TO <fs_value>.

    IF <fs_value> IS ASSIGNED.

      MOVE <fs_value> TO r_lkschl-low.

    ENDIF.

    APPEND r_lkschl TO r_kschl.

  ENDDO.

* Retrieve conditions value
  CLEAR i_kwert.

  SELECT kwert
    FROM konv
    INTO TABLE i_kwert
   WHERE knumv EQ vbrk-knumv
     AND kschl IN r_kschl.

  IF sy-subrc IS INITIAL.

    LOOP AT i_kwert INTO w_kwert.

      ADD w_kwert TO value.

    ENDLOOP.

    IF value GT 0.

      MOVE value TO valparam1.

      CONDENSE valparam1.

* Print Zona Franca Message
      PERFORM f_create_princing_msg.

    ENDIF.

  ENDIF.

ENDFORM.                    " F_READ_KONV
*&---------------------------------------------------------------------*
*&      Form  f_create_princing_msg
*&---------------------------------------------------------------------*
*       Create princing message
*----------------------------------------------------------------------*
FORM f_create_princing_msg.

  CLEAR: wk_header_msg,
         msgaux.

  wk_header_msg-mandt = sy-mandt.
  wk_header_msg-docnum = wk_header-docnum.
  wk_header_msg-linnum = 01.

  MOVE zstxtlegal-linha1 TO msgaux.

  REPLACE '&1' WITH valparam1 INTO msgaux.

  CONDENSE msgaux.
  wk_header_msg-message = msgaux.
  indmsg = indmsg + 1.
  wk_header_msg-seqnum = indmsg.
  APPEND wk_header_msg.

ENDFORM.                               " f_create_princing_msg
*} End of BN8068-081119
*&---------------------------------------------------------------------*
*&      Form  F_CHECK_TRAID
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WK_HEADER  text
*----------------------------------------------------------------------*
FORM f_check_traid  USING    p_wk_header LIKE wk_header.
  DATA: w_len TYPE i.

  CLEAR w_len.

  IF p_wk_header-traid CA '/'.

    SPLIT p_wk_header-traid AT '/' INTO w_danfe-others-uf_plate wk_header-traid.

  ELSE.

    w_len = STRLEN( p_wk_header-traid ).

    CASE w_len.

      WHEN 9.

        MOVE p_wk_header-traid+0(2) TO w_danfe-others-uf_plate.

        MOVE p_wk_header-traid+2(7) TO wk_header-traid.

      WHEN 10.

        MOVE p_wk_header-traid+0(2) TO w_danfe-others-uf_plate.

        MOVE p_wk_header-traid+2(8) TO wk_header-traid.

      WHEN 11.

        MOVE p_wk_header-traid+0(2) TO w_danfe-others-uf_plate.

        MOVE p_wk_header-traid+3(8) TO wk_header-traid.

    ENDCASE.

  ENDIF.

ENDFORM.                    " F_CHECK_TRAID